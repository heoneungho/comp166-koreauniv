#summary 이창권의 실습 페이지입니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{
public class beersong
{ public static void main (string[] args)
	{ int beernum =99;
	string word="bottles";
	while(beernum>0)
		{
		if (beenum ==1)
		{word="bottle";}
system.out.println(beernum +""+word+" of beer on the wall");
system.out.println(beernum+""+word+"of beer.");
system.out.println("pass it around.");
beernum-beernum-1;

if(beernum>0)
{
system.out.println(beernum+""+word+"of beer on the wall");}
else
{system.out.println("no more bottles of beer on the wall");}
}}}}

}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{
public class PhraseOMatic{
        public static void main (String[] args){
         
        String[] number = {"1", "2", "3", "4"};
        String[] animal = {"cat", "dog", "snake", "horse"};
        String[] beer = {"hite", "cass", "budweiser", "heineken"};

        int oneLength = number.length;
        int twoLength = animal.length;
        int threeLength = beer.length;

        int rand1 = (int)(Math.random() * oneLength);
        int rand2 = (int)(Math.random() * twoLength);
        int rand3 = (int)(Math.random() * twoLength);

        String phrase = number[ran1] + " " + animal[ran2] + " " + beer[ran3];
        
        System.out.println("What we need is a " + phrase);
        }
}


}}}

*52p 집중토론* _요약_

 * 자바 가상 머신:  보안관련작업, 다른 누군가 건드렸는지 확인
 * 컴파일러:  동적바인딩지원, 일어나면 안되는일 방지, 접근위반 방지

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
class Exerciselb
{
  public static void main(String [] args)
  { 
    int x = 1; // 변수 x에 1을 넣는다.
    
    while ( x < 10 ) // x 가 10미만일 때(동안)
    {
       if( x > 3 ) // x가 3초과이면
       System.out.println("big x"); // 출 력
       x++; // x에 1을 더한다.
    }
  }
}

class Exerciselb
{
  public static void main(String [] args)
  {
    int x = 5; // 변수 x에 5를 넣는다.
    while(x>1)  // x가 1초과일 때(동안)
    {
       if (x < 3) // x가 3미만이면
          System.out.println("small x"); // 출 력
       x--; // x에 1을 뺀다.
    }
  }
}

}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체에서 자신에 대해서 아는것으로 객체의 상태를 나타낸다.
 * 메소드: 객체에서 자신이 하는일이다.
 * 클래스: 객체를 만들기 위한 용도(청사진)이다.
 * 테스트용 클래스: 새로운 클래스를 테스트하기위한 클래스로서 테스트할 클래스 유형의 객체를 만들어 메소드와 변수를 테스트하는것이다.
 

*68p Television* _채워넣기_

 * 인스턴스 변수: volume, channel, power
 * 메소드: volumeup(), volumedown(), channelup(), channeldown(), poweron(), poweroff()


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{
public class GuessGame {
        Player p1;
        Player p2;
        Player p3;
        Player p4;
//인스턴스 변수 추가
        
        public void startGame() {
                p1 = new Player();
                p2 = new Player();
                p3 = new Player();
                p4 = new Player();
//player객체를 인스턴스변수에 대입
                
                int guessp1 = 0;
                int guessp2 = 0;
                int guessp3 = 0;
                int guessp4 = 0;
//찍을숫자 저장
                
                boolean p1isRight = false;
                boolean p2isRight = false;
                boolean p3isRight = false;
                boolean p4isRight = false;
//기본값을 ‘틀림’으로 저장
                
                int targetNumber = (int)(Math.random()*10);
                
                System.out.println("0 이상 9 이하의 숫자를 맞춰보세요.");
                
                while(true)     {
                        System.out.println("맞춰야 할 숫자는 " + targetNumber + "입니다.");
                        
                        p1.guess();
                        p2.guess();
                        p3.guess();
                        p4.guess();
//각각 선수별로 guess메소드 호출
                       
                        guessp1 = p1.number;
                        System.out.println("1번 선수가 찍은 숫자 : " + guessp1);
                        
                        guessp2 = p2.number;
                        System.out.println("2번 선수가 찍은 숫자 : " + guessp2);
                        
                        guessp3 = p3.number;
                        System.out.println("3번 선수가 찍은 숫자 : " + guessp3);
                        
                        guessp4 = p4.number;
                        System.out.println("4번 선수가 찍은 숫자 : " + guessp4);
                        
                        if(guessp1 == targetNumber)     
                                p1isRight = true;
                        
                        if(guessp2 == targetNumber)
                                p2isRight = true;
                        
                        if(guessp3 == targetNumber)
                                p3isRight = true;
                        
                        if(guessp4 == targetNumber)
                                p4isRight = true;
// 맞출 경우 결과값을 ‘맞음’으로 바꿈
                        
                        if(p1isRight | p2isRight | p3isRight | p4isRight)       {
                                System.out.println("맞춘 선수가 있습니다.");
                                
                                System.out.println("1번 선수 : " + p1isRight);
                                System.out.println("2번 선수 : " + p2isRight);
                                System.out.println("3번 선수 : " + p3isRight);
                                System.out.println("4번 선수 : " + p4isRight);
                                
                                System.out.println("게임 끝.");
                
                                break;
                        } 
// 게임 끝나서 나감
else  {
                                System.out.println("다시 시도해야 합니다.");
                        }
//못맞춰서 다시 실행
                }
        }
}

class Player    {
        int number = 0;
        
        public void guess()     {
                number = (int)(Math.random()*10);
                
                System.out.println("찍은 숫자 : " + number);
        }
}

class GameLauncher      {
        public static void main(String[] args)  {
                GuessGame game = new GuessGame();
                
                game.startGame();
        }
}
}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
class TapeDeck
{
        boolean canRecord = false;

        void playTape() // 테이프 플레이 메소드
        {
             System.out.println("tape playing"); // tape playing 출력
        }

        void recoredTape() // 테이프 녹음 메소드
        {
             System.out.println("tape recording"); // tape recording 출력
        {
}

class TapeDeckTestDrive
{
        public static void main(String [] args)
        {
                TapeDeck t = new TapeDeck(); //t라는 TapeDeck 객체 생성
                t.canrecord = true; 
                t.playTape(); // playTape 메소드 호출

                if(t.canRecord == true)
                        t.recordTape(); // recordTape 메소드 호출
        }
}



class DVDPlayer 
{
        boolean canRecord = false; 
        
        void playDVD()
        {
                System.out.println("DVD playing"); //dvd playing출력
        }
        
        void recordDVD()
        {
                System.out.println("DVD recording"); //DVD recording출력
        }
}

class DVDPlayerTestDrive
{
        public static void main(String [] args)
        {
              DVDPlayer d = new DVDPlayer(); // d라는 DVDplayer 객체 생성
              d.canRecord = true;
              d.playDVD(); // playerDVD 메소드 호출
        
                if(d.canRecord == true)
                        d.recordDVD(); // record dvd 메소드 호출
        }
}
}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수: 정수, 부울, 부동소수점 수와 같은 기초적인 값 - 단순한 비트 패턴으로 나타낼 수 있는 기본적인 값이 들어감
 * 레퍼런스변수: 객체에 대한 레퍼선스가 들어감  
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{
class Dog
{
        String name;
        public static void main(String [] args)
        {
                int n,i;
                Dog dog1 = new Dog();
                dog1.bark();
                dog1.name = "개새x";

                        
                Dog[] mydogs = new dog[100]; // Dog 배열 생성

                for(i=0;i<99;i++)
                {
                        myDogs[i] = new Dog();
                }
                myDogs[99] = dog1;

                for(i=0;i<99;i++) // Dog 객체에 이름 생성
                {
                        myDogs[i].name = "개새x" + i ;
                }
                
                myDogs[99] = "개새x" + n-1;

                System.out.println("마지막 개의 이름 :");      
                System.out.println("myDogs[99].name);
        
                int x = 0;
                
                while(x < myDogs.length)
                {
                        myDog[x].bark();
                        x++;
                }
        }

        public void bark()
        {
                System.out.println(name + "이(가) 왈! 하고 짖습니다.");
// 개가 짖게 함
        }
        
        public void eat() { }
        public void chaseCat() { }

}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
class Books
{
        String title;
        String author;
}

class BooksTestDrive
{
        public static void main(String [] args)
        {
                Books [] myBookes = new Books[3]; // Books 객체 생성
                int x = 0;
                myBooks[0] = new Books();
                myBooks[1] = new Books();
                myBooks[2] = new Books();

                myBooks[0].title = "날 Java";
                myBooks[1].title = "Java왔니?";
                myBooks[2].title = "빨리 Java";
                myBooks[0].author = "bob";
                myBooks[1].author = "sue";
                myBooks[2].author = "ian";

                while(x<3) // 책이름 저자 프린트 순서
                {       
                        System.out.println(myBooks[x].title);
                        System.out.println(" by ");
                        System.out.println(myBooks[x].author);
                        x++;
                }
        }
}




class Hobbits
{
        
        String name;
        
        public static void main(String [] args)
        {
                Hobbits [] h = new Hobbits[3]; // Hobbits 객체 생성
                int z = 0;
                
                while(z<3) // 객체의 크기가 3이므로
                {
                        h[z] = new Hobbits();
                        h[z].name = "bilbo";
                        if(z==1)
                                h[z].name = "frodo";
                        if(z==2)
                                h[z].name = "sam";
                
                        System.out.println(h[z].name + " is a ");
                        System.out.println("good Hobbit name");
                        z++;
                }
        }
}
}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?: Bob
 * 문제가 된 부분은 어딘가요?: 켄트의 코드는 순환문을 돌때마다 새로운 값으로 초기화 되기 때문에 

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화: 인스턴스주변에 방어막같은것을 만들어 주는것
 * 게터와 세터: 액세서(accessor) 어떤것을 리턴값의 형태로 가져오는 역할 & 뮤테이터(mutator) 어떤것을 인자로 받아 설정하는 역할
 * 인스턴스 변수 vs 지역 변수: 인스턴스변수는 클래스 내에서 선언되고 메소드 내에서 선언되지않고, 지역변수는 메소드 내에서 선언되고 기본값이 없다.
초기화하기 전에 사용하려고 하면 컴파일 과정에서 오류가 나므로 초기화해야함
 
*107p Dog* _실행_

{{{
public class Dog2 
{
        int size;
        String name;
        
        void bark() 
{
        if(size>60)
{ System.out.println("Wooof! Wooof!");}
        else if (size >14)
{ System.out.println("Ruff! Ruff!");}
        else 
{ System.out.println("Yip! Yip!");}
        }

}
-----------------------------------------------------------------
public class DogTestDrive 
{
                public static void main (String[] args) 
                {
                        Dog2 one = new Dog2();
                        one.size=70;
                        Dog2 two = new Dog2();
                        two.size=8;
                        Dog2 three = new Dog2();
                        three.size=35;
                        
                        one.bark();
                        two.bark();
                        three.bark();
                }
}

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
public class XCopy 
{
        
        public static void main(String [] args) {
                int orig = 42;
                
                XCopy x = new XCopy();
                
                int y = x.go(orig);
                
                System.out.println(orig + " " + y);
        }
        
        int go(int arg) 
        {
                
                arg = arg*2;
                
                return arg;
        }
        
}
// 그냥 됩니다.

--------------------------------------------------------------

public class Clock 
{
        
        String time;
        
        void setTime(String t) 
{
                
                time = t ;
        }

        String getTime() 
{  
                
                return time;
        } //여기서 수정함

}

class ClockTestDrive {
        
        public static void main(String [] args) {
                
                Clock c = new Clock();
                
                c.setTime("1245");
                String tod = c.getTime();
                System.out.println("time: " + tod);
        }
}
}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
최근 소프트웨어개발방법분야로서 '프로그래머들이 정말 원하는 방법'이라고 한다. 막판에 스펙이 변경되는 일이 있어도 고객이 원하는 것을 고객이 원하는 기한에 맞춰서 제공할 수 있다는 점이 큰 장점이다.
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{
public class SimpleDotComTestDrive      
{
        public static void main(String[] args)  
        {
               SimpleDotCom dot = new SimpleDotCom();
// SimpleDotCom을 참조하는 변수
                int[] locations = {2,3,4}; // location 선언
                dot.setLocationCells(locations); // setLocationCells 참조
                
                String userGuess = "2";
                String result = dot.checkYourself(userGuess); //checkYourSelf 보내서 결과 출력
                
        }
}

public class SimpleDotCom       
{        
        int[] locationCells;
        int numOfHits = 0; // 초기화

        public void setLocationCells (int[] locs)      
        {
                locationCells = locs;
        }

        public String checkYourself (String stringGuess)        
        {
                int guess = Integer.parseInt(stringGuess); 
// string변수를 int형으로 변환
                String result = "miss";

                for(int i=0; i < locationCells.length; i++)     
                {
                        if(guess == locationCells[i])   
                        {
                                result = "hit";
                                numOfHits++;

                                break;
                        }
                } // 순환문 끝
        
                if (numOfHits == locationCells.length)  
                {
                        result = "kill"; // 맞춤
                }
        
                System.out.println(result);
                
                return result;
        } // 메소드 끝
} //클래스 끝



import java.io.*;

public class GameHelper {
        public String getUserInput(String prompt)       {
                String inputLine = null;
                
                System.out.print(prompt + " ");
                
                try{
                        BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
                        inputLine = is.readLine();
                        
                        if(inputLine.length() == 0 )
                                return null;
                }       catch (IOException e)   {
                        System.out.println("IOException: " + e);
                }
                
                return inputLine;
        }
}
// 솔직히 뭔지 모름....
}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{
class SimpleDotComTestDrive      {
        public static void main(String[] args)  {
                SimpleDotCom dot= new SimpleDotCom(); //SimpleDotcom 을 참조하는 변수제작
                int[] locations = {2,3,4}; // location배열 선언
                dot.setLocationCells(locations); // setLocationCells 참조
                String userGuess = "2";
                String result = dot.checkYourself(userGuess); //checkYourSelf로 보내 결과 출력
                }
        }

public class SimpleDotCom       {
        int[] locationCells; 
        int numOfHits = 0; // reset the number of Hits
        int[] locationCheck; //locationcheck배열 선언
        
        public void setLocationCells (int[] locs)       {
                locationCells = locs;
                }  

        public String checkYourself (String stringGuess)        {
                int guess = Integer.parseInt(stringGuess); // string 변수를 int형으로 
                String result = "miss"; //reset the result that is "miss".

                for(int i=0; i < locationCells.length; i++)             {
                        if(locationCheck[i] == locationCells[i])        { //check 이용 전에  썼던 거면 for 문을 나옴 
                                break;
                        }

                        if(guess == locationCells[i])   {
                                result = "hit";
                                locationCells[i] = locationCheck[i]; // Check에 대입 중복방지
                                numOfHits++;

                                break;
                                }
                        }
                if (numOfHits == locationCells.length)  
                        result = "kill"; // if player answers all of the dots then print out "kill".
                        
                System.out.println(result);

                return result;
        }
               
}

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{
class SimpleDotComTestDrive      {
        public static void main(String[] args)  {
                SimpleDotCom dot= new SimpleDotCom();
                int[] locations = {2,3,4};
                dot.setLocationCells(locations);
                String userGuess = "2";
                String result = dot.checkYourself(userGuess);
                }
        }

public class SimpleDotCom       {
        int[] locationCells;
        int numOfHits = 0;
        
        public void setLocationCells (int[] locs)       {
                locationCells = locs;
                }  
        public String checkYourself (String stringGuess)        {
                int guess = Integer.parseInt(stringGuess); // string 변수를 int형으로 
                String result = "miss";
                for(int i=0; i < locationCells.length; i++)             {                        
                        if(guess == locationCells[i])   {
                                result = "hit";
                                numOfHits++;
                                locationCells[i] = -1; // locationCells[i]의 배열에 -1 을 넣어 숫자를 넣더라도 -1이므로 틀리게 나옴
                                break;
                                }
                        }
                if (numOfHits == locationCells.length)  {
                        result = "kill";
                        }
                System.out.println(result);
                return result;
        }
               
}

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{
import java.util.ArrayList;

class SimpleDotComTestDrive      {
        public static void main(String[] args)  {
                SimpleDotCom dot= new SimpleDotCom();
                int[] locations = {2,3,4};
                dot.setLocationCells(locations);
                String userGuess = "2";
                String result = dot.checkYourself(userGuess);
                }
        }


public class DotCom     {
        private ArrayList<String> locationCells;
        
        public void setLocationCells(ArrayList<String> loc)     {
                locationCells = loc;
        }
        
        public String checkYourself(String userInput)   {
                String result = "miss";
                
                int index = locationCells.indexOf(userInput); //사용자가 추측한 위치가 들어있는지 확인. 있으면 인덱스 번호 없으면 -1
                
                if (index >= 0) {
                        locationCells.remove(index);
                        
                        if(locationCells.isEmpty())     { //목록이 비었다는 것은 닷컴이 죽었다는것.
                                result = "kill";
                        }       else    {
                                result = "hit";
                        }
                }
                return result;
        }
}

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{
import java.util.*;

public class DotCom     {
        private ArrayList<String> locationCells;
        private String name;

        public void setLocationCells(ArrayList loc)     {
                locationCells = loc;
        }

        public void setName(String n)   {
                name = n;
        }

        public String checkYourself(String userInput)   {
                String status = "miss";
                int index = locationCells.indexOf(userInput);
                if(index >= 0)  {
                        locationCells.remove(index); // remove를 써서 삭제 
                        if(locationCells.isEmpty())     {
                                status = "kill";
                                System.out.println("Ouch You sunk " + name + "  :       ( ");  // 닷컴이 맞췄을시 출력
                        }       else    {
                                status = "hit";
                        }
                }
                return status; // miss hit kill 
        }
}

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속: 상위클래스가 하위클래스에게 물려주는것
 * 다형성: 상위클래스 형식이 들어갈 수 있는 자리에 임의의 하위클래스에 속하는 객체를 마음대로 사용가능하다는것 

*208p 클래스 계층 구조* _클래스로 구현_

{{{
public class Animal     {
        void makeNoise();
        void eat();
        void sleep();
        void roma();
}

public class Feline extends Animal      {
        void roam();
}

public class Hippo extends Animal       {
        void makeNoise();
        void eat();
}

public class Canine extends Animal      {
        void roam();
}

public class Lion extends Feline        {
        void makeNoise();
        void eat();
}

public class Tiger extends Feline       {
        void makeNoise();
        void eat();
}

public class Cat extends Feline         {
        void makeNoise();
        void eat();

public class Wolf extends Canine        {
        void makeNoise();
        void eat();
}

public class Dog extends Canine         {
        void makeNoise();       
        void eat();
}
}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드: 이름만 같고 서로 다른 메소드. 
 * 오버로딩: 이름이 같고 인자 목록이 다른 메소드 두 개를 만드는 것. 

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
public class MonsterTestDrive   {
        public static void main(String[] args)  {
                Monster [] ma = new Monster[3]; //ma 리스트 생성
                ma[0] = new Vampire();
             ma[1] = new Dragon();
             ma[2] = new Moster();
                for(int x=0; x<3; x++)  
                        ma[x].frighten(x);
        }
}

class Monster   {  //몬스터 클래스 생성
        boolean frighten(int z) {
                System.out.println("arrrgh");
                return true;
        }
}

class Vampire extends Monster   {      //몬스터의 하위 클래스 (뱀파이어) 생성
        boolean frighten(byte b)        {
                System.out.println("a bite?");
                return true;
        }
}

class Dragon extends Monster    {       //몬스터의 하위 클래스 (드래곤) 생성
        boolean frighten(int degree)    {
                System.out.println("breath fire");
                return true;
        }
}

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스: 추상 클래스 
 * 다형성: 여러형태
 * 추상 클래스: 인스턴스를 만들 수 없는 클래스 , abstract 을 앞에 붙임으로써 만들 수 있다.
 * 추상 메소드: 반드시 오버라이드를 해야하는 메소드 
 * 다중 상속: 상위 클래스를 2개 사용하는 접근법

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수: 지역변수, 인스턴스변수
 * 스택에서의 변수: 지역변수
 * 생성자: 객체를 실제로 사용하기 전에 그 객체를 쓰는 데 필요한 작업을 처리 
 * 널 레퍼런스: 레퍼런스가 아무것도 없는 내용이 있다.
 
*298p 집중토론* _요약_

 * 인스턴스 변수: 객체와 힙에 저장. 객체의 상태 저장 
 * 지역 변수: 메소드에 있는 알고리즘을 작동시킬려면 메소드에 반드시 필요하다

*302p 5분 미스터리* _구현후 주석달기_

{{{
import java.util.*;

class V2Radiator        {
        V2Radiator (ArrayList list)     {
                for(int x=0; x<5; x++)
                        list.add(new SimUnit("V2Radiator"));//SimUnit 참고 "V2Radiator" 리스트 생성
        }
}

class V3Radiator extends V2Radiator     {
        V3Radiator (ArrayList lglist)   {
                super(lglist);
                for(int g=0; g<10; g++)
                        lglist.add(new SimUnit("V3Radiator"));
        } // SimUnit참고 "V3Radiator"리스트 생성
}

class RetentionBot      {
        RetentionBot(ArrayList rlist)   {
                rlist.add(new SimUnit("Retention"));
        } //SimUnit 참조 "Retention"리스트 생성
{

public class TestLifeSupportSim {
        public static void main(String[] args)  {
                ArrayList aList = new ArrayList();
                V2Radiator v2 = new V2Radiator(aList);
                V3Radiator v3 = new V3Radiator(aList);
                for(int z=0; z<20; z++)
                        RetentionBot ret = new RetentionBot(aList);
        }
}

class SimUnit   {
        String botType;
        int t=0;
        SimUnit(String type)    {
                botType = true;
        }
        int powerUse()  {
                if("Retention".equals(botType)) {
                        return 2;
                }       else    {
                        return 4;
                }
        }
        t++;
        System.out.println(t); //출력
}
}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드: 클래스의 인스턴스없이 메소드를 실행할 수 있는 메소드. 
 * 정적 메소드를 선언하는 방법: 앞에 static 추가
 * static final:상수
 * 널 레퍼런스:아무것도 가르치지 않는 것
 * 오토 박싱:원시값과 객체 사이의 경계를 없앤다 
 * 정적 임포트:정적 클래스, 정적 변수, enum 값 등을 사용할 때 활용해서 타이핑을 더 적게 해보자는 것. 

*339p Calendar* _구현후 주석달기_

{{{
public Class Calendar   {
        public static void main(String[] args)  {
                Calendar c = Calendar.getInstance();
                c.set(2012,12,18,12,40); //지금 시간으로
                long day1 = c.getTimeInMillis(); //시간을 밀리초로 
                day += 1000 * 60 * 60;
                c.setTimeInMillis(day1); // 한 시간에 해당하는 밀리초만큼의 시간을 더하고 시각을 갱신
                System.out.println("new hour " + c.get(c.HOUR_OF_DAY));
                c.add(c.DATE, 35); //35일을 더함
                System.out.println("add 35 days " + c.getTime());
                c.roll(c.DATE, 35); //35일 뒤로 넘김 , 달은 넘어가지 않음.
                System.out.println("roll 35 days " + c.getTime());
                c.set(c.DATE, 1); //날짜를 1로 설정
                System.out.println("set to 1" + c.getTime());
        }
}

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:인스턴스마다 하나씩있다
 * 지역 변수: 새로 만들 필요 없이 메모리 절약이 되고 편리함

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
class StaticSuper()     { //생성자 생성

        static  {
                System.out.println("super static block");
        }

        StaticSuper     {
                System.out.println(
                        "super constructor");
        }
}

public class StatifcTests extends StaticSuper   {
        static int rand;

        static  {
                rand = (int) (Math.random()*6); //랜덤 변수 생성
 System.out.println("static block" + rand);
        }

        StaticTests()   {
                System.out.println("constructor");
        }

        public static void main(String[] args)  {
                System.out.println("in main");
                StaticTest st = new StaticTests(); // st변수 생성
        }
}

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{
public class Test
{

        public static void main()
        {
                
        
        public void takeRisk() throws BadException
        {
                if(abandonAllHope)
                {
                        throw new BadException();
                }
        }
        
        public void crossFingers()
        {
                try
                {
                        anObject.takeRisk();//오류가 발생할 수 있는 부분                }
                catch(BadException ex)//오류가 뜨면 밑에 부분이 실행                {
                        System.out.println("Aaargh!");
                        ex.printStackTrace();
                }
        }
        
        }
}

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{
import javax.sound.midi.*;

public class MiniMiniMusicApp
{
        public static void main(String[] args)
        {
                MiniMiniMusicApp mini = new MiniMiniMusicApp();
                mini.play();
        }
        
        public void play()
        {
                try
                {
                        Sequencer player = MidiSystem.getSequencer();
                        player.open();//Sequencer를 열기
                        
                        Sequence seq = new Sequence(Sequence.PPQ, 4);
                        
                        //Sequence에 Track을 요청.
                        Track track = seq.createTrack();
                        //MidiEvent를 대입.
                        ShortMessage a = new ShortMessage();
                        a.setMessage(144, 1, 44, 100);
                        MidiEvent noteOn = new MidiEvent(a, 1);
                        track.add(noteOn);
                        
                        ShortMessage b = new ShortMessage();
                        b.setMessage(128, 1, 44, 100);
                        MidiEvent noteOff = new MidiEvent(b, 16);
                        track.add(noteOff);
                        
                 
                      
              
                        
                        player.setSequence(seq);                        
                        player.start();
                        
                }
                catch(Exception ex)
                {
                        ex.printStackTrace();
                        
                }
                
        }
}

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{
import javax.sound.midi.*;

public class MiniMusicCmdLine { 

        public static void main(String[]args){
                MiniMusicCmdLine mini = new MiniMusicCmdLine();//MiniMusicCmdLine생성
                if(args.length<2){
                        System.out.println("악기와 음 높이를 지정하는 인자를 입력하세요.");
                }else{
                        int instrument = Integer.parseInt(args[0]);
                        int note = Integer.parseInt(args[1]);
                        mini.play(instrument, note);//인자 전달, play 메소드를 호출
                }
        } 

         
        public void play (int instrument, int note){
                try{
                        Sequencer player = MidiSystem.getSequencer();
                        player.open();
                        Sequence seq = new Sequence(Sequence.PPQ, 4);
                        Track track = seq.createTrack();//Track 생성

                        MidiEvent event = null; //null값을 대입

                        ShortMessage first = new ShortMessage();
                        first.setMessage(192,1,instrument,0);
                        MidiEvent changeInstrument = new MidiEvent(first, 1);
                        track.add(changeInstrument);

                        ShortMessage a = new ShortMessage();
                        a.setMessage(144,1,note,100);
                        MidiEvent noteOn = new MidiEvent(a,1);
                        track.add(noteOn);

                        ShortMessage b = new ShortMessage();
                        a.setMessage(128,1,note,100);
                        MidiEvent noteOff = new MidiEvent(b,16);
                        track.add(noteOff);
                        player.setSequence(seq);
                        player.start();
                }catch(Exception ex){ex.printStackTrace();}
        } 
}
}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}