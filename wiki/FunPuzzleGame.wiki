= Introduction =

슬라이딩 그림 퍼즐 맞추기 게임입니다.


= Details =

[http://comp166-koreauniv.googlecode.com/files/메인메뉴.jpg] 메인메뉴 모습입니다.

[http://comp166-koreauniv.googlecode.com/files/게임방법.jpg] 메인메뉴에서 
HOW TO PLAY 버튼을 누를 경우 나오게 되는 화면입니다.

[http://comp166-koreauniv.googlecode.com/files/게임시작메뉴.jpg] 메인메뉴에서 GAME START 버튼을 누를 경우 나오게 되는 화면입니다. 난이도를 Easy, Normal, Hard, Very Hard 네 단계로 나누었습니다. 

[http://comp166-koreauniv.googlecode.com/files/이지모드시작전.jpg] 난이도를 Easy로 선택했을 때 뜨는 화면입니다.

[http://comp166-koreauniv.googlecode.com/files/이지모드시작후.jpg] 게임시작버튼을 클릭했을 때 퍼즐조각이 섞인 화면입니다.

[http://comp166-koreauniv.googlecode.com/files/노말모드시작전2.jpg] 난이도를 Normal로 선택했을 때 뜨는 화면입니다.

[http://comp166-koreauniv.googlecode.com/files/노말모드시작후.jpg] 게임시작 버튼을 클릭했을 때 퍼즐조각이 섞인 화면입니다.

[http://comp166-koreauniv.googlecode.com/files/하드모드시작전.jpg] 난이도를 Hard로 선택했을 때 뜨는 화면입니다.

[http://comp166-koreauniv.googlecode.com/files/하드모드시작후.jpg] 게임시작 버튼을 클릭했을 때 퍼즐조각이 섞인 화면입니다.

[http://comp166-koreauniv.googlecode.com/files/베리하드모드시작전.jpg] 난이도를 Very Hard로 선택했을 때 뜨는 화면입니다.

[http://comp166-koreauniv.googlecode.com/files/베리하드모드시작후.jpg] 게임시작 버튼을 클릭했을 때 퍼즐조각이 섞인 화면입니다.



= 코드출처 =

원본 소스 : [http://newworlds.tistory.com/1389]

게임코드는 그대로 사용했습니다. 하지만 원본 소스는 5X6의 그림 퍼즐만 제공하였지만 저는 이 소스를 응용하여 3X4, 4X5, 5X6, 6X7 총 4가지의 그림 퍼즐들을 만들어 난이도를 나눴습니다. 물론 사용된 사진도 바꿨습니다. 난이도에 맞춰 피츄, 피카츄, 라이츄,피츄와 피카츄와 라이츄가 같이 있는 사진들을 이용했습니다.

= 코드 =

네가지 난이도중 이지모드로 코드를 쓰겠습니다.

= CPocketPuzzle.java =

{{{
     package com.PocketPuzzle1;

import com.PocketPuzzle.R;

import android.app.Activity;
import android.os.Bundle;
import android.view.Window;

public class CPocketPuzzle extends Activity
{
     @Override    //상위클래스의 메서드를 재정의하는 것
     public void onCreate(Bundle savedInstanceState)
     {
          super.onCreate(savedInstanceState);
          
          requestWindowFeature(Window.FEATURE_NO_TITLE);         
          
          setContentView(R.layout.main);
     }
}
}}}

= CPpBtnExit.java = 

{{{
package com.PocketPuzzle1;

import com.PocketPuzzle.R;

import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;

public class CPpBtnExit
{

    private int _x;
    private int _y;

    private int _bx;
    private int _by;

    private int _width = 144;
    private int _height = 40;

    private Bitmap _btnStart_e;
    private Bitmap _btnStart_d;

    public CPpBtnExit(int x, int y, int bx, int by, Resources resources)
    {
        this._x = x;       //this는 객체 자기 자신을 부르는 명령어
        this._y = y;

        this._bx = bx;
        this._by = by;

        Bitmap _tmp = BitmapFactory.decodeResource(resources, R.drawable.btn_exit_e);
        _btnStart_e = Bitmap.createScaledBitmap(_tmp, _width, _height, false);

        _tmp = BitmapFactory.decodeResource(resources, R.drawable.btn_exit_d);
        _btnStart_d = Bitmap.createScaledBitmap(_tmp, _width, _height, false);
    }

    public void doMoveTo(int x, int y)
    {
        this._bx = x;
        this._by = y;
    }

    public void doDrawExit(Canvas canvas, Paint p, boolean enabled)
    {
        p.setAlpha(0xff);

        if (enabled)
        {
            canvas.drawBitmap(_btnStart_e, _bx + _x, _by + _y, p);
        }
        else
        {
            canvas.drawBitmap(_btnStart_d, _bx + _x, _by + _y, p);

        }
    }

    public boolean chkSelectin(float px, float py)
    {
        boolean bx = (_bx + _x <= px) && (_bx + _x + _width > px);
        boolean by = (_by + _y <= py) && (_by + _y + _height > py);

        return (bx && by);
    }
}
}}}