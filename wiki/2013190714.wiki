#summary 김명준의 실습 페이지입니다.짱짱

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{
public class BeerSong { //public의 BeerSong이라는 class선언
	public static void main (String[] args) { //main함수를 선언
		int beerNum = 99; //int형 beerNum을 선언하고 값을 99로 초기화
		String word = "bottles"; //String의 word를 선언하고 bottles로 초기화
		while(beerNum>0) { //beerNum이 0보다 클때동안
			if(beerNum==1) { //beernum이 1일때
			word = "bottle"; //word를 bottle로 초기화
				       }
		System.out.println(beerNum + " " + word + " of beer on the wall");//beerNum의값 word의 값 of beer on the wall을 출력하고 newline
		System.out.println(beerNum + " " + word + " of beer.");//beerNum의값 word의 값 of beer 출력하고 newline
		System.out.println("Take one down.");//Take one down을 출력하고 newline
		System.out.println("Pass it around.");//Pass it around를 출력하고 newline
		beerNum = beerNum - 1; //beerNum의 값을 -1
		if(beerNum>0) {
			//System.out.println(beerNum + " " +word + " of beer on the wall");
//while문에 있는 출력문과 같은내용이 중복된다.중복된 내용이 출력되므로 주석처리
			      } else {
			System.out.println("No more bottles of beer on the wall");//0보다 크지 않을경우 다음문장을 출력하고 newline
			      }//else문 끝
  			}//while 순환문 끝
 		}//main 클래스 끝
	}//클래스 끝

}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{
public class PhraseOMatic {
	public static void main (String [] args) {
	//세 종류의 단어 목록을 만듭니다. 적당히 필요한 단어를 추가해도 됩니다.
	String [] wordListOne = {"김명준은","임태완은","김석환은","박선우은","이영기는","이미현은","임태휘는","손낙원은","곽도윤은"};
	
	String [] wordListTwo = {"수업끝나고","오늘새벽에","곧","한시간후에"};
	
	String [] wordListThree = {"롤을합니다","공부를합니다","잠을잡니다","수업을듣습니다"};
	
	int oneLength = wordListOne.length;
	int twoLength = wordListTwo.length;
	int threeLength = wordListThree.length;
	
	int rand1 = (int) (Math.random() * oneLength);
	int rand2 = (int) (Math.random() * twoLength);
	int rand3 = (int) (Math.random() * threeLength);
	
	String phrase = wordListOne[rand1] + " " +
	wordListTwo[rand2] + " " + wordListThree[rand3];
	
        //구문을 출력합니다.
	System.out.println("지금 408에 있는" +phrase);
	}
} 
	

}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 컴파일러가 잡아내지 못해 다른유형의 데이터가 들어갈때 오류를 잡아냄,자바를 구동시킴,보안을 담당
 * 컴파일러:자바를 구동시킬때 있어서는 안될 데이터 유형 위반등의 오류를 막아줌,접근해서는 안되는 메소드의 보안을 담당

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A
class Exercise1b {
	public static void main(String[] args) {
		int x = 1;
			while(x<10) {
				if(x>3){
					System.out.println("big x");
				}
				x = x + 1;//x의 증가가 없으면 무한루프가 됨
			}
		}
	}
B
class exercise2b {// class 선언이 없어서 추가
	public static void main(String [] args) {
		int x = 5;
		while ( x > 1 ) {
		x=x-1;
		if ( x < 3 ) {
			System.out.println("small x");
			}
		}
	}
}// }를 하나 추가
C
class Exercise3b {
	public static void main(String [] args) {//main 메소드 추가
		int x = 5;
		while ( x > 1) {
			x=x-1;
			if(x<3) {
				System.out.println("small x");
			}
		}
	}
}//}하나 추가
}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수:객체에서 자신에 대하여 아는것,객체의 상태(테이터)를 나타낸다.
 * 메소드:객체에서 할 수 있는 일
 * 클래스:객체를 만들기 위한 용도,청사진이다.
 * 테스트용 클래스:새로운 클래스를 테스트하기 위한 클래스,main메소드가 들어가며 테스트할 클래스 유형의 객체를 만들어 메소드와 변수를 테스트한다.<클래스명>TestDrive같은 이름이 붙는다
 

*68p Television* _채워넣기_

 * 인스턴스 변수:channel,volume,power
 * 메소드:poweron(),poweroff(),volumeup(),volumedown(),recording(),channelup(),channeldown()


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{

}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수:
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{

}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?:
 * 문제가 된 부분은 어딘가요?:

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:
 * 게터와 세터:
 * 인스턴스 변수 vs 지역 변수:
 
*107p Dog* _실행_

{{{

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:
 * 다형성:

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}