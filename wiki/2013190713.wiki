#summary 이상미의 실습 페이지입니다.

''그냥 연습하면서 고치는거고 제출은 제시간에 했어요''



<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{

public class Beersong {
public static void main(String[] args)
{
	int beerNum = 99;
	String word = "bottles";
	
	while(beerNum > 0)
	{
		if(beerNum ==1)
		{
			word = "bottle";
		}
		
		System.out.println(beerNum + " " + word + " of beer on the wall");
		System.out.println(beerNum + " " + word + " of beer.");
		System.out.println("Take one down.");
		System.out.println("Pass it around.");
		beerNum = beerNum -1; //1병씩 감소
		
		if(beerNum ==1) //추가해야 나중에 1병째에 bottles가 나오는 오류를 막을 수 있다!
		{
			word = "bottle";
		}

		if(beerNum > 0)
		{
			System.out.println(beerNum + " " + word + " of beer on the wall");
		}
		else {
			System.out.println("No more bottles of beer on the wall"); //만약 맥주병이 없다면!
			
		}
		
	}
}
}


}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{


public class PhraseOMatic{

public static void main (String[] args)
{

	string [] wordListOne = {"sangmi's","professor's","cat's","munsuk's","minkyung's"};

	string [] wordListtwo = {"beautiful","ugly","nice","poor","good"};

	string [] wordListthree = {"eyes", "nose", "neck", "hands", "face"};


	int oneLength = wordListOne.length;
	int twoLength = wordListTwo.length;
	int threeLength = wordListThree.length;

	int rand1 = (int) (Math.random() * oneLength); //0~1사이의 랜덤한 숫자에 원래 길이를 곱한 후 인트를 취하면 0~원래길이-1 사이의 숫자가 랜덤하게 나온다.
	int rand2 = (int) (Math.random() * twoLength);
	int rand3 = (int) (Math.random() * threeLength);

	String phrase = wordListOne[rand1] + " " + wordListTwo[rand2] + " " + wordListThree[rand3];

//각각의 리스트에서 랜덤으로 선택되어 랜덤한 문장이 출력!

	System.out.println("What we need is a "+ phrase);

}
}

}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 프로그램 실행. 바이트코드가 만들어진 다음 바이트코드가 실행되기 전까지 다른 누군가가 그것을 건드리지 않았는지 확인함.
 * 컴파일러: 가상머신에서 텍스트 편집기로 만든 소스 코드를 해석하고 문법이 맞았는지를 확인함. 변수에 이상한 유형의 데이터를 저장할 수 없도록 함. 보호되는 메소드를 바꾸는 것을 막아줌.


*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A.

class Exercise1b{
public static void main(string [] args)
{
   int x = 1;
   while (x<10)
   {
     if ( x> 3){
     System.out.println("big x");
     }
     x = x+1; // 없다면 if문에 들어갈 수도 없고 무한루프에 빠짐.
   }
}
}

class Exercise1b{ //class가 존재해야 실행가능!
public static void main(String[] args )
{
   int x = 5;
   while(x>1){
      x = x -1 ; // 점점 작아진다.
      if(x<3){ // 3보다 작아지는 순간 small x 를 출력
         System.out.println("small x");
      }
   }
}
}

class Exercise1b{
public static void main(String [] args){ // class가 있으면 뭐해 main이 반드시 하나이상!
   int x = 5;
   while(x > 1){
      x = x - 1; // 점점감소
      if(x < 3){ // 3보다 작아지는 순간 small x 출력
         System.out.println("small x");
      }
   }
}
}


}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 아는 것. 클래스의 인스턴스 변수용으로 쓰기 위한 변수를 가질 수 있음. 객체.
 * 메소드: 하는 것.
 * 클래스: 객체를 만들기 위한 틀. 가상머신에 그 유형의 객체를 만드는 방법을 알려줌. 
 * 테스트용 클래스:
 

*68p Television* _채워넣기_

 * 인스턴스 변수: Light, Volume, Channel, Power, Size

 * 메소드: Light(), Volumeup(), Volumedown(), Poweron(), Poweroff()


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{

public class game {

	Player p1;
	Player p2;
	Player p3;
	Player p4;
	
	
	public void startGame(){
		p1 = new Player();
		p2 = new Player();
		p3 = new Player();
		p4 = new Player();
		
		int guessp1 = 0;
		int guessp2 = 0;
		int guessp3 = 0;
		int guessp4 = 0;
		
		boolean p1isRight = false;
		boolean p2isRight = false;
		boolean p3isRight = false;
		boolean p4isRight = false;

		int targetNumber = (int) (Math.random()*10);
		System.out.println("0이상 9이하의 숫자를 맞춰보세요.");
		
		while(true)
		{
			System.out.println("맞춰야할 숫자는 "+ targetNumber +"입니다.");
			
			p1.guess();
			p2.guess();
			p3.guess();
			p4.guess();
			
			guessp1 = p1.number;
			System.out.println("1번 선수가 찍은 숫자: "+ guessp1);
			
			guessp2 = p2.number;
			System.out.println("2번 선수가 찍은 숫자: "+ guessp2);
			
			guessp3 = p3.number;
			System.out.println("3번 선수가 찍은 숫자: "+ guessp3);

			guessp4 = p4.number;
			System.out.println("4번 선수가 찍은 숫자: "+ guessp4);

			if(guessp1 == targetNumber){
				p1isRight = true;
			}
			
			if(guessp2 == targetNumber){
				p2isRight = true;
			}
			
			if(guessp3 == targetNumber){
				p3isRight = true;
			}
	
			
			if(guessp4 == targetNumber){
				p4isRight = true;
			}
	
			if(p1isRight || p2isRight || p3isRight|| p4isRight){
				
				System.out.println("맞춘 선수가 있습니다.");
				System.out.println("1번 선수: "+ p1isRight);
				System.out.println("2번 선수: "+ p2isRight);
				System.out.println("3번 선수: "+ p3isRight);
				System.out.println("4번 선수: "+ p4isRight);
				System.out.println("게임 끝.");
				break; //게임이 끝났으므로 while 빠져나감
				
			} else{
				//맞춘 사람이 없으므로 계속함
				System.out.println("다시 시도해야 합니다.");
			}
			
		}
	}
}




}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A.

public class TapeDeck {

	boolean canRecord = false ; //boolean은 False 나 True를 저장하는 타입
	
	void playTape(){
		System.out.println("tape playing");
	}
	
	void recordTape(){
		System.out.println("tape recording");
	}
}

public class TapeDeckTestDrive {

	public static void main(String [] args){
		
		TapeDeck t=new TapeDeck(); //추가! t라는 TapeDeck이 생김

		t.canRecord = true;
		t.playTape();

		if(t.canRecord == true){
			t.recordTape();
		}
			
	}
	
}


B.

public class DVDPlayer {
	
	boolean canRecord = false;
	
	void recordDVD(){
		System.out.println("DVD recording");		
	}
	
	void playDVD(){
		System.out.println("DVD playing");
	} //playDVD 함수가 빠졌었다!
}

public class DVDPlayerTestDrive {

	public static void main(String [] args){
		
		DVDPlayer d = new DVDPlayer(); //DVDPlayer d를 생성
		d.canRecord=true;
		d.playDVD(); //
		
		if(d.canRecord == true){
			d.recordDVD();
		}
	}

}



}}}

= 03. 네 변수를 알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수:

원시 변수(primitive variable) : 정수, 부울, 부동소수점 수와 같은 기초적인 값이 들어감
객체 레퍼런스(object reference) : 객체에 대한 레퍼런스

 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{

public class Dog {

	String name;
	public static void main(String[] args){// Dog객체 만든다
		
		
	Dog[] myDogs = new Dog[10];
	
	for(int i=0;i<myDogs.length;i++)
	{
		myDogs[i]= new Dog();
		myDogs[i].name="Dog"+(i+1);
	}
	
	System.out.println("아빠왔다!!!");//주인이 왔음
	

	int x=0;
	while(x<myDogs.length){ //랜덤으로 Dog들이 행동함
		int rand=(int)(Math.random()*3);
		if(rand==0){
			myDogs[x].bark();
		}
		else if(rand==1)
		{
			myDogs[x].eat();
		}
		else
		{
			myDogs[x].chaseCat();
		}
		x++;
	}
	 System.out.println("이런, 개판이군!");
	}
	
	public void bark(){
		System.out.println(name + "이(가) 왈!하고 짖습니다.");
	}
	public void eat(){
		System.out.println(name + "이(가) 밥을 달라고 합니다..");
	}
	public void chaseCat(){
		System.out.println(name + "이(가) 고양이를 쫒습니다.");
	}
	
}


cf.------------------------------------------class 두 개 선언으로도 가능


class CUTEDog {
		public static void main(String[] args){

		 Dog[] myDogs = new Dog[10];

		 for(int i=0;i<10;i++)
		 {
		  myDogs[i]=new Dog();
		  myDogs[i].name="Dog"+(i+1); //i번째 Dog
		 }

		System.out.println("아빠왔다!!!!"); //주인이 돌아왔군요ㅋㅋ

		int rand_behave=0; //행동을 무작위로 해주기 위한 변수선언

		 for(int i=0;i<10;i++)
		 {
		  rand_behave = (int) (Math.random() * 2);
		  if(rand_behave==0)
		   myDogs[i].bark();
		  else{
		   myDogs[i].eat();
		  }
		 }
		}

}

class Dog {//Dog 객체 생성시 name을 갖고 bark, eat함수가 있다.
		String name;
		
		public void bark(){
		 System.out.println(name + "이(가) 왈!하고 짖습니다.");
		}
		public void eat(){
		 System.out.println(name + "이(가) 밥달라고 합니다.");
		}
}

==실행*결과(1)==

아빠왔다!!!
Dog1이(가) 고양이를 쫒습니다.
Dog2이(가) 고양이를 쫒습니다.
Dog3이(가) 밥을 달라고 합니다..
Dog4이(가) 고양이를 쫒습니다.
Dog5이(가) 밥을 달라고 합니다..
Dog6이(가) 왈!하고 짖습니다.
Dog7이(가) 고양이를 쫒습니다.
Dog8이(가) 왈!하고 짖습니다.
Dog9이(가) 고양이를 쫒습니다.
Dog10이(가) 고양이를 쫒습니다.
이런, 개판이군!

}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

public class Books {

	String title;
	String author;
}


public class BooksTestDrive {

	public static void main(String [] args){

		Books [] myBooks = new Books[3];//myBooks라는 이름의 Book 배열을 세개 선언

		for(int i=0;i<3;i++)//아직 Book함수를 선언해주지 않았다. 각각의 Book마다!
		{
			myBooks[i]=new Books();
		}
		

		myBooks[0].title="The Grapes of Java";
		myBooks[1].title="The Java Gatsby";
		myBooks[2].title="The Java Cookbook";//각각의 책의 이
		myBooks[0].author = "bob";
		myBooks[1].author = "sue";
		myBooks[2].author = "ian";//각각의 책의 작가

		int x=0;
		while(x<3)
		{
			System.out.print(myBooks[x].title);
			System.out.print(" by ");
			System.out.println(myBooks[x].author);//말하고 줄바꿈
			x++;
		}
		
	}
}

==실행*결과==

The Grapes of Java by bob
The Java Gatsby by sue
The Java Cookbook by ian


}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?: Bob
 * 문제가 된 부분은 어딘가요?: Tony의 코드에서 Contact refc는 계속 갱신되지만 이전의 기록이 사라진다.

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화: Encapsulation
특정 데이터를 public이 아닌 private를 사용함.
다른 코드에서 특정 데이터에 직접 접근할 수 없고 세터 메소드로 접근하도록 하는 것.

 * 게터와 세터:
게터(getter), 액세서(accessor)

가져오기로 되어있는 값을 리턴 값 형태로 받아옴.

세터(setter)

설정할 값을 인자로 받아서 인스턴스 변수를 그 값으로 설정하도록 함.


* 인스턴스 변수 vs 지역 변수:

 
*107p Dog* _실행_

{{{

public class Dog {

	int size;
	String name;
	
	void bark(){//크기에 따라 울음소리가 다름
		if( size > 60 ){
			System.out.println("으르르를을으응응 컹!컹!");
		}else if(size > 14){
			System.out.println("컹!컹! 월! 월!");
		}else{
			System.out.println("깨갱ㅇㅇ왈 왈!");
		}
			//한글을 사랑합시당 ㅎㅎ
			
	}
}


public class DogTestDrive {

	public static void main(String[] args){
		Dog one = new Dog();
		one.size = 70;
		Dog two = new Dog();
		two.size = 8;
		Dog three = new Dog();
		three.size = 35;
		
		one.bark(); //Dog안의 bark함수에서 size에 따라 울음소리가 다르게 필터링되겠지?
		two.bark();
		three.bark();
	}
}

==실행*결과==

으르르를을으응응 컹!컹!
깨갱ㅇㅇ왈 왈!
컹!컹! 월! 월!

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
[A]

public class XCopy {

	public static void main(String [] args){
		
		int orig = 42;
		XCopy x = new XCopy();
		
		int y = x.go(orig);//x의 go함수에 orig=42를 넣는다!

		System.out.println(orig+" " + y); //orig의 값은 변하지 않는다. go함수를 거친 후 리턴값을 받은 y는 orig*2 이다!
	}
	
	int go(int arg){
		arg = arg * 2; //들어온 수를 2배해서 리턴한다
		
		return arg;
	}

}

==실행 결과==

42 84
}}}
{{{
[B]


public class Clock {
	String time;
	
	void setTime(String t){
		time = t;
	}
	
	String getTime(){ // return하는 time이 문자열이므로 void가 아닌 String
		return time;
	}
}


public class ClockTestDrive {

	public static void main(String [] args){
		Clock c = new Clock();
		
		c.setTime("1245");
		String tod = c.getTime(); // c의 time을 리턴하여 tod에 넣는다.
		System.out.println("time: "+tod);//그냥 바로 c.getTime();써도 됐을텐데
	}
}

==실행 결과==
time: 1245
}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
** 메소드 코딩을 시작하기 전에 그 메소드를 테스트하기 위한 보조 코드를 미리 만드는 것. 
** 조금씩 자주 발표한다.
** 사이클을 반복해서 돌리면서 개발한다.
** 스펙에 없는 것은 절대 집어넣지 않는다.
** 모든 일을 단순하게 처리한다.

*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{
public class SimpleDotComTestDrive {

	public static void main(String[] args){
		int numOfGuesses = 0;
		
		GameHelper helper = new GameHelper (); //public class GameHelper를 helper로 선언
		
		SimpleDotCom theDotCom = new SimpleDotCom();//위와같이 theDotCom 선언
		int randomNum = (int) (Math.random()*5); //Math는 0~1사이에서 랜덤으로 수를 발생하므로 *5한 것에 int를 하면 0~4 사이가 나온다.
		
		int[] locations = {randomNum, randomNum+1, randomNum+2};// 정답의 위치를 세 개 설정하는데 위에서 나온 randomNum과 그보다 1, 2 더 큰 수를 위치로 한다. 즉 0~6 사이의 범위에서 나올 것이다.
		
		theDotCom.setLocationCells(locations);//위에서 선언한 SimpleDotCom의 setLocationCells함수에 locations 배열들을 넣는다.
 
		boolean isAlive = true; //boolean이므로 true는 1이다.
		
		while(isAlive == true){//일단 처음에는 무조건 들어감
			String guess = helper.getUserInput("enter a number");//숫자를 입력받아서 guess에 넣음
			String result = theDotCom.checkYourself(guess);// 입력받은 숫자가 맞느냐 아니냐에 따라 string이 다르다.
			numOfGuesses++;//추측한 횟수 증가
			if(result.equals("kill")){
				isAlive = false;
				System.out.println(numOfGuesses + " guesses");//마지막에 총 몇번 추리했는지 출력해준다.
			}//if문 끝
		}//while문 끝
	}//main문 
}}}

{{{
public class SimpleDotCom {
    
    int [] locationCells;
    int numOfHits = 0;
    
    public void setLocationCells (int[] locs) {
            
            locationCells = locs; //랜덤으로 발생시킨 위치정보가 
    }

    public String checkYourself (String stringGuess) {
            
            int guess = Integer.parseInt(stringGuess);
            String result = "miss"; //초기설정은 miss로하고 맞추면 hit 또는 kill
            for(int i=0 ; i<locationCells.length ; i++) {
                    if(guess == locationCells[i]) {
                            result = "hit"; //맞추면 일단 hit이다.
                            numOfHits++; //총 맞춘회수의 증가
                            break;
                            
                    }
            }
            
            if(numOfHits == locationCells.length) {
                    result = "kill"; //총 맞춘 개수가 정답의 개수와 같다면 kill을 리턴한다.
            }
            System.out.println(result);//result 출력
                    return result;
    }
}

}}}

{{{
//BufferedReader을 아직 잘모르겠어서 주석은 잠시 보류하겠습니다.

import java.io.*;


public class GameHelper {
	public String getUserInput(String prompt){
		String inputLine = null;
		System.out.print(prompt + " ");
		try{
			BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
			inputLine = is.readLine();
			if(inputLine.length() == 0) return null;
		} catch (IOException e){
			System.out.println("IOException: "+ e);
		}
		return inputLine;
	}

}

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{ 

//수정중입니다. 나중에 이어서 하겠습니다.

public class SimpleDotCom {

	int [] locationCells;
	int numOfHits = 0;
	int [] hitCells = {0,0,0}; // 원소가 1이고 원소의 개수가 3개인 hitCells 배열 선언
	
	public void setLocationCells(int[] locs){
		locationCells = locs;
	}
	
	public String checkYourself(String stringGuess){
		int guess = Integer.parseInt(stringGuess);
		String result = "miss";
		
		for(int i=0 ; i<locationCells.length; i++){
			if(guess == locationCells[i]){
				result = "hit";
				hitCells[]= 1;
				numOfHits ++;
				break;
			}
		}
		
		if(numOfHits == locationCells.length){
			result = "kill";
		}
		System.out.println(result);
			return result;
	}
}


}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

public class SimpleDotCom {

	int [] locationCells;
	int numOfHits = 0;
	
	public void setLocationCells(int[] locs){
		locationCells = locs;
	}
	
	public String checkYourself(String stringGuess){
		int guess = Integer.parseInt(stringGuess);
		String result = "miss";
		
		for(int i=0 ; i<locationCells.length; i++){
			if(guess == locationCells[i]){
				result = "hit";
				numOfHits ++;
				locationCells[i]=-1; //맞추고 -1 대입
				break;
			}
		}
		
		if(numOfHits == locationCells.length){
			result = "kill";
		}
		System.out.println(result);
			return result;
	}
}

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

//수정중입니다. 나중에 이어서 하겠습니다.

public class SimpleDotCom {

	ArrayList [] locationList;
	int numOfHits = 0;
	
	public void setLocationCells(int[] locs){
		locationCells = locs;
	}
	
	public String checkYourself(String stringGuess){
		int guess = Integer.parseInt(stringGuess);
		String result = "miss";
		
		for(int i=0 ; i< locationList.length; i++){
			if(guess == locationList[i]){
				result = "hit";
				numOfHits ++;
				locationList.remove[i];
				break;
			}
		}
		
		if(numOfHits == 3){
			result = "kill";
		}
		System.out.println(result);
			return result;
	}
}

}}}


*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

import java.util.ArrayList;

public class DotCom {

	private ArrayList<String> locationCells;
	private String name;

	public void setLocationCells(ArrayList loc) {
		locationCells = loc;
	}

	public void setName(String n) {
		name = n;
	}

	public String checkYourself(String userInput) {
		String status = "miss";
		int index = locationCells.indexOf(userInput);
		if (index >= 0) {
			locationCells.remove(index);

			if(locationCells.isEmpty());
			status = "kill";
			System.out.println("Ouch! You sunk "+name);
		}else{
			status = "hit";
		}
		return status;
	}
}

}}}
{{{

import java.util.ArrayList;

public class DotComBust {

	private GameHelper helper = new GameHelper();
	private ArrayList<DotCom> dotComsList = new ArrayList<DotCom>();
	private int numOfGuesses = 0;

	private void setUpGame() {
		DotCom one = new DotCom();
		one.setName("Pets.com");

		DotCom two = new DotCom();
		two.setName("eToys.com");

		DotCom three = new DotCom();
		three.setName("Go2.com");
		dotComsList.add(one);
		dotComsList.add(two);
		dotComsList.add(three);

		System.out.println("Your Goal is to sink three dot coms.");
		System.out.println("Pets.com, eToys.com, Go2.com");
		System.out
				.println("Try to sink them all in the fewest number of guesses");

		for (DotCom dotComToSet : dotComsList) {// 목록에 있는 각 DotCom에 대해 반복한다
			ArrayList<String> newLocation = helper.placeDotCom(3);

			dotComToSet.setLocationCells(newLocation);

		}
	}

	private void startPlaying() {
		while (!dotComsList.isEmpty()) {

			String userGuess = helper.getUserInput("Enter a guess");
			checkUserGuess(userGuess);
		}
		finishGame();
	}

	private void checkUserGuess(String useGuess) {
		numOfGuesses++;

		String result = "miss";

		for (DotCom dotComToTest : dotComsList) {
			result = dotComToTest.checkYourself(useGuess);
			if (result.equals("hit")) {
				break;
			}
			if (result.equals("kill")) {
				dotComsList.remove(dotComToTest);
				break;
			}
		}
		System.out.println(result);
	}
	
	
	private void finishGame(){
		System.out.println("All Dot Coms are dead! Ur stock is now worthless");
		if(numOfGuesses <= 18){
			System.out.println("It only took you "+ numOfGuesses +"guesses.");
			System.out.println("You got out before your options sank");
		}else {
			System.out.println("Took you long enough. "+numOfGuesses +" guesses.");
			System.out.println("Fish are dancing with your options");
		}
	}
	
	public static void main(String[] args){
		DotComBust game = new DotComBust();
		game.setUpGame();
		game.startPlaying();
	}
}


}}}
{{{

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

public class GameHelper {

	private static final String alphabet = "abcdefg";
	private int gridLength = 7;
	private int gridSize = 49;
	private int[] grid = new int[gridSize];
	private int comCount = 0;

	public String getUserInput(String prompt) {
		String inputLine = null;
		System.out.print(prompt + " ");
		try {
			BufferedReader is = new BufferedReader(new InputStreamReader(
					System.in));
			inputLine = is.readLine();
			if (inputLine.length() == 0)
				return null;
		} catch (IOException e) {
			System.out.println("OException: " + e);
		}
		return inputLine.toLowerCase();
	}

	public ArrayList <String> placeDotCom(int comSize) {
		ArrayList<String> alphaCells = new ArrayList<String>();
		String[] alphacoords = new String[comSize];
		String temp = null;
		int[] coords = new int[comSize];
		int attempts = 0;
		boolean success = false;
		int location = 0;

		comCount++;
		int incr = 1;
		if ((comCount % 2) == 1) {
			incr = gridLength;
		}
		while (!success & attempts++ < 200) {
			location = (int) (Math.random() * gridSize);
			int x = 0;
			success = true;
			while (success && x < comSize) {
				if (grid[location] == 0) {
					coords[x++] = location;
					if (location >= gridSize) {
						success = false;
					}
					if (x > 0 & (location % gridLength == 0)) {
						success = false;
					}
				} else {
					success = false;
				}
			}
		}
		
		int x=0;
		int row=0;
		int column=0;
		
		while(x<comSize){
			grid[coords[x]]=1;
			row = (int)(coords[x]/gridLength);
			column=coords[x]%gridLength;
			temp = String.valueOf(alphabet.charAt(column));
			
			alphaCells.add(temp.concat(Integer.toString(row)));
			x++;
		}

		return alphaCells;
	}
}


}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속: 하위 클래스가 상위 클래스의 인자를 물려받는 것. 
 * 다형성: 상위 클래스 형식이 들어갈 수 있는 모든 자리에 해당 상위 클래스와 임의의 하위 클래스에 속하는 객체를 마음대로 사용가능함

*208p 클래스 계층 구조* _클래스로 구현_

{{{

Feline - Lion, Tiger, Cat
Hippo
Canine - Wolf, Dog

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드: 하위클래스에서 메소드의 역할을 변경하거나 확장할 필요가 있을 때 상속받은 메소드를 새로 정의하는 것
 * 오버로딩: 이름이 같고 인자목록이 다른 메소드 두개를 만드는 것

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

public class MonsterTestDrive {

	public static void main(String [] args){
		Monster [] ma = new Monster[3];
		ma[0] = new Vampire();
		ma[1] = new Dragon();
		ma[2] = new Monster();
		
		for(int x=0; x<3 ; x++)
		{
			ma[2].frighten(x);
		}
	}
}

class Monster {

	boolean frighten(int d){
		System.out.println("aaragh");
		return true;
	}
}

class Vampire extends Monster{
	{

		boolean frighten(int x){
			System.out.println("a bite?");
			return false;
		}
	}

}




class Dragon extends Monster{
	boolean frighten(int degree){
		System.out.println("breath fire");
		return true;
	}
}

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스: 100% 추상클래스
 * 다형성: 하나의 이름이 상황에 따라 다른 용도로 쓰임
 * 추상 클래스: 인스턴스를 만들 수 없는 클래스, 반드시 확장해야 함
 * 추상 메소드: 반드시 오버라이드해야하는 메소드. 추상 클래스의 행동 가운데 일부(또는 전부)에 대해 더 구체적인 하위클래스에서 구현되지 않는 이상 전혀 의미가 없다는 결정을 내릴 수 있다.
 * 다중 상속: 상위클래스를 두 개 사용함.

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수: 객체가 사는 곳(힙)
 * 스택에서의 변수: 메소드 호출과 지역 변수가 살아가는 곳(스택)
 * 생성자: 어떤 클래스 유형에 대해 new키워드를 사용했을 때 실행되는 코드가 들어있다.
리턴 유형이 없고 생성자명은 반드시 클래스명과 같아야 한다.
 * 널 레퍼런스: 아무것도 가리키지 않는 레퍼런스
 
*298p 집중토론* _요약_

 * 인스턴스 변수: 객체의 상태를 나타내고 힙에 저장된다.
 * 지역 변수: 메소드를 실행시키기 위한 변수로 스택에 저장된다.

*302p 5분 미스터리* _구현후 주석달기_

{{{

import java.util.*;


class V2Radiator
{
        V2Radiator(ArrayList<SimUnit> list)
        {
                for(int x = 5; x < 5 ; x++) 
                {
                        list.add(new SimUnit("V2Radiator"));
//받아온 list에 SimUnit을 5번 추가하고 V2Radiator를 줍니다.
                }
        }
}

class V3Radiator extends V2Radiator
{
        V3Radiator(ArrayList<SimUnit> lglist)//lglist를 받아옵니다.
        {
//                super(lglist); 
//이부분에서 불필요하게 5개의 SimUnit이 생성되므로 필요 없다!

                for(int g = 0; g < 10 ; g++)
                {
                        lglist.add(new SimUnit("V3Radiator"));
//lglist에 SimUnit을 10번 추가하고 V3Radiator를 준다
                }
        }
}

class RetentionBot
{
        RetentionBot(ArrayList<SimUnit> rlist)
        {
                rlist.add(new SimUnit("Rention"));
        }
}

public class TestLifeSupportSim 
{
        public static void main(String[] args)
        {
                ArrayList<SimUnit> aList = new ArrayList<SimUnit>();
//aList의 ArrayList생성
                V2Radiator v2 = new V2Radiator(aList);//v2객체 생성
                V3Radiator v3 = new V3Radiator(aList);//v3객체 생성
                for(int z = 0 ; z < 20 ; z++)
                {
                        RetentionBot ret = new RetentionBot(aList); 
//ret객체 생성
                }
        }
}

class SimUnit
{
        String botType;
        SimUnit(String type)
        {
                botType = type;
        }
        int powerUse()
        {
                if("Retention".equals(botType))
                {
                        return 2;                       
                }
                else
                {
                        return 4;
                }
        }
}



}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드: 클래스의 인스턴스없이 메소드를 실행할 수 있다. 인스턴스 변수에 따라 행동이 달라지지 않기 때문에 인스턴스나 객체가필요하지 않다. 클래스만 있어도 된다.

 * 정적 메소드를 선언하는 방법: method에 static을 붙임
 * static final: static final 로 선언된 변수는 상수이다. 초기화되고나면 절대 그 값을 바꿀 수 없다. static으로 선언되어 있기때문에 인스턴스를 만들지 않아도 된다. 
 * 널 레퍼런스: 레퍼런스에 NULL을 대입하며 아무것도 가리키지 않음.
 * 오토 박싱: 이전에는 원시변수와 객체 레퍼선스가 엄격하게 구분되어 있었기에 절대로 서로 맞바꿔 사용이 불가능했지만 자바 5.0부터 도입된 오토박싱을 통하여 이러한 과정을 손쉽게 할수 있게 되었다.
 * 정적 임포트: 자바 5.0에서 도입된 개념으로 모든 코드를 다 쓰지 않고 짧게 쓸수 있다. 하지만 가독성이 떨어질수 있다.


*339p Calendar* _구현후 주석달기_

{{{

import java.util.*;
public class MakeCalendar
{
        public static void main(String[] args)
        {
                Calendar c = Calendar.getInstance();
                c.set(2004,0,7,15,40);//시각을 2004년 1월 7일 15:40 으로 설정
                long day1 = c.getTimeInMillis();//1970년 1월1일부터 경과한 시간을 밀리초 단위로 표현한 값을 리턴
                day1 += 1000 * 60 * 60;
                c.setTimeInMillis(day1);//한 시간에 해당하는 밀리초 만큼의 시간을 더하고 시각을 갱신
                System.out.println("new hour" + c.get(c.HOUR_OF_DAY));
                c.add(c.DATE, 35);//35일을 더함
                System.out.println("add 35 days " + c.getTime());
                c.roll(c.DATE, 35);//35일 뒤로 넘김
                System.out.println("roll 35 days " + c.getTime());
                c.set(c.DATE, 1);//날짜를 1로 설정
                System.out.println("set to 1 " + c.getTime());
                
        
        }
}



}}}

*342p 집중토론* _요약_

 * 인스턴스 변수: 정적 변수는 상수에 불가, 특변한 경우에만 많이 사용, 디버깅할때에만 특별한경우로 사용, 객체지향적이 아님, 전역변수랑 비슷함, 옛 관습에 익숙한 사람 들만 사용함, 가끔 익숙하긴 하지만 여전히 옛습관의 폐해, 프로시저 위주


 * 지역 변수: API에서 많이 사용, 상수만 사용하는 클래스도 존재 특별한 경우라도 중요함 정적변수가 더 효율적, 전역변수가 아님, 클래스 안에서 존재,필수적인것도 있음



*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

class StaticSuper{

        static { 
        System.out.println("super static block");
        }

        StaticSuper() { //생성자
//Class와 이름이 같다
        System.out.println("super constructor");
        }
}

public class StaticTests extends StaticSuper {

        static int rand; 

        static { 
        rand=(int_ (Math.random()*6);
        System.out.println("static block " + rand);
        }

        StaticTests(){ 
        System.out.println("constructor");
        {

        public static void main(String [] args) {
        System.out.println("in main");
        StaticTests st = new StaticTests ();//객체 생성
        }
}



}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

public void takeRisk() throws BadException
        {
                if(abandonAllHope)//만약 모든 희망을 버리면으로 오류가 생기는 부분
                {
                        throw new BadException();//BadException이라는 오류를 throw합니다.
                }
        }
        
 public void crossFingers()
        {
                try
                {
                        anObject.takeRisk();//오류가 발생할수 있는 부분
                }
                catch(BadException ex)//오류가 뜨면 실행
                {
                        System.out.println("Aaargh!");
                        ex.printStackTrace();
//예외 상황을 해결할수 없을때 모든 예외 객체에서 물려받는 printStackTrace()메소드를 써서 printStackTrace
                }
        
        
        }
}



}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_
(이부분은 제대로 안나간다하셨던거 같아서 하긴했는데 제대로 못했어요)
{{{

import javax.sound.midi.*;

public class MiniMiniMusicApp {
 
        public static void main(String[] args) {
                MiniMiniMusicApp mini = new MiniMiniMusicApp();
                mini.play();
        }

        
        public void play() {
                try{
                        Sequencer player = MidiSystem.getSequencer();
                        player.open();
                        Sequence seq = new Sequence(Sequence.PPQ,4);
                        Track track = seq.createTrack();

                        ShortMessage a = new ShortMessage();
                        a.setMessage(144, 1, 44, 100);
                        MidiEvent noteon = new MidiEvent(a,1);
                        track.add(noteon);
                        
                        ShortMessage b = new ShortMessage();
                        b.setMessage(128,1,44,100);
                        MidiEvent noteOff = new MidiEvent(b,16);

                        player.setSequence(seq);
                        player.start();
                } catch ( Exception ex) {
                        ex.printStackTrace();
                }
        }
}


}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

import javax.sound.midi.*;


public class MiniMusicCmdLine
{
        public static void main(String[] args)
        {
                MiniMusicCmdLine mini = new MiniMusicCmdLine();
                
                if(args.length < 2 )
                        System.out.println("악기와 음 높이를 지정하는 인자를 입력하세요.");
                else
                {
                        int instrument = Integer.parseInt(args[0]);
                        int note = Integer.parseInt(args[1]);
                        mini.play(instrument,note);
                        
                }
        }
        
        public void play(int instrument, int note)
        {
                try
                {
                        Sequencer player = MidiSystem.getSequencer();
                        player.open();
                        Sequence seq = new Sequence(Sequence.PPQ,4);
                        Track track = seq.createTrack();
                        
                        MidiEvent event = null;
                        
                        ShortMessage first = new ShortMessage();
            first.setMessage(192,1,instrument,0);
            MidiEvent changeInstrument = new MidiEvent(first, 1);
            track.add(changeInstrument);

            ShortMessage a = new ShortMessage();
            a.setMessage(144,1,note,100);
            MidiEvent noteOn = new MidiEvent(a,1);
            track.add(noteOn);

            ShortMessage b = new ShortMessage();
            a.setMessage(128,1,note,100);
            MidiEvent noteOff = new MidiEvent(b,16);
            track.add(noteOff);
            player.setSequence(seq);
            player.start();
                }
                
                catch(Exception ex)
                {
                        ex.printStackTrace();
                }
        }
}


}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}