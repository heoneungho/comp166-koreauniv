#summary 수업중 실습하는 내용을 올리게 되는 실습페이지입니다. 페이지의 내용은 각 학생에 의해서 관리됩니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{

public class BeerSong
{
   public static void main(String[] args)
   {
      int beerNum = 99;
      String word = "bottles";
 
      while(beerNum >0)
      {
         System.out.println(beerNum + "" + word + "of beer on the wall");
         System.out.println(beerNum + "" + word + "of beer.");
         System.out.println("Take one down.");
         System.out.println("Pass it around");
         beerNum = beerNum -1; //beerNum value decreased//

         if(beerNum == 1)
         {
            word = "bottle";
         } // single value//

         if(beerNum >0){
             System.out.println(beerNum + "" + word + "of beer on the wall");
         }else{
             System.out.println("No more bottles of beer on the wall");
         }
      }
   }
}

}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{
public class PhraseOMatic
{
   public static void main(String[] args)
   {
      String[] wordListOne = {"absolute", "smart", "gorgeous"};
      String[] wordListTwo = {"neutral", "regular", "ordinary"};
      String[] wordListThree = {"hideous", "ugly", "low quality"};

      int oneLength = wordListOne.length;
      int twoLength = wordListTwo.length;
      int threeLength = wordListThree.length;

      int rand1 = (int)(Math.random()*oneLength);
      int rand2 = (int)(Math.random()*twoLength);
      int rand3 = (int)(Math.random()*threeLength);

      String phrase = wordListOne[rand1] + "" + wordListTwo[rand2] + "" + wordListThree[rand3];

      System.out.println("What we need is a" + phrase);
   }
}
}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 
 * 컴파일러:

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수:객체에서 자신에 대해 아는것, 객체의 상태(데이터)
 * 메소드:객체에서 할 수 있는 일
 * 클래스:객체를 만들기 위한 청사진(인스턴트변수와 클래스는 클래스에 소속)
 * 테스트용 클래스:새로운 클래스 유형의 객체에 들어있는 메소드와 변수를 테스트해보기 위해 만드는 것
 

*68p Television* _채워넣기_

 * 인스턴스 변수:
 * 메소드:


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{

public class GuessGame{
   Player p1;
   Player p2;
   Player p3;
   Player p4;

   public void startGame(){
      p1 = new Player();
      p2 = new Player();
      p3 = new Player();
      p4 = new Player();

      int guessp1=0;
      int guessp2=0;
      int guessp3=0;
      int guessp4=0;

      boolean p1isRight = false;
      boolean p2isRight = false;
      boolean p3isRight = false;
      boolean p4isRight = false;

      int targetNumber = (int)(Math.random()*10);
      System.out.println("type in a number from 0 to 9");
 
      while(true){
         System.out.println("the number is"+ targetNumber);

      p1.guess();
      p2.guess();
      p3.guess();
      p4.guess();

      guessp1 = p1.number;
      System.out.println("the number player 1 put:" + guessp1);

      guessp2 = p2.number;
      System.out.println("the number player 2 put:" + guessp2);

      guessp3 = p3.number;
      System.out.println("the number player 3 put:" + guessp3);

      guessp4 = p4.number;
      System.out.println("the number player 4 put:" + guessp4);

      if(guessp1 == targetNumber){
         p1isRight = true;
      }
      if(guessp2 == targetNumber){
         p2isRight = true;
      }
      if(guessp3 == targetNumber){
         p3isRight = true;
      }
      if(guessp4 == targetNumber){
         p4isRight = true;
      }

      if(p1isRight || p2isRight || p3isRight || p4isRight)
      {
         System.out.println("there is a player that got the answer right");
         System.out.println("1st player:" + p1isRight);
         System.out.println("2nd player:" + p2isRight);
         System.out.println("3rd player:" + p3isRight);
         System.out.println("4th player:" + p4isRight);
         System.out.println("game finished");

         break;
      }else{
         System.out.println("must try again");
      }
   }
}

}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수:
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{

}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?: 
 * 문제가 된 부분은 어딘가요?:

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:
데이터가 노출(점 연산자를 써서 접근 가능)되지 않도록 모든 인스턴스 변수에 대해 세터 메소드를 만드는것; 인스턴스 변수를 private로 지정하고 접근 제어를 위해 public으로 지정된 게터와 세터를 만들면 된다.
 * 게터와 세터:
게터- 인스턴트 변수를 리턴값 형태로 받아오기 위해 쓰임
세터- 세터가 설정할 값을 인자로 받아서 인스턴스 변수를 그 값으로 설정하기 위한 용도로 쓰임
 * 인스턴스 변수 vs 지역 변수:
인스턴스 변수- 클래스 내에서 선언됨
지역 변수 - 메소드 내에서 선언됨, 사용하기 전에 반드시 초기화

 
*107p Dog* _실행_

{{{
class Dog
{
        int size;
        String name;

        void bark()
        {
                if(size > 60)
                {
                        System.out.println("Wooof Wooof!");
                }
                else if(size > 14)
                {
                        System.out.println("Ruff Ruff!");
                }
                else
                {
                        System.out.println("Yip Yip!");
                }
        }
}


class DogTestDrive
{
        public static void main(String[] args)
        {
                Dog one = new Dog();
                one.size = 70;
                Dog two = new Dog();
                two.size = 8;
                Dog three = new Dog();
                three.size = 35;

                one.bark();
                two.bark();
                three.bark();
        }
}


}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A는 무사히 컴파일 된다. 이를 구현하면

class Xcopy
{
    public static void main(String [] args)
    {
          int orig = 42;
          Xcopy x = new XCopy();
          int y = x.go(orig); // 밑의 함수 go에서 y = 2* orig//
          System.out.println(orig + "" + y); // orig = 42이므로 출력값은 orig + y = 126이다.//
    }

    int go(int arg)
    {
          arg = arg * 2;
          return arg;
    }
}
따라서 출력값은 42 + 84 = 126이다.

반면 B는 컴파일 실행이 잘 이루어지지 않는데,
구현해보면

class Clock
{
    String time;
    
    void setTime(String t)
    {
        time = t;
    }

    void getTime() //void 형태로 리턴값을 얻을 수 없으므로 String으로 표현해야 한다.//
    {
        return time;
    }
}
class ClockTestDrive
{
   public static void main(String [] args)
   {
       Clock c = new Clock();

       c.setTime("1245");
       String tod = c.getTime();
       System.out.println("time:" + tod);
   }
}
void를 string으로 바꿔 구현해보면 출력값은 getTime에서 입력한 tod값이 된다.
}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
메소드를 테스트하기 전에 테스트할 테스트코드를 먼저 만들어 놓는 것
장점: 막판에 변경되는 일이 있어도 고객이 원하는 것을 고객이 원하는 기한에 맞춰서 제공할 수 있다.
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{


}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:
 * 다형성:

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}