#summary 신우리의 실습 페이지입니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{

public class beer {
        public static void main (String[] args) {
                int beerNum=99;
                String word="bottles"; //복수형

        while (beerNum>0) {

        if(beerNum==1) {
                word="bottle"; //단수형(한 병인 경우)
                        }

        System.out.println(beerNum + " " + word + " of beer on the wall");
        System.out.println(beerNum + " " + word + " of beer.");
        System.out.println("Take one down.");
        System.out.println("Pass it around.");
        beerNum = beerNum - 1;

        if (beerNum<=0) {
                System.out.println("No more bottles of beer on the wall");
        } //else문 끝
        } //while순환문 끝
} //main클래스 끝
} //클래스 끝


}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{

public class vbvb{
	public static void main (String[] args) {
		String[] animal={"cat", "dog", "turtle", "horse"};
		String[] fruit={"apple", "melon", "grape", "peach"};
		String[] cloth={"shirt", "pants", "shoes", "sweater"};

		int oneLength=animal.length;
		int twoLength=fruit.length;
		int threeLength=cloth.length;

		int rand1 = (int) (Math.random() * oneLength);
		int rand2 = (int) (Math.random() * twoLength);
		int rand3 = (int) (Math.random() * threeLength);

		String vbvb = animal[rand1] + " " + fruit[rand2] + " " + cloth[rand3];

	System.out.println("What we need is a " + vbvb);
	}
}

}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 자바언어로 작성된 프로그램을 실행시키는 역할을 하고 바이트코드가 만들어진 다음 바이트코드가 실행되기 전까지 다른 누군가가 그걸 건드리지 않았는지 확인하는 작업을 한다.
 * 컴파일러: 자바 언어를 해석하고 문법을 점검해주고, 변수에 이상한 유형의 데이터를 저장하는 것을 막아주고, 사용자가 비공개 메소드를 호출하거나, 바꿔서는 안 되는 코드를 건드릴 때 차단을 해주기도 한다.


*55p 컴파일러가 되어봅시다* _구현후 주석달기_


<A>
{{{


public class Exercise1b {
		public static void main(String[] args) {
			int x=1;
			while(x<10){
				if(x>3){
				System.out.println("big x");
				}
				x=x+1; //"big x"
			}
		}
}

}}}


<B>
{{{
public class woori {
	public static void main(String[] args) {
		int x=5;
		while(x>1){
			x=x-1;
			if(x<3) {
				System.out.println("small x");
				}
			}
	
	}
}

}}}

<c>
{{{
public class Exercise1b {
	public static void main(String[] args) {
		int x=5;
		while(x>1) {
			x=x-1;
			if(x<3) {
				System.out.println("small x");
				}
			}
		}
}



}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체의 상태(데이터)를 나타내며 그 유형에 속하는 각 객체마다 값이 다름
 * 메소드: 객체에서 할 수 있는 일
 * 클래스: 객체를 만들기 위한 청사진(blueprint)
 * 테스트용 클래스: 새로운 클래스를 테스트하기 위한 클래스 
 

*68p Television* _채워넣기_

 * 인스턴스 변수: channel,volume,power 
 * 메소드:poweron(),poweroff(),volumeup(),volumedown(),recording(),channelup(),channeldown() 


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{

public class GuessGame {
        Player p1;
        Player p2;
        Player p3;
        Player p4;
        public void startGame() {
                p1 = new Player();
                p2 = new Player();
                p3 = new Player();
                p4 = new Player();
                int guessp1 = 0;
                int guessp2 = 0;
                int guessp3 = 0;
                int guessp4 = 0;
                boolean p1isRight = false;
                boolean p2isRight = false;
                boolean p3isRight = false;
                boolean p4isRight = false;
                int targetNumber = (int) (Math.random() * 10);
                System.out.println("I'm thinking of a number between 0 and 9...");
                while (true) {
                        System.out.println("Number to guess is " + targetNumber);
                        p1.guess();
                        p2.guess();
                        p3.guess();
                        p4.guess();
                        guessp1 = p1.number;
                        System.out.println("Player one guessed " + guessp1);
                        guessp2 = p2.number;
                        System.out.println("Player two guessed " + guessp2);
                        guessp3 = p3.number;
                        System.out.println("Player three guessed" + guessp3);
                        guessp4 = p4.number;
                        System.out.println("Player four guessed" + guessp4);
                        if (guessp1 == targetNumber) {
                                p1isRight = true;
                        }
                        if (guessp2 == targetNumber) {
                                p2isRight = true;
                        }
                        if (guessp3 == targetNumber) {
                                p3isRight = true;
                        }
                        if (guessp4 == targetNumber){
                                p4isRight = true;
                        }

                        if (p1isRight || p2isRight || p3isRight || p4isRight) {

                                System.out.println ("We have a winner!");
                                System.out.println ("Player one got it right? " + p1isRight);
                                System.out.println("Player two got it right? " + p2isRight);
                                System.out.println("Player three got it right? " + p3isRight);
                                System.out.println("Player four got it right?" + p4isRight);
                                System.out.println("Game over!");
                                break;
                        } 
                        else {
                        System.out.println("Players will have to try again.");
                        }
                }
        }
}


}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A
class TapeDeck {
        
        boolean canRecord = false;
        
        void playTape() {
                System.out.println("tape playing");
        }
        
        void recordTape() {
                System.out.println("tape recording");
        }
}

class TapeDeckTestDrive {
        public static void main(String [] args) {
        
                TapeDeck t = new TapeDeck(); //t라는 TapeDeck 객체 선언

                t.canRecord = true;
                t.playTape();
                
                if(t.canRecord == true ) {
                        t.recordTape();
                        }
                }
        }

B
class DVDPlayer {
        
        boolean canRecord = false ;
        
        void recordDVD() {
                System.out.println("DVD recording");
        }
        void playDVD() {
                System.out.println("DVD playing");

        }
}
class DVDPlayerTestDrive {
        public static void main(String [] args) {
        
        DVDPlayer d = new DVDPlayer ();
        d.canRecord = true;
        d.playDVD ();
        
        if(d.canRecord == true) {
                d.recordDVD();
                }
        }
}

}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수:
 - 원시변수 : 정수, 부울, 부동소수와 같은 기초적인 값(단순한 비트 패턴으로 나타낼 수 있는 값)
long, int, short, byte와 같이 유형을 지정해주어야 한다.
컵에 비유할 수 있다.

 - 레퍼런스 변수 : 객체에 대한 레퍼런스가 들어간다.
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{
class Dog {
	String name;
	public static void main(String[] args)
	{
		Dog dog1 = new Dog();
		dog1.bark();
		dog1.name = "신우리";

		Dog[] myDogs = new Dog[24];
		myDogs[0] = new Dog();
		myDogs[1] = new Dog();
		myDogs[2] = new Dog();
		myDogs[3] = new Dog();
		myDogs[4] = new Dog();
		myDogs[5] = new Dog();
		myDogs[6] = new Dog();
		myDogs[7] = new Dog();
		myDogs[8] = new Dog();
		myDogs[9] = new Dog();
		myDogs[10] = new Dog();
		myDogs[11] = new Dog();
		myDogs[12] = new Dog();
		myDogs[13] = new Dog();
		myDogs[14] = new Dog();
		myDogs[15] = new Dog();
		myDogs[16] = new Dog();
		myDogs[17] = new Dog();
		myDogs[18] = new Dog();
		myDogs[19] = new Dog();
		myDogs[20] = new Dog();
		myDogs[21] = new Dog();
		myDogs[22] = new Dog();
		myDogs[23] = new Dog();
		myDogs[24] = dog1;

		myDogs[0].name = "이미현";
		myDogs[1].name = "이찬주";
		myDogs[2].name = "이정우";
		myDogs[3].name = "김시윤";
		myDogs[4].name = "손낙원";
		myDogs[5].name = "김명준";
		myDogs[6].name = "이창권";
		myDogs[7].name = "임태휘";
		myDogs[8].name = "이상미";
		myDogs[9].name = "장유리";
		myDogs[10].name = "김건희";
		myDogs[11].name = "이민주";
		myDogs[12].name = "이민경";
		myDogs[13].name = "이지현";
		myDogs[14].name = "최문숙";
		myDogs[15].name = "김석환";
		myDogs[16].name = "곽도윤";
		myDogs[17].name = "최수아";
		myDogs[18].name = "신아영";
		myDogs[19].name = "박선우";
		myDogs[20].name = "류기태";
		myDogs[21].name = "이영기";
		myDogs[22].name = "임태완";
		myDogs[23].name = "박종하";

		System.out.print("마지막 개의 이름: ");
		System.out.println(myDog[24].name);

		int x=0;
		while(x<myDogs.length)
		{
			myDog[x].bark();
			x=x+1;
		}
	}

	public void bark()
	{
		System.out.println(name + "이(가) 왈!하고 짖습니다.");
	}

	public void eat() { }
	public void chaseCat() { }
}



}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

<A>
{{{

class Books {
	String title;
	String author;
	}

class BooksTestDrive {
	public static void main(String [] args)
	{
		Books [] myBooks = new Books[3];
		int x=0;
	
		myBooks[0] = new Books();
		myBooks[1] = new Books();
		myBooks[2] = new Books();

		myBooks[0].title = "이기적유전자";
		myBooks[1].title = "천추태후";
		myBooks[2].title = "칭찬은 고래도 춤추게 한다.";
		myBooks[0].author = "리처드도킨스";
		myBooks[1].author = "김정미";
		myBooks[2].author = "켄 블랜차드";

		while(x < 3)
			System.out.print(myBook[x].title);
			System.out.print("by");
			System.out.println(myBooks[x].author);
			x = x + 1;
	}
}
}

}}}

<B>
{{{
class foods {
	String name;

	public static void main(String [] args)
	{
		Foods [] h = new Foods[3];
		int z = -1;

		while( z < 2)
		{

			z = z + 1;
			h[z] = new Foods();
			h[z].name = "apple";
			if(z==1)
			{
				h[z].name = "banana";
			}
			if(z==2)
			{
				h[z].name = "peach";
			}

		System.out.print(h[z].name + "is a");
		System.out.println("good Hobbit name");
		}
	}
}


}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?: 밥
 * 문제가 된 부분은 어딘가요?: 켄트의 코드는 메모리를 약간 절약할수는 있다. 하지만 켄트의 코드는 순환문을 한 바퀴 돌 때마다 그는 새로운 객체를 레퍼런스 변수 하나에 대입했기 때문에 전에 참조하고 있던 객체는 버림받게 된다. 즉, 객체를 다시 사용 할 수 없게 된 것이다. 

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화: 외부에 노출되어있는 변수를 보호하기 위하여 인스턴트 변수와 메소드에 제한을 걸어 외부에서 직접 인스턴트 변수와 메소드에 접근할 수 없게 함. 
 * 게터와 세터: 인스턴트 변수의 값을 알아내기 위한 메소드, 인스턴트 변수의 값을 설정하기 위한 메소드 
 * 인스턴스 변수 vs 지역 변수: 클래스 안, 메소드 밖에서 설정한 변수. 지역 VS 메소드 안에서 설정한 변수 
 
*107p Dog* _실행_

{{{
class Dog {
        int size;
        String name;

        void bark() {
                if (size >60 ){
                        System.out.println("Wooof! Wooof!");
                } else if ( size > 14) {
                        System.out.println("Ruff! Ruff!");
                } else {
                        System.out.println("Yip! Yip!");
                }
        }
}


class DogTestDrive {

        public static void main (String[] args) {
                Dog one  = new Dog();
                one.size = 36;
                Dog two = new Dog();
                two.size = 5;
                Dog three = new Dog();
                three.size =80;

                one.bark();
                two.bark();
                three.bark();
        }
}
}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
class XCopy
        public static void main(String [] args){
                
                int orig = 42;

                XCopy x = new XCopy();
                
                int y = x.go(orig);

                System.out.println(orig + " " + y);
}

                int go(int arg) 
        {
                arg = arg*2;
        
                return arg;
        }
}               



class Clock
{
        String time;

        void setTime(String t)
        {
                time = t;
        }

        String getTime() // getTime method는 void로 표시하면 안됩니다. 리턴유형이 있어야함.
        {
                return time;
        }
}

class ClockTestDrive 
{
        public static void main(String[] args)
        {
                Clock c = new Clock();
                
                c.setTime("1245");
                String tod = c.getTime();
                System.out.println("time : " + tod);
        }
}

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍(eXtreme Programming)이란?
 - 조금씩 자주 발표한다. 
 - 사이클을 반복해서 돌리면서 개발한다. 
 - 스펙에 없는 것은 절대 집어넣지 않는다. 
 - 테스트 코드를 먼저 만든다. 
 - 야근은 하지 않는다. 
 - 항상 정규 일과 시간에만 작업한다. 
 - 기회가 생기는 족족 언제 어디서든 코드를 개선한다. 
 - 모든 테스트를 통과하기 전에는 어떤 것도 발표하지 않는다. 
 - 조금씩 발표하는 것을 기반으로 하여 현실적인 작업 계획을 만든다. 
 - 모든 일을 단순하게 처리한다. 
 - 두 명씩 팀을 편성하고 모든 사람이 대부분의 코드를 알 수 있도록 돌아가면서 작업한다.

 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{
public class SimpleDotComTestDrive{

        
public static void main(String[] args) {
   int numOfGuesses = 0;
   GameHelper helper = new GameHelper();

   SimpleDotCom theDotCom = new SimpleDotCom();
   int randomNum = (int) (Math.random() * 5);

   int[] locations = {randomNum, randomNum+1, randomNum+2};
   theDotCom.setLocationCells(locations);
   boolean isAlive = true;

   while (isAlive == true) {
      String guess = helper.getUserInput("Enter a number");
      String result = theDotCom.checkYourself(guess);
      numOfGuesses++;
      if (result.equals("kill")) {
         isAlive = false;
         System.out.println(numOfGuesses + " guesses");
      } // if 
   } // while
}  // main 

import java.io.*;

public class GameHelper {
        public String getUserInput(String prompt) {
                String inputLine = null;
                System.out.print(prompt + " ");
                try {
                        BufferedReader is = new BufferedReader(new
                  InputStreamReader(System.in));
                        inputLine = is.readLine();
                        if (inputLine.length() == 0) return null;
                } catch (IOException e) {
                        System.out.println("IOException : " + e);
                }
                return inputLine;
        }
}

public class SimpleDotCom{

        int[] locationCells;
        int numOfHits = 0;

        public void setLocationCells(int[] locs){
                locationCells = locs;
        }

        public String checkYourself(String stringGuess){
                int guess = Integer.parseInt(stringGuess);
                String result = "miss";
                for(int i =0; i<locationCells.length; i++){
                        if(guess == locationCells[i]){
                                result = "hit";
                                numOfHits++;
                                break;
                        }
                }


        if(numOfHits == locationCells.length){
                result = "kill";
                }
                System.out.println(result);
                        return result;
                }
        }

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{


}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{


}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:
 * 다형성:

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:

 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}