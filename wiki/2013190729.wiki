#summary 신우리의 실습 페이지입니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{

public class beer {
        public static void main (String[] args) {
                int beerNum=99;
                String word="bottles"; //복수형

        while (beerNum>0) {

        if(beerNum==1) {
                word="bottle"; //단수형(한 병인 경우)
                        }

        System.out.println(beerNum + " " + word + " of beer on the wall");
        System.out.println(beerNum + " " + word + " of beer.");
        System.out.println("Take one down.");
        System.out.println("Pass it around.");
        beerNum = beerNum - 1;

        if (beerNum<=0) {
                System.out.println("No more bottles of beer on the wall");
        } //else문 끝
        } //while순환문 끝
} //main클래스 끝
} //클래스 끝


}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{

public class vbvb{
	public static void main (String[] args) {
		String[] animal={"cat", "dog", "turtle", "horse"};
		String[] fruit={"apple", "melon", "grape", "peach"};
		String[] cloth={"shirt", "pants", "shoes", "sweater"};

		int oneLength=animal.length;
		int twoLength=fruit.length;
		int threeLength=cloth.length;

		int rand1 = (int) (Math.random() * oneLength);
		int rand2 = (int) (Math.random() * twoLength);
		int rand3 = (int) (Math.random() * threeLength);

		String vbvb = animal[rand1] + " " + fruit[rand2] + " " + cloth[rand3];

	System.out.println("What we need is a " + vbvb);
	}
}

}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 자바언어로 작성된 프로그램을 실행시키는 역할을 하고 바이트코드가 만들어진 다음 바이트코드가 실행되기 전까지 다른 누군가가 그걸 건드리지 않았는지 확인하는 작업을 한다.
 * 컴파일러: 자바 언어를 해석하고 문법을 점검해주고, 변수에 이상한 유형의 데이터를 저장하는 것을 막아주고, 사용자가 비공개 메소드를 호출하거나, 바꿔서는 안 되는 코드를 건드릴 때 차단을 해주기도 한다.


*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

<A>

public class Exercise1b {
		public static void main(String[] args) {
			int x=1;
			while(x<10){
				if(x>3){
				System.out.println("big x");
				}
				x=x+1; //"big x"
			}
		}
}

<B>

public class woori {
	public static void main(String[] args) {
		int x=5;
		while(x>1){
			x=x-1;
			if(x<3) {
				System.out.println("small x");
				}
			}
	
	}
}

<c>

public class Exercise1b {
	public static void main(String[] args) {
		int x=5;
		while(x>1) {
			x=x-1;
			if(x<3) {
				System.out.println("small x");
				}
			}
		}
}



}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수:
 * 메소드:
 * 클래스:
 * 테스트용 클래스:
 

*68p Television* _채워넣기_

 * 인스턴스 변수:
 * 메소드:


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{

}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수:
 - 원시변수 : 정수, 부울, 부동소수와 같은 기초적인 값(단순한 비트 패턴으로 나타낼 수 있는 값)
long, int, short, byte와 같이 유형을 지정해주어야 한다.
컵에 비유할 수 있다.

 - 레퍼런스 변수 : 객체에 대한 레퍼런스가 들어간다.
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{
class Dog {
	String name;
	public static void main(String[] args)
	{
		Dog dog1 = new Dog();
		dog1.bark();
		dog1.name = "신우리";

		Dog[] myDogs = new Dog[24];
		myDogs[0] = new Dog();
		myDogs[1] = new Dog();
		myDogs[2] = new Dog();
		myDogs[3] = new Dog();
		myDogs[4] = new Dog();
		myDogs[5] = new Dog();
		myDogs[6] = new Dog();
		myDogs[7] = new Dog();
		myDogs[8] = new Dog();
		myDogs[9] = new Dog();
		myDogs[10] = new Dog();
		myDogs[11] = new Dog();
		myDogs[12] = new Dog();
		myDogs[13] = new Dog();
		myDogs[14] = new Dog();
		myDogs[15] = new Dog();
		myDogs[16] = new Dog();
		myDogs[17] = new Dog();
		myDogs[18] = new Dog();
		myDogs[19] = new Dog();
		myDogs[20] = new Dog();
		myDogs[21] = new Dog();
		myDogs[22] = new Dog();
		myDogs[23] = new Dog();
		myDogs[24] = dog1;

		myDogs[0].name = "이미현";
		myDogs[1].name = "이찬주";
		myDogs[2].name = "이정우";
		myDogs[3].name = "김시윤";
		myDogs[4].name = "손낙원";
		myDogs[5].name = "김명준";
		myDogs[6].name = "이창권";
		myDogs[7].name = "임태휘";
		myDogs[8].name = "이상미";
		myDogs[9].name = "장유리";
		myDogs[10].name = "김건희";
		myDogs[11].name = "이민주";
		myDogs[12].name = "이민경";
		myDogs[13].name = "이지현";
		myDogs[14].name = "최문숙";
		myDogs[15].name = "김석환";
		myDogs[16].name = "곽도윤";
		myDogs[17].name = "최수아";
		myDogs[18].name = "신아영";
		myDogs[19].name = "박선우";
		myDogs[20].name = "류기태";
		myDogs[21].name = "이영기";
		myDogs[22].name = "임태완";
		myDogs[23].name = "박종하";

		System.out.print("마지막 개의 이름: ");
		System.out.println(myDog[24].name);

		int x=0;
		while(x<myDogs.length)
		{
			myDog[x].bark();
			x=x+1;
		}
	}

	public void bark()
	{
		System.out.println(name + "이(가) 왈!하고 짖습니다.");
	}

	public void eat() { }
	public void chaseCat() { }
}



}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

class Books {
	String title;
	String author;
	}

class BooksTestDrive {
	public static void main(String [] args)
	{
		Books [] myBooks = new Books[3];
		int x=0;
	
		myBooks[0] = new Books();
		myBooks[1] = new Books();
		myBooks[2] = new Books();

		myBooks[0].title = "이기적유전자";
		myBooks[1].title = "천추태후";
		myBooks[2].title = "칭찬은 고래도 춤추게 한다.";
		myBooks[0].author = "리처드도킨스";
		myBooks[1].author = "김정미";
		myBooks[2].author = "켄 블랜차드";

		while(x < 3)
			System.out.print(myBook[x].title);
			System.out.print("by");
			System.out.println(myBooks[x].author);
			x = x + 1;
	}
}
}


}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?:
 * 문제가 된 부분은 어딘가요?:

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:
 * 게터와 세터:
 * 인스턴스 변수 vs 지역 변수:
 
*107p Dog* _실행_

{{{

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:
 * 다형성:

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}