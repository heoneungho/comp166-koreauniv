#summary 자바라라라라랍

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{
책에 나와있는데로 코드를 짜면, 
99 bottles of beer on the wall
99 bottles of beer.
Take one down.
Pass it around.
98 bottles of beer on the wall
98 bottles of beer on the wall
98 bottles of beer.
Take one down.
Pass it around.
97 bottles of beer on the wall
97 bottles of beer on the wall
97 bottles of beer.
Take one down.
Pass it around.
이런식으로 99 를 제외한 나머지 문장에서 같은문장이 두번씩 중첩됩니다.
또한 제일 마지막에서
1 bottles of beer on the wall
다음과같이 1개의 병인데 복수형(bottles)단어가 쓰여지게 됩니다.
이를 해결하기 위해 코드를 짜고 주석을 달아보겠습니다.

public class BeerSong {                                   //BeerSong이란 클래스를 만듭니다
    public static void main (String[] args)
    {
            int beerNum = 99;                                //beerNum이란 정수변수를 만들고
                                                                           //99를 대입합니다.
            String word = "bottles"; //복수형      //word란 문자열 변수를 만들고
                                                                           //bottles를 대입합니다.
            while (beerNum > 0)                           //beerNum이 0보다 클동안 실행합니다
            {
                   /* if (beerNum == 1)           //if문이 여기에 있으면마지막 1병남았을때
                    {                                            //bottles가 뜨는 오류가 생깁니다
                            word = "bottle";          //beerNum = beerNum - 1;
                    }                                            //따라서 위 문장 아래로 옴겨야합니다
                    */
                   // System.out.println(beerNum + " " + word + " of beer on the wall");
                    System.out.println(beerNum + " " + word + " of beer.");
                    System.out.println("Take one down.");
                    System.out.println("Pass it around.");      //각각의 문장을 실행합니다
                    beerNum = beerNum - 1;  //문장을 실행한후 beerNum에서1을 빼줍니다

                    if (beerNum == 1)    //beerNum 이 1일경우에 bottle을 출력합니다
                    {
                            word = "bottle";
                    }

                    if (beerNum > 0)   //beerNum이 1보다 클경우 문장을 출력해주는 코드
                    {                              //하지만 이미 위에서 출력했으므로 주석처리합니다
                         // System.out.println(beerNum + " " + word + " of beer on the wall"); 
                    }

                    else
                    {                     //beerNum이 0보다 작거나 같을경우 문장을 출력합니다
                            System.out.println("No more bottles of beer on the wall");
                    }
            }
    }

}


}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{

public class PhraseOMatic	//PhraswOMatic 이란 클래스를 만듭니다.
{
	public static void main(String[]args)
	{

		String[]wordListOne={"I", "He", "She","It", "John", "Kate"};

		String[]wordListTwo={"like", "hate", "love","eat"};

		String[]wordListThree={"dog", "cat", "cow", "human", "pig"};
		//각각의 단어 리스트를 만듭니다
		int oneLength = wordListOne.length;
		int twoLength = wordListTwo.length;
		int threeLength = wordListThree.length;
		//각각의 정수변수를 만들고 각 그룹의 단어수만큼 대입합니다.

		int rand1 = (int) (Math.random()*oneLength);
		int rand2 = (int) (Math.random()*twoLength);
		int rand3 = (int) (Math.random()*threeLength);
		//난수를 발생시킵니다.

		String phrase=wordListOne[rand1]+""+wordListTwo[rand2]+""+wordListThree[rand3];
		//그룹에서 랜덤하게 하나씩뽑아서 단어를 만듭니다.
		System.out.println(phrase);
	}//단어를 출력합니다.
}
}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 프로그램을 실행. 원래 들어가야할 값이 아닌 다른 유형의 값이 들어갔을경우 classcast exception을 발생시킴. 보안관련작업.
 
 * 컴파일러: 가상머신에 파일을 넘겨줌; 각종 위반사항을 막아줌. 보안관련작업.

*55p 컴파일러가 되어봅시다* _구현후 주석달기_


A
{{{

public class Exercise1b {

	public static void main(String [] args)
	{
		int x = 1;     //x라는 변수를 선언하고 1을 대입합니다.
		
		while(x<10)   // x가10보다 작으면 계속 반복되는 반복문을 만듭니다.
		{
			if(x>3)   // x가 3보다 크면 아래의 문장을 출력합니다.
			{
				System.out.println("big x");
				
			}
		}
	}
}
//위 코드에 들어있는 while문 때문에 x에 1을넣으면 while문을 빠져나오지 못하고 무한 루프에 빠지게 됩니다. 따라서 while문을 제거해야 합니다.
}}}


B
{{{
class Exercise1b  //추가해줘야함
{
	
	public static void main(String [] args)
	{
		int x = 5;  //x라는 변수를 선언하고 5를 대입합니다.
		while ( x>1)//x가 1보다 클경우 계속 반복되는 반복문을 선언합니다.
		{
			x=x-1;  //x에 x-1을 대입합니다.
		
			if(x<3) //x가 3보다 작으면 아래 문장을 출력합니다.
			{
				System.out.println("small x");
			}
		}
	}
}

//결국 x가 5,4,3,2,1로변하면서 2,1일때 문장이 출력되고 1이되면 while문을 벗어나게되어 종료됩니다.
}}}
책에 나와있는 코드에는 class가 없어서 시작이 되지않습니다.
따라서 class를 추가해주어야합니다.

C
{{{
class Exercise1b
{
	
	public static void main(String [] args) //추가해줘야함
	{
		int x = 5;  //x라는 변수를 선언하고 5를 대입합니다.
		while ( x>1)//x가 1보다 클경우 계속 반복되는 반복문을 선언합니다.
		{
			x=x-1;  //x에 x-1을 대입합니다.
		
			if(x<3) //x가 3보다 작으면 아래 문장을 출력합니다.
			{
				System.out.println("small x");
			}
		}
	}
}

//결국 x가 5,4,3,2,1로변하면서 2,1일때 문장이 출력되고 1이되면 while문을 벗어나게되어 종료됩니다.
}}}
책에선 코드에 main문이 빠져있기 때문에 실행이 되지않습니다.
따라서 main문을 삽입해줘야합니다.

= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체에서 자신에 대해 아는 것. 객체의 상태를 나타내며 그 유형에 속하는 각 객체마다 값이 다름.
 * 메소드: 객체에서 할 수 있는 일.
 * 클래스: 객체를 만들기 위한 청사진. 가상머신에 그 유형의 객체를 만드는 방법을 알려주는 역할을함.
 * 테스트용 클래스: 새로운 클래스 유형의 객체에 들어있는 메소드와 변수를 테스트함.
 

*68p Television* _채워넣기_

 * 인스턴스 변수:Channel, Volume, 
 * 메소드: setChannel(), setVolume(), Power(), Mute()


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{
package GuessGame;

public class GuessGame 
{
	Player p1;
	Player p2;
	Player p3;
	Player p4;		//4명의 선수를 선언합니다.
	
	public void startGame()
	{
		p1 = new Player();
		p2 = new Player();
		p3 = new Player();
		p4 = new Player();  //Player 4개를 생성하고 각각의 변수에 집어넣습니다
		
		int guessp1 = 0;
		int guessp2 = 0;
		int guessp3 = 0;
		int guessp4 = 0; //Player에서 만든 숫자를 집어넣을 변수를 선언합니다
	
		boolean p1isRight = false;
		boolean p2isRight = false;
		boolean p3isRight = false;
		boolean p4isRight = false; //참거짓을 판별할 변수를 만듭니다.
		다
		int targetNumber = (int) (Math.random() * 10);
		System.out.println("0 이상 9 이하의 숫자를 맞춰보세요.");
		//맞춰야할 숫자를 만들고 targetNumber에 집어넣습니다.
		while(true)
		{
		System.out.println("맞춰야 할 숫자는 " + targetNumber + "입니다.");
		
		p1.guess();
		p2.guess();
		p3.guess();
		p4.guess(); //각각의 선수마다 guess()를 실행합니다.
		
		guessp1 = p1.number;
		System.out.println("1번 선수가 찍은 숫자: " + guessp1);
		
		guessp2 = p2.number;
		System.out.println("2번 선수가 찍은 숫자: " + guessp2);
		
		guessp3 = p3.number;
		System.out.println("3번 선수가 찍은 숫자: " + guessp3);
		
		guessp4 = p4.number;
		System.out.println("4번 선수가 찍은 숫자: " + guessp4);
		//각 선수마다 숫자를 만들어서 집어넣습니다.
		if (guessp1 == targetNumber)
		{
			p1isRight = true;
		}
		
		if (guessp2 == targetNumber)
		{
			p2isRight = true;
		}
		
		if (guessp3 == targetNumber)
		{
			p3isRight = true;
		}
		
		if (guessp4 == targetNumber)
		{
			p4isRight = true;
		}
		//각 선수의 숫자가 답과 같을경우 참거짓을 참으로 바꿔줍니다.
		if ( p1isRight || p2isRight || p3isRight || p4isRight)
		{
			System.out.println("맞춘 선수가 있습니다.");
			System.out.println("1번 선수: " + p1isRight);
			System.out.println("2번 선수: " + p2isRight);
			System.out.println("3번 선수: " + p3isRight);
			System.out.println("4번 선수: " + p4isRight);
			System.out.println("게임 끝!!! ");
			break;//if문을 빠져나갑니다.
		//각 선수의 참거짓중 참이 있을경우 위의 문장을 출력합니다.
		}
		else
		{
			System.out.println("다시 시도해야 합니당");
		}
	//모두 거짓일경우 위의 문장을 출력합니다.
}
	}
}
package GuessGame;

public class Player 
{
	int number = 0;
//Player 라는 메소드에 number라는 변수를 선언합니다.	
	public void guess()
	{
		number = (int) (Math.random() * 10);
		System.out.println("찍은 숫자: " + number);
	}//number에 랜덤한 숫자를 넣고 위의 문장을 출력합니다.
}
package GuessGame;

public class GameLauncher 
{
	public static void main (String[] args)
	{
		GuessGame game = new GuessGame();
		game.startGame();
	}//메인함수
}

}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

A
{{{

class TapeDeck 
{
	boolean canRecord = false;
	//TapeDeck이란 메소드에서 canRecord라는 참거짓변수를 선언하고 거짓을 대입합니다.
	void playTape() 
	{
		System.out.println("tape playing");
	}
	
	void recordTape()
	{
		System.out.println("tape recording");
	}
}

class TapeDeckTestDrive
{
	public static void main(String [] args)
	{
		TapeDeck t;//t라는 TapeDeck을 선언합니다.
		t = new TapeDeck();
		//책에는 위의 두문장이 없어서 실행이안됬는데 이렇게 선언을 해야 합니다.
		t.canRecord = true;//t에서 canRecord를 참으로 반꿔줍니다.
		t.playTape();
		
		if(t.canRecord == true)//t에서canRecord가 참일경우 아래 문장을 실행합니다.
		{
			t.recordTape();
		}
	}
}
}}}

B
{{{

class DVDPlayer 
{
	boolean canRecord = false;
	
	void recordDVD()
	{
		System.out.println("DVD recording");
	}//recordDVD라는 메소드를 만들고 위의 문장을 출력하도록합니다.
	
	void playDVD()
	{
		System.out.println("DVD playing!!");
	}
	//책에는 이 메소드가 없어서 실행이 안됬는데 있어야 합니다.
}

class DVDPlayerTestDrive
{
	public static void main(String [] args)
	{//메인함수
		DVDPlayer d = new DVDPlayer();
		d.canRecord = true;
	//d라는 DVDPlayer변수를 만듭니다.
		d.playDVD();
		//위 메소드를 실행합니다.
		if(d.canRecord == true)//d에서 canRecord가 참일경우 if문에들어갑니다.
		{
			d.recordDVD();//이 메소드를 실행합니다.
			
		}
	}
}
}}}
= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수: 원시변수에는 정수, 부울, 부동소수점 수와 같은 기초적인 값(단순한 비트 패턴으로 나타낼 수 있는값)이 들어가지만 객체 레퍼런스에는 객체에 대한 레퍼런스가 들어간다.
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{

class Dog 
{
	String name;
	public static void main (String [] args)
	{
		Dog dog1 = new Dog();
		dog1.bark();//dog1에 대해 bark메소드를 실행합니다.
		dog1.name = "Bart";//dog1의 name을 bart로 합니다.
		
		Dog[] myDogs = new Dog[10];
		
		for(int i=0;i<9;i++)//i가 0부터  8까지 반복되는 반복문을만듭니다.
		{
		myDogs[i] = new Dog();
		}
		myDogs[9] = dog1;//마지막 dog엔 dog1인 bart를 집어넣습니다.
		
		myDogs[0].name = "Fred";
		myDogs[1].name = "Marge";
		myDogs[2].name = "Kim";
		myDogs[3].name = "Park";
		myDogs[4].name = "Oh";
		myDogs[5].name = "Song";
		myDogs[6].name = "Lee";
		myDogs[7].name = "choi";
		myDogs[8].name = "Jo";
		//각각의 이름을 정합니다.ㅣ
		System.out.print("마지막 개의 이름: ");
		System.out.println(myDogs[9].name);
		//마지막 개인 바트를 출력합니다.
		int x=0;
		while(x <myDogs.length)
		{
			myDogs[x].bark();
			x=x+1;
		}//x가 0부터 배열수만큼 차례대로 짖게합니다.
	}
	
	public void bark()//bark메소드
	{
		System.out.println(name + "이(가) 왈! 하고 짖습니다.");
	}
	
	public void eat() { }
	public void chaseCat() { }
}

}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_


A
{{{

class Books 
{
String title;
String author;
}

class BooksTestDrive
{
	public static void main(String [] args)
	{
		Books [] myBooks = new Books[3];
		int x =0;
		myBooks[0] = new Books();
		myBooks[1] = new Books();
		myBooks[2] = new Books();
		//교재에서는 위의 세문장이 없기때문에 실행이 안된다.  
		myBooks[0].title = "The Grapes of Java";
		myBooks[1].title = "The Java Gatsby";
		myBooks[2].title = "The Java Cookbook";
		myBooks[0].author = "bob";
		myBooks[1].author = "sue";
		myBooks[2].author = "ian";
		
		while (x<3)//현재 x값이 0이므로 x가 2가 될때까지 아래 반복문을 반복한다
		{
			System.out.print(myBooks[x].title);
			System.out.print(" by ");
			System.out.println(myBooks[x].author);
			x=x+1;
		}
	}
}

}}}


B
{{{

public class Hobbits 
{
	String name;
	
	public static void main(String[] args)
	{
		Hobbits[]h= new Hobbits[3];
	
		//int z = 0; 책에는 이렇게 되있는데 배열은 0부터시작하기때문에 -1로 바꿔줘야한다.
		
		int z = -1;
		
		while (z < 2)//책에는 z<4라고 되있는데 우리는 3개만 하면되므로, 2로 바꿔줘야한다(-1,0,1이 입력됨)
		{
			z=z+1;
			h[z]= new Hobbits();
			h[z].name = "bilbo";
			
			if(z==1)
			{
				h[z].name = "frodo";
			}
			
			if(z==2)
			{
				h[z].name = "sam";
			}
			
			System.out.print(h[z].name + " is a ");
			System.out.println("good Hobbit name");
		}
	}
}

}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?:밥이 이김
 * 문제가 된 부분은 어딘가요?: 각각의 객체를 각각의 변수에 집어넣어야 하는데 켄트는 하나의 변수에만 여러 객체를 집어넣었다. 결국 변수에는 마지막에넌 객체만 들어가게되서 문제가 발생한다.

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  = 메소드는 인스턴스 변수의 값을 사용하므로 객체의 상태에 따라 메소드의 속성에 영향을미친다.

*105p~ 객체* _요약_

 * 캡슐화:인스턴스변수에 말도 안되는 값이 들어가지 않도록 설정해주는것.
 * 게터와 세터:게터는 게터가 가져오기로 되어있는 값을 리턴값 형태로 받아오기위한 용도로 쓰인다. 세터는 그세터가 설정할 값을 인자로 받아서 인스턴스 변수를 그 값으로 설정하기 위한 용도로 쓰인다.
 * 인스턴스 변수 vs 지역 변수:인스턴스 변수는 클래스 내에서 선언되고 지역 변수는 메소드 내에서 선언된다. 지역 변수는 사용하기전 반드시 초기화해야한다.
 
*107p Dog* _실행_

{{{

public class Dog 
{
	int size;
	String naame;
	
	void bark()//변수의 범위에 따라 다르게 짖는 메소드를 만듭니다.
	{
		if(size > 60)
		{
			System.out.println("Wooooof! Wooooof!");
		} else if (size > 14){
			System.out.println("Rufff! Rufff!");
		} else{
			System.out.println("Yipp! Yiip!");
		}
	}
}

class DogTestDrive
{
	public static void main (String[] args)
	{
		Dog one = new Dog();//각각의 Dog객체를 만들고 값을 넣습니다.
		one.size = 70;
		
		Dog two = new Dog();
		two.size = 8;
		
		Dog three = new Dog();
		three.size = 35;
		
		one.bark();//각각의 객체에 대하여 메소드를 실행합니다.
		two.bark();
		three.bark();
	}
}
}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_


A
{{{

public class XCopy 
{
	public static void main(String [] args)
	{
		int orig = 42; //orig라는 변수를 선언하고 42를 대입합니다.
		
		XCopy x = new XCopy(); //x라는 XCopy객체를 만듭니다.
		
		int y = x.go(orig);//y라는 변수를 선언하고 x.go(orig)를 대입합니다.
		
		System.out.println(orig + " " + y);//출력
	}

	int go(int arg)//인트형변수를 받아서 인트형 변수를 반환합니다.
	{
		arg = arg * 2;
		
		return arg;
	}
}

}}}

B
{{{

public class Clock 
{
	String time;
	void setTime(String t)
	{
		time = t;
	}
	
	String getTime()//책에는 void라고 되있는데 여기선 문자열을 반환하므로 String으로 바꿔야합니다.
	{
		return time;
	}
}

class ClockTestDrive
{
	public static void main(String [] args)//메인함수를 작성합니다.
	{
		Clock c = new Clock(); //c라는 새로운 객체 생성합니다.
		
		c.setTime("1245"); //c.time에 1245를 대입합니다.
		String tod = c.getTime();
		System.out.println("time: " + tod);
	}
}
}}}

= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란? 최근의 소프트웨어 개발 방법론 분야에 새로 등장한 방법으로 조그만 회사에서 아주 큰 기업에 이르기까지 다양한 규모의 회사에서 쓰이고 있다.
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{

public class SimpleDotComGame {

	public static void main(String[] args) 
	{
		int numOfGuesses = 0;//현재 사용자가 추측한 횟수를 넣을 변수를 선언하고 0으로초기화합니다.
		
		GameHelper helper = new GameHelper();//helper라는 객체를 만듭니다.
		
		SimpleDotCom theDotCom = new SimpleDotCom();//the DotCom이라는 객체를 만듭니다.
		
		int randomNum = (int) (Math.random() * 5);//0에서 4까지의 임의의 정수를 생성합니다.
		
		int[] locations = {randomNum, randomNum+1, randomNum+2};//난수를 이용해서 위치 배열을 만듭니다.
		
		theDotCom.setLocationCells(locations);//위치를 지정합니다.
		
		boolean isAlive = true;//닷컴이 살아있는지 판별할 변수를 생성합니다.
		
		while(isAlive == true)//닷컴이 살아있는동안 계속되는 반복문을 만듭니다.
		{
			String guess = helper.getUserInput("enter a number");//입력을받습니다.
			
			String result = theDotCom.checkYourself(guess);//입력받은 수를 확인해서 저장합니다.
			
			numOfGuesses++;//추측횟수를 증가시킵니다.
			
			if(result.equals("kill"))//닷컴이 죽었다면 실행합니다.
			{
				isAlive = false;//닷컴의 생사여부를 판단하는 변수에 죽음을 넣습니다.
				
				System.out.println(numOfGuesses + ": guesses");//추측횟수를 표시해줍니다.
			}
		}
		
	}

}

public class SimpleDotCom 
{
	int[] locationCells;//배열을 만듭니다.
	int numOfHits = 0;//맞춘횟수를 저장할 변수를 만듭니다.
	
	public void setLocationCells(int[] locs)
	{
		locationCells = locs;//위치를 저장할 메소드를 만듭니다.
	}
	
	public String checkYourself(String stringGuess)
	{
		int guess = Integer.parseInt(stringGuess);//입력받은 문자열을 정수로 바꿔 저장합니다.
		String result = "miss";//결과를 표시해주는 문자열을 선언합니다.
		for(int i = 0; i<locationCells.length; i++)//닷컴의 길이동안 반복되는 반복문을만듭니다.
		{
			if (guess == locationCells[i])//맞았다면 실행합니다.
			{
				result = "hit";//결과를 hit으로 만듭니다.
				numOfHits++;//맞춘횟수를 1증가시킵니다.
				break;//반복문을 빠져나옵니다.
			}
		}
		
		if ( numOfHits == locationCells.length)//맞춘횟수가 닷컴길이와같다면 실행합니다.
		{
			result = "kill";//결과를 kill로 만듭니다.
		}
		System.out.println(result);//결과를 출력합니다.
		return result;
	}
}
import java.io.*;

public class GameHelper 
{
	public String getUserInput(String prompt)
	{
		String inputLine = null;
		System.out.print(prompt + " ");
		try
		{
			BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
			inputLine = is.readLine();
			if( inputLine.length() == 0) return null;
		} catch (IOException e)
		{
			System.out.println("IOException: " + e);
		}
		
		return inputLine;
	}
}

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:연관된 일련의 클래스에 대해 공통적인 규약을 정의하도록 하는것
 * 다형성:레퍼런스 유형을 식제 객체 유형의 상위클래스 유형으로 지정할 수 있도록 하는것. 새로운 하위클래스 형식을 프로그램에 추가하더라도 코드를 굳이 바꿀 필요가 없음

*208p 클래스 계층 구조* _클래스로 구현_

{{{

public class Animal 
{
	char food;
	boolean hunger;
	char boundaries;
	char location;
	
	void makeNoise(){}
	void eat(){}
	void sleep(){}
	void roam(){}
	
}

public class Feline extends Animal 
{
	void roam(){}
}

public class Lion extends Feline 
{
	void makeNoise(){}
	void eat(){}
}

public class Tiger extends Feline 
{
	void makeNoise(){}
	void eat(){}
}

public class Cat extends Feline
{
	void makeNoise(){}
	void eat(){}
}

public class Hippo extends Animal 
{
	void makeNoise(){}
	void eat(){}
}

public class Canine extends Animal
{
	void roam(){}
}

public class Wolf extends Canine
{
	void makeNoise(){}
	void eat(){}
}

public class Dog extends Canine
{
	void makeNoise(){}
	void eat(){}
}

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:상위클래스의 메소드가 하위클래스로 오는것
 * 오버로딩:메소드에서 인자가 변경되면 오버로드

*227p 컴파일러가 되어봅시다* _구현후 주석달기_


1. 정상적으로 실행됨
{{{
package p227;

public class MonsterTestDrive 
{
	public static void main(String [] args) //메인문
	{
		Monster [] ma = new Monster[3]; //ma 라는 이름의 변수 3개를 만듬니다
		ma[0] = new Vampire();	//각각의 변수를 설정합니다
		ma[1] = new Dragon();
		ma[2] = new Monster();
		
		for(int x =0; x<3; x++)	//각각의 ma에서 frighten을 실행합니다
		{
			ma[x].frighten(x);
		}
	}
}
package p227;

public class Monster 
{
	boolean frighten(int d)	//정수를 받아서 참거짓을 반환하는 함수
	{
		System.out.println("arrrgh!!");	//문장을 출력합니다
		return true;	//참을 반환합니다
	}
}
package p227;

public class Vampire extends Monster //몬스터클래스밑에 뱀파이어클래스
{
	boolean frighten(int x)	//정수를 받아서 참거짓을 반환
	{
		System.out.println("a bite?");	//문장출력
		return false;	//거짓을 반환
	}
}
package p227;

public class Dragon extends Monster //몬스터클래스 밑에 드래곤클래스
{
	boolean frighten(int degree)	//정수를 받아서 참거짓을 반환하는 함수
	{
		System.out.println("breath fire");	//문장 출력
		return true;	//참값을 반환
	}
}

}}}


2.
{{{
package p227;

public class MonsterTestDrive 
{
	public static void main(String [] args) //메인문
	{
		Monster [] ma = new Monster[3]; //ma 라는 이름의 변수 3개를 만듬니다
		ma[0] = new Vampire();	//각각의 변수를 설정합니다
		ma[1] = new Dragon();
		ma[2] = new Monster();
		
		for(int x =0; x<3; x++)	//각각의 ma에서 frighten을 실행합니다
		{
			ma[x].frighten(x);
		}
	}
}
package p227;

public class Monster 
{
	boolean frighten(int x)	//정수를 받아서 참거짓을 반환하는 함수
	{
		System.out.println("arrrgh!!");	//문장을 출력합니다
		return true;	//참을 반환합니다
	}
}
package p227;

public class Vampire extends Monster //몬스터클래스밑에 뱀파이어클래스
{
	int frighten(int f)	//여기서 int를 반환하는것 때문에 컴파일 에러가 발생합니다
	{
		System.out.println("a bite?");	//문장출력
		return 1;	//
	}
}
package p227;

public class Dragon extends Monster //몬스터클래스 밑에 드래곤클래스
{
	boolean frighten(int degree)	//정수를 받아서 참거짓을 반환하는 함수
	{
		System.out.println("breath fire");	//문장 출력
		return true;	//참값을 반환
	}
}

}}}

3. 컴파일은 되지만 결과가 이상함
{{{

package p227;

public class MonsterTestDrive 
{
	public static void main(String [] args) //메인문
	{
		Monster [] ma = new Monster[3]; //ma 라는 이름의 변수 3개를 만듬니다
		ma[0] = new Vampire();	//각각의 변수를 설정합니다
		ma[1] = new Dragon();
		ma[2] = new Monster();
		
		for(int x =0; x<3; x++)	//각각의 ma에서 frighten을 실행합니다
		{
			ma[x].frighten(x);
		}
	}
}
package p227;

public class Monster 
{
	boolean frighten(int x)	//정수를 받아서 참거짓을 반환하는 함수
	{
		System.out.println("arrrgh!!");	//문장을 출력합니다
		return false;	//거짓을 반환합니다
	}
}
package p227;

public class Vampire extends Monster //몬스터클래스밑에 뱀파이어클래스
{
	boolean scare(int x)	//오버라이드 하지않고 새로운 scare를 만들어서 결과가 이상하게나옴
	{
		System.out.println("a bite?");	//문장출력
		return true;	//참을 반환
	}
}
package p227;

public class Dragon extends Monster //몬스터클래스 밑에 드래곤클래스
{
	boolean frighten(int degree)	//정수를 받아서 참거짓을 반환하는 함수
	{
		System.out.println("breath fire");	//문장 출력
		return true;	//참값을 반환
	}
}
}}}

4. 컴파일은 되지만 결과가 잘못됨
{{{

}}}package p227;

public class MonsterTestDrive 
{
	public static void main(String [] args) //메인문
	{
		Monster [] ma = new Monster[3]; //ma 라는 이름의 변수 3개를 만듬니다
		ma[0] = new Vampire();	//각각의 변수를 설정합니다
		ma[1] = new Dragon();
		ma[2] = new Monster();
		
		for(int x =0; x<3; x++)	//각각의 ma에서 frighten을 실행합니다
		{
			ma[x].frighten(x);
		}
	}
}
package p227;

public class Monster 
{
	boolean frighten(int z)	//정수를 받아서 참거짓을 반환하는 함수
	{
		System.out.println("arrrgh!!");	//문장을 출력합니다
		return true;	//참을 반환합니다
	}
}
package p227;

public class Vampire extends Monster //몬스터클래스밑에 뱀파이어클래스
{
	boolean frighten(byte b)	//입력 형식이 바뀌어서 결과가 잘못나옴
	{
		System.out.println("a bite?");	//문장출력
		return true;	//참을 반환
	}
}
package p227;

public class Dragon extends Monster //몬스터클래스 밑에 드래곤클래스
{
	boolean frighten(int degree)	//정수를 받아서 참거짓을 반환하는 함수
	{
		System.out.println("breath fire");	//문장 출력
		return true;	//참값을 반환
	}
}

}}}
= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}