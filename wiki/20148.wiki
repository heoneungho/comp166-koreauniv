#summary 임예은

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{
public class BeerSong  //어디에서든 접근가능한 BeerSong 클래스 선언
{
        public static void main(String[] args) //리턴값이 없는 'args'라는 이름의 String형 배열을 인자값으로 받는 main 메소드선언
        {
                int beerNum = 99;//beerNum이라는 int형 변수 선언과 99값 대입
                String word = "bottles";      // 복수형

                while (beerNum>0)
                {

                if (beerNum ==1) //change String "word" right after changing "beerNum"
                        {
                                word = "bottle";      // 단수형(한 병인 경우)
                        }
                        
                        System.out.println(beerNum + " " + word + " of beer on the wall");  //출력하고 줄바꿈

                        System.out.println(beerNum + " " + word + " of beer.");  //출력하고 줄바꿈

                        System.out.println("Take one down."); //출력하고 줄바꿈

                        System.out.println("Pass it around");//출력하고 줄바꿈
                        
                        beerNum = beerNum - 1;
             //변수 beerNum에 저장된 값에서 1을 뺀 값을 beerNum에 대입
                        

                        /*if(beerNum >0)
                        {
                                System.out.println(beerNum + " " + word + " of beer on the wall\n"); 
                        } 이 if문은 while문의 조건인 'beerNum>0'과 겹친다. if문의 조건을 'beerNum<1'로 수정한다.*/
                        if(beerNum<1) 
                        {
                                System.out.println("No more bottles of beer on the wall"); //출력하고 줄바꿈
                        }     

                }      // while 순환문 끝
        }      // main 클래스 끝
}      // 클래스 끝

}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{
public class PhraseOMatic
{   
   public static void main (String[] args){
      String [] wordListOne = {"one-to-one", "powerful","energetic","universal","100%"}; 
//wordListOne이라는 String 배열을 선언하고 그 안에 구성원소를 저장한다.            
      String [] wordListTwo = {"associated", "assembled", "adhesive", "viscous", "awkward"};      

      String [] wordListThree = {"promise","love","computer science","land","operating system","spaghetti","sea","morning"};           
      int oneLength = wordListOne.length; //int형 변수 oneLength를 선언하고 wordListOne배열 안의 원소개수를 oneLength에 대입한다.      
      int twoLength = wordListTwo.length;      
      int threeLength = wordListThree.length;      
      int rand1 = (int) (Math.random() * oneLength); //oneLength배열의 크기 보다 같거나 작은 수 중 임의 수를 불러내는 함수를 이용하고 rand1이라는 int형 변수를 선언 후 대입한다.       
      int rand2 = (int) (Math.random() * twoLength);      
      int rand3 = (int) (Math.random() * threeLength);      
      String phrase = wordListOne[rand1] + " " + wordListTwo[rand2] + " " + wordListThree[rand3]; // phrase라는 String 변수를 선언한 후 위에서 대입된 rand1, rand2, rand3 번째수에 해당하는 단어를 각각의 wordListOne,two,three에서 불러내어 phrase에 대입한다.      
      System.out.println("What we need is a " + phrase); //구문을 추출한다.           
   } //main 클래스 끝  
} // 클래스 끝

}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 컴파일러가 파일을 주면 그 파일을 실행시킨다. 보안 관련 작업을 처리한다. 바이트코드가 만들어진 다음 바이트코드가 실행되기 전까지 다른 접근이 일어나지 않는지 확인하는 작업을 한다.
 * 컴파일러: 파일을 자바 가상 머신에게 넘겨준다. 소스 코드를 해석하여 문법이 맞는지 여부를 확인한다. 

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A. 
class Exercise1b {
 public static void main(String [] args) {
  int x = 1;
  while (x<10){
   x=x+1; // 무한루프 방지
   if(x>3) {
    System.out.println("big x");
   }
  }
 }
}

B.
class Exerciselb{ // 클래스를 정의해줘야한다.
 public static void main(String [] args){
  int x = 5;
  while (x>1) {
   x = x-1;
   if(x<3) {
    System.out.println("small x");
   }
  }
 }
}

C.
class Exercise1b{
 public static void main(String [] args) { // while문은 클래스 안의 메소드 안에 있어야 한다.
  int x = 5;
  while (x>1) {
   x = x-1;
   if(x<3) {
    System.out.println("small x");
   }
  }
 }
}

}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체의 상태(데이터)를 나타내며 그 유형에 속하는 각 객체마다 값이 다르다.
 * 메소드: 객체에서 할 수 있는 일
 * 클래스: 가상머신에 그 유형의 객체를 만드는 방법을 알려준다.
 * 테스트용 클래스: 새로운 클래스를 테스트하기 위한 클래스
 

*68p Television* _채워넣기_

 * 인스턴스 변수: channel, volume
 * 메소드: select_Channel(), setVolume()


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{
GuessGame.java

public class GuessGame {

   Player p1;
   Player p2;
   Player p3;
   Player p4;
   
   public void startGame() {
       p1 = new Player();
       p2 = new Player();
       p3 = new Player();
       p4 = new Player();
       int guessp1 = 0;
       int guessp2 = 0;
       int guessp3 = 0;
       int guessp4 = 0;
       boolean p1isRight = false;
       boolean p2isRight = false;
       boolean p3isRight = false;
       boolean p4isRight = false;
       int targetNumber = (int) (Math.random() * 10);
       System.out.println("I'm thinking of a number between 0 and 9...");
       while(true) {
           System.out.println("Number to guess is " + targetNumber);
           
           p1.guess();
           p2.guess();
           p3.guess();
           p4.guess();

           guessp1 = p1.number;
           System.out.println("Player one guessed " + guessp1);
           guessp2 = p2.number;
           System.out.println("Player two guessed " + guessp2);
           guessp3 = p3.number;
           System.out.println("Player three guessed " + guessp3);
           guessp4 = p4.number;
           System.out.println("Player four guessed " + guessp4);
           
           if (guessp1 == targetNumber) {
               p1isRight = true;
           }
           if (guessp2 == targetNumber) {
               p2isRight = true;
           }
           if (guessp3 == targetNumber) {
               p3isRight = true;
           }
           if (guessp4 == targetNumber) {
               p4isRight = true;
           }

           if (p1isRight || p2isRight || p3isRight || p4isRight)
           {
               System.out.println("We have a winner!");
               System.out.println("Player one got it right? " + p1isRight);
               System.out.println("Player two got it right? " + p2isRight);
               System.out.println("Player three got it right? " + p3isRight);
               System.out.println("Player four got it right? " + p4isRight);
               System.out.println("Game is over");
               break;
           }
           else
           {
               System.out.println("Players will have to try again.");
           }
       }
   }
}


GameLauncher.java

public class GameLauncher {
    public static void main (String[] args) {
        GuessGame game = new GuessGame();
        game.startGame();
    }
}


Player.java

public class Player {
    int number = 0;
    public void guess()
    {
        number = (int) (Math.random() * 10);
        System.out.println("I'm guessing " + number);
    }
}


}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

A.
class TapeDeck {

boolean canRecord = false;

void playTape() {
   System.out.println("tape playing");
}

void recordTape() {
   System.out.println("tape recording");
}
}

class TapeDeckTestDrive {
   public static void main(String [] args) {
      TapeDeck t = new TapeDeck(); //TapeDeck 객체를 선언해주어야 접근가능
      t.canRecord = true;
      t.playTape();

      if (t.canRecord == true) {
         t.recordTape();
      }
   }
}

B.
class DVDPlayer {
 
   boolean canRecord = false;

   void recordDVD() {
      System.out.println("DVD recording");
   }
   void playDVD() { //playDVD 메소드 생성해주어야 함
      System.out.println("DVD playing");
   }
}

class DVDPlayerTestDrive {
   public static void main(String [] args) {

      DVDPlayer d = new DVDPlayer();
      d.canRecord = true;
      d.playDVD();

      if (d.canRecord == true) {
         d.recordDVD();
      }
   }
}
}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시 변수 vs 레퍼런스변수:
변수는 원시 변수(primitive variable)와 객체 레퍼런스(objectreference)로 나눌 수 있다. 원시 변수에는 정수, 부울, 부동소수점 수와 같은 기초적인 값(단순한 비트 패턴으로 나타낼 수 있는 값)이 들어가고, 객체 레퍼런스에는 객체에 대한 레퍼런스가 들어간다. 변수에는 유형과 이름이 있어야한다.
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{
public class Dog {
    String name;
    public static void main(String[] args) {
        //Dog 객체를 만들고 접근한다.
        Dog dog1 = new Dog();
        dog1.bark();
        dog1.name = "Bart";
        
        //Dog 배열을 만든다.
        Dog[] myDogs = new Dog[3];
        //개를 집어넣는다.
        myDogs[0] = new Dog();
        myDogs[1] = new Dog();
        myDogs[2] = dog1;
        
        myDogs[0].name = "Fred";
        myDogs[1].name = "Marge";
        
        System.out.print("last don't name is ");
        System.out.println(myDogs[2].name);
        
        int x = 0;
        while (x < myDogs.length) {
            myDogs[x].bark();
            x = x+1;
        }
    }
    public void bark() {
        System.out.println(name + " says Ruff!");
    }
    
    public void eat() { }
    
    public void chaseCat() { }
}


}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A. 
class Books {
   String title;
   String author;
}

class BooksTestDrive {
   public static void main(String [] args) {
                
      Books [] myBooks = new Books[3];
      int x = 0;
      myBooks[0] = new Books();
      myBooks[1] = new Books();
      myBooks[2] = new Books(); // myBooks 의 객체 생성
      myBooks[0].title = "The Grapes of Java";
      myBooks[1].title = "The Java Gatsby";
      myBooks[2].title = "The Java Cookbook"; 
      myBooks[0].author = "bob";
      myBooks[1].author = "sue";
      myBooks[2].author = "ian";
      while(x<3) { 
         System.out.print(myBooks[x].title);
         System.out.print(" by ");
         System.out.println(myBooks[x].author);
         x = x + 1;
      }
   }
}

B.
class Hobbits {
   String name;
   public static void main(String [] args) {
      Hobbits [] h = new Hobbits[3];
      int z = -1; // 배열의 인덱스는 0에서 시작해야하므로
      while (z<2) {
         z = z + 1; 
         h[z] = new Hobbits();
         h[z].name = "bilbo";
         if(z==1) { 
            h[z].name = "frodo";
         }
         if (z==2) { 
            h[z].name = "sam";
         }
         System.out.print(h[z].name + " is a ");
         System.out.println("good Hobbit name");
      }
   }
}

}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?: 밥
 * 문제가 된 부분은 어딘가요?: 켄트가 사용한 레퍼런스 변수 개수는 밥의 메소드에 비해 작았지만, 그의 메소드에서 만든 Contact 객체 중에서 마지막 것을 제외한 나머지는 접근할 수가 없기 때문에 전에 참조하고 있던 객체는 다시 사용할 수 없다는 문제가 있다. 

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화: 인스턴스 변수를 private로 지정하고 접근 제어를 위해 public으로 지정된 게터와 세터를 만들어 인스턴스 변수를 부적절할 값으로 설정하지 못하게 해준다.
 * 게터와 세터: 게터는 단지 그 게터가 가져오기로 되어있는 값을 리턴값 형태로 받아오기 위한 용도로만 쓰이고, 세터는 그 세터가 설정한 값을 인자로 받아서 인스턴스 변수를 그 값으로 설정하기 위한 용도로 쓰인다.
 * 인스턴스 변수 vs 지역 변수: 인스턴스 변수는 클래스 내에서 선언되고, 지역 변수는 메소드 내에서 선언된다. 인스턴스 변수는 항상 어떤 기본값이 들어있어 직접 값을 대입하고나 세터 메소드를 호출하지 않아도 값이 들어있지만, 지역 변수는 사용하기 전에 반드시 초기화해야 한다.
 
*107p Dog* _실행_

{{{
class Dog {
   int size;
   String name;
        
   void bark() {
      if(size > 60){
         System.out.println("Wooof! Wooof!");
      }else if(size>14){
         System.out.println("Ruff! Ruff!");
      }else{
         System.out.println("Yip! Yip!");
      }
   }
}

class DogTestDrive {
   public static void main (String[] args){
      Dog one = new Dog();
      one.size = 70;
      Dog two = new Dog();
      two.size = 8;
      Dog three = new Dog();
      three.size = 35;
                
      one.bark();
      two.bark();
      three.bark();
   }
}
}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A.
class XCopy {
   public static void main(String [] args) {
      int orig = 42;
      XCopy x = new XCopy(); 
      int y = x.go(orig); 
      System.out.println(orig + " " + y); 
}

int go(int arg) {
        arg = arg * 2; 
        return arg;
 }
}

---출력: 42 84

B.
class Clock {
   String time;
        
   void setTime(String t){
      time = t;
   }
        
   String getTime() { //time의 유형은 String이므로 getTime의 반환형을 바꿈
      return time;
   }
}

class ClockTestDrive {
   public static void main(String[] args){
                
      Clock c = new Clock();
                
      c.setTime("1245");
      String tod = c.getTime();
      System.out.println("time: " + tod);
   }
}
}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란? 최근에 등장한 소프트웨어 개발 방법론중에 하나이다. 가장 큰 장점은 막판에 스펙이 변경되는 일이 있어도 고객이 원하는 것을 고객이 원하는 기한에 맞춰서 제공할 수 있다는 점이다. 다음과 같은 규칙이 있다.
~조금씩, 하지만 자주 발표한다.
~사이클을 반복해서 돌리면서 개발한다.
~스펙에 없는 것은 절대 집어넣지 않는다.
~테스트 코드를 먼저 만든다.
~야근 하지 말고 항상 정규 일과 시간에만 작업한다.
~기회가 생기는 족족 언제 어디서든 코드를 개선한다.
~모든 테스트를 통과하기 전에는 어떤 것도 발표하지 않는다.
~조금씩 발표하는 것은 기반으로 하여 현실적인 작업 계획을 만든다.
~모든 일을 단순하게 처리한다.
~두 명씩 팀을 편성, 모든 사람이 대부분의 코드를 알 수 있도록 돌아가면서 작업한다.
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{
public class SimpleDotComTestDrive {
   public static void main (String[] args){
      SimpleDotCom dot = new SimpleDotCom();
      int[] locations = {2,3,4};  //맞춰야 하는 셀
      dot.setLocationCells(locations);
      String userGuess = "2";  //추측값
      String result = dot.checkYourself(userGuess);
        }
}

public class SimpleDotCom {
   int[] locationCells;  //맞춰야 하는 셀
   int numOfHits = 0;   //맞춘 것의 개수
        
   public void setLocationCells(int[] locs){ 
      locationCells = locs;
   }
        
   public String checkYourself(String stringGuess){
      int guess = Integer.parseInt(stringGuess); //String형인 stringGuess을 int형으로 변환하여 guess에 저장
      String result = "miss";
      for(int i=0; i<locationCells.length; i++){
         if(guess==locationCells[i]){
            result = "hit";  //추측한 게 맞춰야 하는 셀 중 있으면 hit이 result에 저장
            numOfHits++;    //맞추면 맞춘 개수 +1
            break;
         }
   }
   if(numOfHits == locationCells.length){
      result = "kill";    //다 맞추면 result에 kill이 저장된다.
   }
   System.out.println(result); //하나도 못 맞추면 miss, 한개라도 맞추면 hit, 다 맞추면 kill이 출력
   return result;
  }
}

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{
public class SimpleDotCom {

        int[] locationCells; // locationCells의 배열을 만들어준다,
        int numOfHits = 0; // numOfHits의 값을 초기화 해준다.
        
        public void setLocationCells(int[] locs) {
                locationCells = locs;
        }
        
        public String checkYourself(String stringGuess) {
                int guess = Integer.parseInt(stringGuess);
                String result = "miss"; // 예상값이 다를때  "miss" 출력
                for(int i = 0; i < locationCells.length; i++) {
                   if(guess == locationCells[i]&&hitCells[i]!=true){
                      result = "hit"; // 이미 맞춘 셀이 중복되지 않게 따로 저장해 놓는다.
                      numOfHits++;
                      hitCells[i] = true; 
                      break;
                   }
                }
                
                if(numOfHits == locationCells.length) {
                        result = "kill"; // 모든 수를 clear 했을때 kill 출력
                }
                System.out.println(result);
                return result;
                }
}


}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{
public class SimpleDotCom {

        int[] locationCells; // locationCells의 배열을 만들어준다,
        int numOfHits = 0; // numOfHits의 값을 초기화 해준다.
        
        public void setLocationCells(int[] locs) {
                locationCells = locs;
        }
        
        public String checkYourself(String stringGuess) {
                int guess = Integer.parseInt(stringGuess);
                String result = "miss"; // 예상값이 다를때  "miss" 출력
                for(int i = 0; i < locationCells.length; i++) {
                  for(int i = 0; i < locationCells.length; i++){
                     if(guess == locationCells[i]&&locationCells[i]!=-1)
                     {
                        result = "hit";
                        numOfHits++;
                        locationCells[i]=-1; // 원래 배열을 그냥 사용하면서 맞춘 셀의 값은 모두 -1로 바꾼다.
                        break;                   
                     }
                  }
                }
                if(numOfHits == locationCells.length) {
                        result = "kill"; // 모든 수를 clear 했을때 kill 출력
                }
                System.out.println(result);
                return result;
                }
}


}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{
import java.util.ArrayList;

public class DotCom {

   private ArrayList<String> locationCells; // 배열 대신 string이 들어가는 ArrayList를 사용한다.
   public void setLocationCells(ArrayList<String> loc) {
      locationCells = loc;
   }
        
   public String checkYourSelf(String userInput) { // 새로 바뀐 인자명
      String result = "miss";
                
      int index = locationCells.indexOf(userInput); // 사용자가 추측한 위치가 ArrayList에 들어있는지 확인한다. 들어있으면 인덱스 번호가, 그렇지 않으면 -1이 리턴된다.
                
      if(index >= 0) { // 인덱스가 0 이상이면 사용자가 추측한 위치가 목록에 들어있는 것이므로 제거한다.
         locationCells.remove(index);
                        
         if(locationCells.isEmpty()) { 
            result = "kill";
         } else {
            result = "hit";
           }
         }
        
        return result;
      }
   }
}
}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{
import java.util.*;

public class DotCom{
   private ArrayList<String> locationCells;
   private String name;

   public void setLocationCells(ArrayList loc){
      locationCells = loc;
   }

   public void setName(String n){
      name = n;
   }

   public String checkYourself(String userInput){
      String status = "miss";
      int index = locationCells.indexOf(userInput);
      if(index >= 0){
         locationCells.remove(index);
         if(locationCells.isEmpty()){
            status = "kill";
            System.out.println("Ouch! You sunk" + name + " :( ");
         }else{
             status = "hit";
          }
         }       
         return status;
      }
   }  
}

import java.util.*;
import java.io.*;
public class DotComBust{

   private GameHelper helper = new GameHelper();
   private ArrayList<DotCom> dotComsList = new ArrayList<DotCom>();
   private int numOfGuesses = 0;

   private void setUpGame(){
      DotCom one = new DotCom();
      one.setName("Pets.com");
      DotCom two = new DotCom();
      two.setName("eToys.com");
      DotCom three = new DotCom();
      three.setName("Go2.com");
                
      dotComsList.add(one);
      dotComsList.add(two);
      dotComsList.add(three);

      System.out.println("Your goal is to sink three dot coms.");
      System.out.println("Pets.com, eToys.com, Go2.com");
      System.out.println("Try to sink them all in the fewest number of guesses");

      for(DotCom dotComToSet : dotComsList){
         ArrayList<String> newLocation = helper.placeDotCom(3);
         dotComToSet.setLocationCells(newLocation);
      }
   }

   private void startPlaying(){
      while(!dotComsList.isEmpty()){
         String userGuess = helper.getUserInput("Enter a guess");
         checkUserGuess(userGuess);
      }
      finishGame();
   }

   private void checkUserGuess(String userGuess){
      numOfGuesses++;
      String result = "miss";

      for(DotCom dotComToTest : dotComsList){
         result = dotComToTest.checkYourself(userGuess);
         if(result.equals("hit")){
            break;
         }
         if(result.equals("kill")){
            dotComsList.remove(dotComToTest);
            break;
         }
      }       
      System.out.println(result);
   }

   private void finishGame(){
      System.out.println("All Dot Coms are dead! Your stock is now worthless.");
      if(numOfGuesses <= 18){
         System.out.println("It only took you" + numOfGuesses + "guesses.");
         System.out.println("You got out before your options sank.");
      } else{
           System.out.println("Took you long enough." + numOfGuesses + "guesses.");
           System.out.println("Fish are dancing with your options.");
        }
      }
   
   public static void main(String[] args){
      DotComBust game = new DotComBust();
      game.setUpGame();
      game.startPlaying();
   }

   public class GameHelper{
      private static final String alphabet = "abcdefg";
      private int gridLength = 7;
      private int gridSize = 49;
      private int[] grid = new int[gridSize];
      private int comCount = 0;

      public String getUserInput(String prompt){
         String inputLine = null;
         System.out.print(prompt + " ");
         try{
            BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
            inputLine = is.readLine();
            if(inputLine.length() == 0) 
               return null;
            } catch(IOException e) {
         System.out.println("IOException: " + e);
        }
      return inputLine.toLowerCase();
                        }
                        
      public ArrayList<String> placeDotCom(int comSize){
         ArrayList<String> alphaCells = new ArrayList<String>();
         String temp = null;
         int[] coords = new int[comSize];
         int attempts = 0;
         boolean success = false;
         int location = 0;

         comCount++;
         int incr = 1;
         if((comCount % 2)== 1){
            incr = gridLength;
         }

         while(!success&attempts++ < 200){
            location = (int) (Math.random() * gridSize);
            //System.out.print("try" + location);
            int x = 0;
            success = true;
            while(success && x < comSize){
               if(grid[location] == 0){
                  coords[x++] = location;
                  location += incr;
                  if(location >= gridSize){
                     success = false;
                  }
                  if(x>0 & (location % gridLength == 0)){
                     success = false;
                  }
                } else{
                  //System.out.print("used" + location);
                    success = false;
                  }
                }
            }
            int x = 0;
            int row = 0;
            int column = 0;
            //System.out.println("\n");
            while(x<comSize){
               grid[coords[x]] = 1;
               row = (int) (coords[x] / gridLength);
               column = coords[x] % gridLength;
               temp = String.valueOf(alphabet.charAt(column));

               alphaCells.add(temp.concat(Integer.toString(row)));
               x++;
              //System.out.print(" coord " + x + " = " + alphaCells.get(x-1));
            }                            
            //System.out.println("\n?");

             return alphaCells;
         }
   }

}
}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:
 * 다형성:

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}