#summary 수업중 실습하는 내용을 올리게 되는 실습페이지입니다. 페이지의 내용은 각 학생에 의해서 관리됩니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{3 bottles of beer on the wall
3 bottles of beer on the wall
3 bottles of beer.
Take one down.
Pass it arround.
2 bottles of beer on the wall
2 bottles of beer on the wall
2 bottles of beer.
Take one down.
Pass it arround.
1 bottles of beer on the wall
1 bottle of beer on the wall
1 bottle of beer.
Take one down.
Pass it arround.
No more bottles of beer on the wall

원래 출력 결과입니다.

public class BeerSong2 {
	public static void main(String[] args) {
		int beerNum = 99;
		String word = "bottles";		//복수형
		System.out.println(beerNum + " " + word + " of beer on the wall");
		// 문제는 99병일 때를 제외하고 98 bottles of beer on the wall 이 문장이 두 번씩 반복되는 것입니다.
		//그래서 while문 밖으로 바로 위의 문장을 빼냈습니다. 그러면 if문이 실행될 때만 한 번 실행되므로
		// 위의 문장이 두 번 반복되지 않습니다.	
		while (beerNum > 0) {

			System.out.println(beerNum + " " + word + " of beer.");
			System.out.println("Take one down.");
			System.out.println("Pass it arround.");
			beerNum = beerNum - 1;

			if (beerNum == 1) {
				word = "bottle";			//단수형(1병인 경우)
			}
			// 1병일 때도 bottles가 출력되었습니다. 따라서 bottle가 출력되게 해주어야 되는데,
			// 바로 위 문장의 위치를 바꾸어 주었습니다. 그러면 beernum이 1일 때에는 word가 bottle로 바뀌게 되어
			// 제대로 출력됩니다.
			if (beerNum > 0) {
				System.out.println(beerNum + " " + word + " of beer on the wall");
			}	else {
				System.out.println("No more bottles of beer on the wall");
			}
		}
	}
}

수정된 출력 결과입니다.

4 bottles of beer on the wall
4 bottles of beer.
Take one down.
Pass it arround.
3 bottles of beer on the wall
3 bottles of beer.
Take one down.
Pass it arround.
2 bottles of beer on the wall
2 bottles of beer.
Take one down.
Pass it arround.
1 bottle of beer on the wall
1 bottle of beer.
Take one down.
Pass it arround.
No more bottles of beer on the wal
}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{

public class PhraseOMatic {
	public static void main(String[] args) {
		String[] wordListOne = {"잘생기고", "못생기고", "멋지고", "더럽고", "추하고", "키가 작고", "키가 크고", "뚱뚱하고", "홀쭉하고", "날씬하고", "어깨가 좁고"};

		String[] wordListTwo = {"어리석은", "지저분한", "깔끔한", "남자다운", "무식한", "용감한", "겁많은", "시니컬한", "유치한", "낭창한", "게으른", "똑똑한"};

		String[] wordListThree = {"사자", "원숭이", "꼴뚜기", "멍게", "기린", "명태", "박쥐", "토끼", "오리", "타조", "고양이", "참새", "독수리", "호랑이"};

		int oneLength = wordListOne.length;
		int twoLength = wordListTwo.length;
		int threeLength = wordListThree.length;

		int rand1 = (int) (Math.random() * oneLength);
		int rand2 = (int) (Math.random() * twoLength);
		int rand3 = (int) (Math.random() * threeLength);

		String phrase = wordListOne[rand1] + " " + wordListTwo[rand2] + " " + wordListThree[rand3];

		System.out.println("My nickname is " + phrase);
	}
}

}

*52p 집중토론* _요약_

 * 자바 가상 머신: 프로그램을 실행시킴, 원래 들어가야 할 것이 아닌 다른 유형의 값이 들어갈 때는 ClassCast Exception을 발생시킴, 바이트코드가 만들어진 다음 바이트코드가 실행되기 전까지 다른 누군가가 그걸 건드리지 않았는지 확인하는 작업도 함.
 * 컴파일러: 소스 코드를 바이트코드로 해석하는 것, 데이터 유형 위반을 방지, 비공개 메소드를 호출하려고 한다거나 절대 바꿔서는 안되는 메소드를 변경하려는 것과 같은 접근 위반을 방지하는 것, 다른 클래스의 핵심적인 내용에 접근하는 코드와 같이 사람들이 함부로 보면 안 되는 코드를 건드리려는 등의 일을 방지하는 것을 함.

*55p 컴파일러가 되어봅시다* _구현후 주석달기_
public class Exercise1 {
	public static void main(String[] args) {
		int x = 1;
		while (x < 10) { // x가 10보다 작은 동안 반복해서 실행.
			x = x + 1; // x를 1씩 키우는 것.
			if (x > 3) {
				System.out.println("big x"); // x가 3보다 클 때부터 while이 돌아가는 동안 big x를 출력.
			}
		}
	}
}

class Foo {
	public static void main(String [] args) {
		int x = 5;
		while (x > 1) {
			x = x - 1;
			if (x > 3) {
				System.out.println("small x");
			}
		}
	}
}

public class Exercise2 {
	public static void main(String[] args) {
		int x = 5;
		while (x > 1) {
			x= x - 1;
			if (x < 3) {
				System.out.println("small x");
			}
		}
	}
}

= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체에서 자신에 대해서 아는 것, 객체의 상태를 나타내며 그  유형에 속하는 각 객체마다 값이 다르다.
 * 메소드: 객체에서 자신이 하는 것, 그 데이터에 대해 어떤일을 처리하는 것.
 * 클래스: 객체를 만들기 위한 청사진, 가상 머신에 그 유형의 객체를 만드는 방법을 알려주는 역할을 한다.
 * 테스트용 클래스: 새로운 클래스 유형의 객체에 들어 있는 메소드와 변수를 테스트해보는 것.
 

*68p Television* _채워넣기_

 * 인스턴스 변수: channelNumber
 * 메소드: GetChannel(), SetChannel()


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_
public class GuessGame {
	Player p1;
	Player p2;
	Player p3;
	Player p4;	// player객체를 저장하기 위한 변수들

	public void startGame() {
		p1 = new Player();
		p2 = new Player();
		p3 = new Player();
		p4 = new Player();	//player객체 네 개를 생성하고 각각을 player인스턴스 변수에 대입
		
		int guessp1 = 0;
		int guessp2 = 0;
		int guessp3 = 0;
		int guessp4 = 0;	//player객체 네 개에서 찍은 숫자를 저장하기 위해 변수를 선언

		boolean p1isRight = false;
		boolean p2isRight = false;
		boolean p3isRight = false;
		boolean p4isRight = false;	// 네 선수가 찍은 숫자가 맞는지 여부를 저장하기 위해서 변수를 선언

		int targetNumber = (int) (Math.random() * 10);	// 난수 생성기, 선수들이 맞출 숫자 만들기
		System.out.println("0 이상 9 이하의 숫자를 맞춰보세요.");

		while (true) {
			System.out.println("맞춰야 할 숫자는 " + targetNumber + "입니다.");

			p1.guess();
			p2.guess();
			p3.guess();
			p4.guess();	// 각 선수별로 guess메소드를 호출

			guessp1 = p1.number;
			System.out.println("1번 선수가 찍은 숫자: " + guessp1);

			guessp2 = p2.number;
			System.out.println("2번 선수가 찍은 숫자: " + guessp2);

			guessp3 = p3.number;
			System.out.println("3번 선수가 찍은 숫자: " + guessp3);

			guessp4 = p4.number;
			System.out.println("4번 선수가 찍은 숫자: " + guessp4);

		// 각 객체의 인스턴스 변수에 접근하여 각 선수가 찍은 숫자 (guess() 메소드를 실행시킨 결과)를 알아냄

			if (guessp1 == targetNumber) {
				p1isRight = true;
			}

			if (guessp2 == targetNumber) {
				p2isRight = true;
			}

			if (guessp3 == targetNumber) {
				p3isRight = true;
			}

			if (guessp4 == targetNumber) {
				p4isRight = true;
			}

		// 각 선수가 찍은 숫자 중에서 맞춘 숫자가 있는지를 확인, 맞춘 선수가 있으면 그 선수에 해당하는 변수를 참으로 설정

			if (p1isRight || p2isRight || p3isRight || p4isRight) {
				System.out.println("맞춘 선수가 있습니다.");
				System.out.println("1번 선수: " + p1isRight);
				System.out.println("2번 선수: " + p2isRight);
				System.out.println("3번 선수: " + p3isRight);
				System.out.println("4번 선수: " + p4isRight);
				System.out.println("게임 끝.");
				break;	// 게임이 끝났으므로 break문으로 순환문을 빠져나감
			}	else {
				// 아직 아무도 못맞췄기 때문에 계속 해야 한다.
				System.out.println("다시 시도해야 합니다.");
			}	// if/else부분 끝
		}	// 순환문 끝
	}	// 메소드 끝
}	//클래스 끝

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

class TapeDeck {
	boolean canRecord = false;

	void playTape() {
		System.out.println("tape playing");
	}

	void recordTape() {
		System.out.println("tape recording");
	}
}

class TapeDeckTestDrive {
	public static void main(String[] args) {
		TapeDeck t = new TapeDeck();	// 새로운 테이프를 만든다.
		t.canRecord = true;	// 녹음가능
		t.playTape();	// 테이프 플레이

		if (t.canRecord == true) {	// 테이프가 녹음가능하므로
			t.recordTape();	// 테이프 녹음중
		}
	}
}


= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수:
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{

}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?:
 * 문제가 된 부분은 어딘가요?:

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:
 * 게터와 세터:
 * 인스턴스 변수 vs 지역 변수:
 
*107p Dog* _실행_

{{{

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:
 * 다형성:

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}