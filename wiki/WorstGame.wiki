#summary 2011190709 이종화


= Introduction =

용자의 마왕을 잡기 위한 최후의 발악을 간단하게 만들어 봤습니다.

= Background =

항상 만들고 싶었던 이상적인 게임을 만들기 위한 준비단계

= Details =

여러 방들을 뒤져가면서 방안에 있는 몬스터와 싸워가면서 마왕을 찾는 게임입니다.

save기능 없음

메인페이지 및, 기본 시스템은 합작으로 구성.
그외 세부적인 요소 및 스토리는 각자 구성.

= Using the Code=
{{{
import java.util.*;

public class Maze {
 
    private int location[1][1];
    Maze_go temp = new Maze_go();

    public int GetLocation(int userInput1, int userInput2) {
    return location[userInput1][userInput2];
    }

    public void Way(int ex1, int ex2, int n1, int n2, int ,3, int n4) {
    
    if(n1 == 0) 
    location[1][1] = temp.rooms[ex1][ex2];
    if(n2 == 1)
    location[1][1] = temp.rooms[ex1][ex2];
    if(n3 == 2)
    location[1][1] = temp.rooms[ex1][ex2];
    if(n4 == 3)
    location[1][1] = temp.rooms[ex1][ex2];
    }

    public void Way_Make(int ex1, int ex2, int ex1_1, int ex2_2)  {



   }
}

class Character  {
  private int hp;
   private int atk;
  private int def;
 
   public status(int hp_1,int atk_1, int def_1) {
   hp = hp_1;
   atk = atk_1;
   def = def_1;
   }

  public call_status(int hp_2, int atk_2, int def_2) {
  hp_2 = hp;
  atk_2 = atk;
  def_2 = def;
  }
}
public class Maze_Go {
   private int way;
   private rooms[10][10];
   private int ex1, ex2, num, count;

 
    Maze mazing = new Maze();
    mazing.location[0][0] = rooms[0][0];

    public void Maze_Make() {
    num = (Math.random () * 30 + 15);
        while(count < num) {

        if(num % (ex1 * ex2) == 0) 
            mazing.Way_Make(ex1,ex2,ex2,ex1 0, 1, 2, -1);   

        if(((num * (ex1 + ex2)) % 2 == 0) &&ex1 <= 6 && ex2 > 1)
            mazing.Way_Make(ex1,ex2, ex1+4, ex2-1, -1, 1, -1, 3); 
}

public class Monster{



}

public class Battle{


}

public class Story{


}

class Boss extends Monster{

}

public class TestMazeGame {



}
}}}