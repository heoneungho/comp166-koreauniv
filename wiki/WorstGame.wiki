#summary 2011190709 이종화


= Introduction =

용자의 마왕을 잡기 위한 최후의 발악을 간단하게 만들어 봤습니다.
에서 그냥 미로탈출+잡다한 게임으로 바꾸었습니다.

= Background =

항상 만들고 싶었던 이상적인 게임을 만들기 위한 준비단계

= Details =

여러 방들을 뒤져가면서 방안에 있는 몬스터와 싸워가면서 마왕을 찾는 게임입니다.
에서 미로탈출이 궁극적인 목표입니다.

save기능 없음

메인페이지 및, 기본 시스템은 합작으로 구성.
그외 세부적인 요소 및 스토리는 각자 구성.

= Using the Code=
{{{

public class Maze {
	public char rooms[][] = 
		{	{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
			{2,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,'M',2},
			{2,2,2,1,2,1,2,1,2,2,2,2,2,2,2,2,2,2,1,2,2,1,2},
			{2,2,2,1,2,1,2,1,1,1,1,1,1,2,1,2,2,2,1,2,2,1,2},
			{2,1,1,'M',2,1,1,2,2,2,2,2,1,2,1,1,1,2,1,2,2,1,2},
			{2,1,2,1,2,2,1,1,1,1,1,2,1,2,1,2,1,2,1,2,2,2,2},
			{2,1,2,1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,'M',1,1,1,2},
			{2,2,2,1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,2,1,2},
			{2,2,2,1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,2,1,2},
			{2,2,2,1,1,'M',1,2,1,2,1,1,1,2,1,2,1,2,1,2,2,1,2},
			{2,2,2,2,2,1,2,2,1,2,2,2,2,2,1,2,2,2,1,2,2,1,2},
			{2,1,'T',1,1,1,2,2,1,1,1,1,1,1,1,2,2,2,1,2,2,1,2},
			{2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,1,2},
			{2,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,2,'B','G'},
			{2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
			{2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2},
			{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}};
		

		
	   public int locationA = 1;
	   public int locationB = 1;
	   
	  

	   public void Maze_limit() {
	  
	                 System.out.println(rooms[locationA-1][locationB-1]+ " " +rooms[locationA][locationB-1]+ " " +rooms[locationA+1][locationB-1]);
	                 System.out.println(rooms[locationA-1][locationB]+ " P " +rooms[locationA+1][locationB]);
	                 System.out.println(rooms[locationA-1][locationB+1]+ " " +rooms[locationA][locationB+1]+ " " +rooms[locationA+1][locationB+1]);
	            										} 
	         							

	   public void Maze_alter(char userinput) {
	
		   if(userinput == 'a')
			   		locationA--;
		   	if(userinput == 's')
		   		  	locationB++;
		   	if(userinput == 'd')
		   			locationA++;
		   	if(userinput == 'w')
		   			locationB--;
		   	
		   	if(rooms[locationA][locationB] == 43)	{
		   			System.out.println("Error, you cannot go there");
		   					if(userinput == 'a')
		   						locationA++;
		   					if(userinput == 's')
		   			   		  	locationB--;
		   					if(userinput == 'd')
		   			   			locationA--;
		   					if(userinput == 'w')
		   			   			locationB++;
		   	}
		   
	   			}

}
import java.io.IOException;

public class MazTestDrive {
	public static char userinput;
	public static void main(String [] args) throws IOException	{
		Maze mazing = new Maze();
		Character player1 = new Character();
		Boss player2 = new Boss();
		 int tempA = 0;
		 int tempB = 0;
			
			for(tempA = 0; tempA < 17; tempA++)	{
				for(tempB= 0;tempB < 23; tempB++)	{
					if(mazing.rooms[tempA][tempB] == 1)
						mazing.rooms[tempA][tempB] = 32;
					if(mazing.rooms[tempA][tempB] == 2)
						mazing.rooms[tempA][tempB] =43;
				}
			}
			
			System.out.println("This is Maze game. You have to figure out how to get out of here");
			System.out.println("Empty space is the path, and '+' is the wall, and you are 'P'. You cannot go through the wall");
   while(mazing.rooms[mazing.locationA][mazing.locationB] != 71)	{
	   System.out.println("_____________________________________________________________________________");
	   mazing.Maze_limit();
	   System.out.println("if you want to go up, press 'w', down 's', left 'a', and right 'd'");
	   userinput = (char)System.in.read();
	   System.in.read();
	   System.in.read();
	   mazing.Maze_alter(userinput);
	   player1.Monster();
	   player2.BossMon();
	   player1.Trapcard();
   	}
   System.out.println("Congratulations!! You have cleared the game");
}

}

public class Character {

	Maze characterize = new Maze();
	Battle caller = new Battle();
	int counter = 0;
	int level;
	
	public void Monster() {
		level = 10;
		if(characterize.rooms[characterize.locationA][characterize.locationB] == 'M') {
			caller.callBattle(level);
		}
	}
	
	public void Trapcard(){
		if((characterize.rooms[characterize.locationA][characterize.locationB] == 'T') && (counter == 0))	{
			System.out.println("You fall in to the trap!! You go to the start line.");
			characterize.locationA = 1;
			characterize.locationB = 1;
			counter++;
		}
	}
}
public class Battle {

	
	public void callBattle(int level)	{
		
	}
}
public class Boss extends Character {
	public void BossMon()	{
		level = 30;
		if(characterize.rooms[characterize.locationA][characterize.locationB] == 'B') {
			caller.callBattle(level);
			
		}
	}
}


//이제 소리도 넣고 다른 여러가지 기능을 넣을겁니다. 일단 텍스트상에서의 미로는 구현이 완료되었습니다.
}}}