#summary 2011190709 이종화


= Introduction =

용자의 마왕을 잡기 위한 최후의 발악을 간단하게 만들어 봤습니다.
에서 그냥 미로탈출+잡다한 게임으로 바꾸었습니다.

= Background =

항상 만들고 싶었던 이상적인 게임을 만들기 위한 준비단계

= Details =

여러 방들을 뒤져가면서 방안에 있는 몬스터와 싸워가면서 마왕을 찾는 게임입니다.
에서 미로탈출이 궁극적인 목표입니다.

save기능 없음

= Using the Code=
{{{


public class Maze {
	public char rooms[][] = 
		{	{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
			{2,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,'M',2},
			{2,2,2,1,2,1,2,1,2,2,2,2,2,2,2,2,2,2,1,2,2,1,2},
			{2,2,2,1,2,1,2,1,1,1,1,1,1,2,1,2,2,2,1,2,2,1,2},
			{2,1,1,'M',2,1,1,2,2,2,2,2,1,2,1,1,1,2,1,2,2,1,2},
			{2,1,2,1,2,2,1,1,1,1,1,2,1,2,1,2,1,2,1,2,2,2,2},
			{2,1,2,1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,'M',1,1,1,2},
			{2,2,2,1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,2,1,2},
			{2,2,2,1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,2,1,2},
			{2,2,2,1,1,'M',1,2,1,2,1,1,1,2,1,2,1,2,1,2,2,1,2},
			{2,2,2,2,2,1,2,2,1,2,2,2,2,2,1,2,2,2,1,2,2,1,2},
			{2,1,'T',1,1,1,2,2,1,1,1,1,1,1,1,2,2,2,1,2,2,1,2},
			{2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,1,2},
			{2,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,2,'B','G'},
			{2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
			{2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2},
			{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}};
		

		
	   public int locationA = 1;
	   public int locationB = 1;
	   
	  

	   public void Maze_limit() {
	  
	                 System.out.println(rooms[locationA-1][locationB-1]+ " " +rooms[locationA][locationB-1]+ " " +rooms[locationA+1][locationB-1]);
	                 System.out.println(rooms[locationA-1][locationB]+ " P " +rooms[locationA+1][locationB]);
	                 System.out.println(rooms[locationA-1][locationB+1]+ " " +rooms[locationA][locationB+1]+ " " +rooms[locationA+1][locationB+1]);
	            										} 
	         							

	   public void Maze_alter(char userinput) {
	
		   if(userinput == 'a')
			   		locationA--;
		   	if(userinput == 's')
		   		  	locationB++;
		   	if(userinput == 'd')
		   			locationA++;
		   	if(userinput == 'w')
		   			locationB--;
		   	
		   	if(rooms[locationA][locationB] == 43)	{
		   			System.out.println("Error, you cannot go there");
		   					if(userinput == 'a')
		   						locationA++;
		   					if(userinput == 's')
		   			   		  	locationB--;
		   					if(userinput == 'd')
		   			   			locationA--;
		   					if(userinput == 'w')
		   			   			locationB++;
		   	}
		   
	   			}
	   public void Maze_reseter()	{
		   locationA = 1;
		   locationB = 1;
	   }

}

import java.io.IOException;


public class Character {

	Battle caller = new Battle();
	int level;
	
	public void Monster() throws IOException {
		level = 10;
			caller.callBattle(level);
	}
	
	public void Trapcard(){
			System.out.println("You fall in to the trap!! You go to the start line.");
	}
}

import java.io.IOException;

public class Battle {
	public int hp_p, atk_p, def_p, cri_p;
	int hp_m, atk_m, def_m, cri_m;
	int playerC, tmp;
	public int potionCount = 10;
	Maze reseter = new Maze();
	
	
	public void callBattle(int level) throws IOException	{
		System.out.println("You've encountered the Moster!!! You have to fight it off to keep on going!!");
		hp_p = 1000;
		atk_p = 150 + (int)(Math.random() * 20 +1);
		def_p = 70;
		hp_m = 70*level+ (int)(Math.random() * 20 +1);
		atk_m = 12*level+ (int)(Math.random() * 20 +1);
		def_m = 5*level;
		while(true)	{
			System.out.println("________________________________________________________________________________________");
			System.out.println("Your hp :\nhp_p = " +hp_p+"\n");
			System.out.println("Monster's hp :\nhp_m = " +hp_m+"\n");
			System.out.println("Choose your behavior\nType the number of behavior you want to do\n\n\n1. Attack\n2.Defence Position. \n3. Drink Potion\n");
			playerC = (int)System.in.read();
			System.in.read();
			System.in.read();
			Battlepage(playerC ,level);
			System.out.println("________________________________________________________________________________________");
			if(hp_p <=0)
				break;;
			if(hp_m <=0)
				break;
		}
	}
	
	public void Battlepage(int playerC, int level) {
		if(playerC == 49)	{
			cri_p = 100 *(int)Math.random();
			if(cri_p >= 70)	{
				System.out.println("Critical attack!! You dealt '"+(atk_p*2 - def_m)+"' damage to the monster\n");
				hp_m = hp_m - (atk_p *2 - def_m);
			}
			else {
			System.out.println("You chose to attack! You dealt '"+(atk_p - def_m)+"' damage to the monster\n");
			hp_m = hp_m - (atk_p - def_m);
			}
		}
		if(playerC == 50)	{
			def_p = 70;
			System.out.println("Your defence duobles!");
			def_p *=2;
		}
		if(playerC == 51)	{
			if(potionCount > 0)	{
			System.out.println("You drank potion and you recovered 200 hp!!");
			potionCount--;
			hp_p += 200;
			if(hp_p >1000)
				hp_p = 1000;
			}
			else
				System.out.println("You are out of potions");
		}
		
		System.out.println("Now it's Monster's turn to attack!\n");
		cri_m = 8* level *(int)Math.random();
		if(cri_m >= 70)	{
			System.out.println("Critical attack!! Monster dealt '"+(atk_m*2 - def_p)+"' damage to you\n");
			if(atk_m >= def_p)
			hp_p = hp_p - (atk_m *2 - def_p);
			else
			System.out.println("Defence of player is great! No damage dealt to player\n");
						}
		else	{
			System.out.println("Monster chose to attack! Monster dealt '"+(atk_m - def_p)+"' damage to you\n");
			if(atk_m >= def_p)
			hp_p = hp_p - (atk_m - def_p);
			else
				System.out.println("Defence of player is great! No damage dealt to player\n");
				}
		if(hp_m<0)	{
			System.out.println("You won the battle!! Please proceed\n");
			reseter.rooms[reseter.locationA][reseter.locationB] = 32;
		}
		if(hp_p<0)
			System.out.println("You lost the battle!! Your game will be reseted\n");
		}
}


import java.io.IOException;


public class Boss extends Character {
	public void BossMon() throws IOException	{
		level = 25;
			caller.callBattle(level);
	}
}

import java.io.IOException;

public class MazTestDrive {
	public static char userinput;
	public static void main(String [] args) throws IOException	{
		Maze mazing = new Maze();
		Character player1 = new Character();
		Battle battler = new Battle();
		Boss player2 = new Boss();
		 int tempA = 0;
		 int tempB = 0;
			
			for(tempA = 0; tempA < 17; tempA++)	{
				for(tempB= 0;tempB < 23; tempB++)	{
					if(mazing.rooms[tempA][tempB] == 1)
						mazing.rooms[tempA][tempB] = 32;
					if(mazing.rooms[tempA][tempB] == 2)
						mazing.rooms[tempA][tempB] =43;
				}
			}
			
			System.out.println("This is Maze game. You have to figure out how to get out of here");
			System.out.println("Empty space is the path, and '+' is the wall, and you are 'P'. You cannot go through the wall");
   while(mazing.rooms[mazing.locationA][mazing.locationB] != 71)	{
	   System.out.println("_____________________________________________________________________________");
	   mazing.Maze_limit();
	   System.out.println("if you want to go up, press 'w', down 's', left 'a', and right 'd'");
	   userinput = (char)System.in.read();
	   System.in.read();
	   System.in.read();
	   mazing.Maze_alter(userinput);
	   if(mazing.rooms[mazing.locationA][mazing.locationB]== 77)	{
	   player1.Monster();
	   if(battler.hp_m <0)
	   mazing.rooms[mazing.locationA][mazing.locationB]= 32;
	   if(battler.hp_p <= 0)
		   mazing.Maze_reseter();
	   }
	   if(mazing.rooms[mazing.locationA][mazing.locationB]== 66 )	{
	   player2.BossMon();
	   if(battler.hp_m <0)
	   mazing.rooms[mazing.locationA][mazing.locationB]= 32;
	   if(battler.hp_p <= 0)
		   mazing.Maze_reseter();
	   }
	   if(mazing.rooms[mazing.locationA][mazing.locationB]== 84 )	{
	   player1.Trapcard();
	   mazing.Maze_reseter();
	   }
   	}
   System.out.println("Congratulations!! You have cleared the game");
}

}



//이제 소리도 넣고 다른 여러가지 기능을 넣을겁니다. 일단 텍스트상에서의 미로는 구현이 완료되었습니다.
}}}