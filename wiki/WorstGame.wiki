#summary 2011190709 이종화


= Introduction =

용자의 마왕을 잡기 위한 최후의 발악을 간단하게 만들어 봤습니다.

= Background =

항상 만들고 싶었던 이상적인 게임을 만들기 위한 준비단계

= Details =

여러 방들을 뒤져가면서 방안에 있는 몬스터와 싸워가면서 마왕을 찾는 게임입니다.

save기능 없음

메인페이지 및, 기본 시스템은 합작으로 구성.
그외 세부적인 요소 및 스토리는 각자 구성.

= Using the Code=
{{{
import java.util.*;

public class Maze {
 
    private int location[][];
    location = new int[10][10];
    Maze_go temp = new Maze_go();

    public int GetLocation(int userInput1, int userInput2) {
    return location[userInput1][userInput2];
    }

    public void Way_Make(int ex1, int ex2, int ex1_1, int ex2_2, int n1, int n2, int n3, int n4)  {
//rooms[ex1][ex2] 에서 rooms[ex1_1][ex2_2] 로 통하는 길을 만드는 함수

    if(n1 == 0) {
    temp.rooms[ex1][ex2]
    }
    if(n2 == 1) {
    temp.rooms[ex1][ex2]
    }
    if(n3 == 2) {
    temp.rooms[ex1][ex2]
    }    
    if(n4 == 3) {
    temp.rooms[ex1][ex2]
    }

   }
}

class Character  {
  private int hp;
   private int atk;
  private int def;
 
   public status(int hp_1,int atk_1, int def_1) {
   hp = hp_1;
   atk = atk_1;
   def = def_1;
   }

  public call_status(int hp_2, int atk_2, int def_2) {
  hp_2 = hp;
  atk_2 = atk;
  def_2 = def;
  }
}
public class Maze_Go {
   private int way;
   private int rooms[][];
   private int num;
 
    Maze mazing = new Maze();
    rooms = new int[10][10];
    mazing.location[0][0] = rooms[0][0];

    public void Maze_Make() {
    num = (Math.random () * 70 + 30);
        for(int ex1 = 0; ex1 < 10; ex1++)
             for(int ex2 = 0;ex2 < 10;ex2++)    {

        if(num % (ex1 * ex2) == 0) 
            mazing.Way_Make(ex1,ex2,ex2,ex1 0, 1, 2, -1);   

        if(((num * (ex1 + ex2)) % 2 == 0) &&ex1 <= 6 && ex2 > 1)
            mazing.Way_Make(ex1,ex2, ex1+4, ex2-1, -1, 1, -1, 3); 

        if//will add more
    }

public class Monster{



}

public class Battle{


}

public class Story{


}

class Boss extends Monster{

}

public class TestMazeGame {



}


미로를 그냥 미리 만들어진거로 하기 위해 코드를 다시 짜겠습니다.

import java.util.*;

public class Maze() {

   public int rooms[][];
   rooms = new int[15][21];
   rooms[15][21] = {{1,2,2,1,1,1,2,2,2,2,1,2,2,2,2},
                                 {1,2,2,1,2,2,2,2,2,2,1,1,1,2,2},
                                 {1,1,1,1,1,1,1,1,1,2,1,2,1,2,2},
                                 {2,2,2,2,2,2,2,2,1,2,1,2,1,2,2},
                                 {2,1,1,1,2,2,2,2,1,1,1,2,1,2,2},
                                 {2,2,2,1,1,1,1,1,1,2,2,2,2,2,2},
                                 {1,1,1,2,1,2,2,2,2,2,2,2,1,1,1},
                                 {1,2,1,2,1,1,1,1,1,1,1,2,1,2,1},
                                 {1,2,1,2,1,2,2,2,2,2,1,2,1,2,1},
                                 {1,2,1,2,1,1,1,1,1,2,1,2,1,2,1},
                                 {1,2,1,2,2,2,2,2,1,2,1,2,1,2,1},
                                 {1,2,1,1,1,1,1,1,1,2,1,2,1,2,1},
                                 {1,2,2,2,2,2,2,2,2,2,1,2,1,2,1},
                                 {1,2,1,1,1,1,1,1,1,1,1,2,1,2,1},
                                 {1,2,2,1,2,2,2,2,2,2,2,2,1,2,1},
                                 {1,2,2,1,1,1,1,1,1,2,2,2,1,2,1},
                                 {1,2,2,2,2,2,2,2,2,2,2,2,1,2,1},
                                 {1,1,1,1,1,1,1,1,1,1,1,1,1,2,1},
                                 {1,2,2,2,2,1,2,2,2,2,2,2,2,2,1},
                                 {1,2,2,2,2,1,2,2,2,2,2,2,2,2,1},
                                 {1,1,1,1,2,1,1,1,1,1,1,1,1,2,1}};
   public int location;
   public int get;

   public void Maze_limit(int arr[][], int a, int b) {
   if(a == 0 || a == 14)   {
      if(b == 0 || b == 20)   {
         if( a == 0 && b == 0)   {
            System.out.println( rooms[a][b]+ " " +rooms[a+1][b]);
            System.out.println( rooms[a][b+1]+ " " + rooms[a+1][b+1]);
                                               }
         if( a == 0 && b == 20)  {
           System.out.println( rooms[a][b-1]+ " " +rooms[a+1][b-1]);
           System.out.println( rooms[a][b]+ " " +rooms[a+1][b]);
                                               }
         if(a == 14 && b == 0)  {
            System.out.println(rooms[a-1][b]+ " " +rooms[a][b]);
            System.out.println(rooms[a-1][b + 1]+ " " +rooms[a][b+1]);
                                               }
         if(a == 14 &&7 b == 20) {
            System.out.println(rooms[a-1][b-1]+ " " + rooms[a][b-1]);
            System.out.println(rooms[a-1][b]+ " " rooms[a][b]);
                                                }
                                           }
        else      {
            if(a == 0) {
            System.out.println(rooms[a][b-1]+ " " +rooms[a+1][b-1]);
            System.out.println(rooms[a][b]+ " " +rooms[a+1][b]);
            System.out.println(rooms[a][b+1]+ " " +rooms[a+1][b+1]);
                             }
            else          {
            System.out.println(rooms[a-1][b-1]+ " " +rooms[a][b-1]);
            System.out.println(rooms[a-1][b]+ " " +rooms[a][b]);
            System.out.println(rooms[a-1][b+1]+ " " +rooms[a][b+1]);
                            }
                     }
                }
         else {
            if(b == 0 || b == 20)   {
                 if(b == 0)  {
                     System.out.println(rooms[a-1][b] +  " "  +rooms[a][b]+ " " +rooms[a+1][b]);
                     System.out.println(rooms[a-1][b+1] + " " +rooms[a][b+1]+ " " +rooms[a+1][b+1]);
                                   }
                  else          {
                     System.out.println(rooms[a-1][b-1]+ " " +rooms[a][b-1]+ " " +rooms[a+1][b-1]);
                     System.out.println(rooms[a-1][b] + " " +rooms[a][b]+ " " + rooms[a+1][b]);
                                   }
                                               }
            else   {
                 System.out.println(rooms[a-1][b-1]+ " " +rooms[a][b-1]+ " " +rooms[a+1][b-1]);
                 System.out.println(rooms[a-1][b]+ " " +rooms[a][b]+ " " +rooms[a+1][b]);
                 System.out.println(rooms[a-1][b+1]+ " " +rooms[a][b+1]+ " " +rooms[a+1][b+1]);
                      }

   }

public class Interface {

   

}

public class TestMazeDrive {
   
   Maze.1p = new Maze();
   //유저가 게임을 시작하면 인터페이스를 불러와 여러가지를 띄우고 물어본다.

   //그 후엔 미로를 보여주며 길을 지나가게 한다. 미로를 통과하면 클리어

   int userInput = helper.getUserInput("Where do you want to go");
   
   


   }

}}}