#summary 신호균

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{
package gjkkj;

public class Beersong {
	public static void main (String[] args) {
		int beernum = 99;
		String word = "bottles";
		while (beernum>0) {
			if (beernum == 1) {
				word ="bottle";
			}
			System.out.println(beernum+" "+word+" of beer on the wall");
			System.out.println(beernum+" "+word+" of beer.");
			System.out.println("Take one down.");
			System.out.println("Pass it around.");
			beernum=beernum-1;
			if(beernum==0){
				System.out.println("No more bottles of beer on the wall");
			}
		}
	}

}


}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{
package gjkkj;

public class PhraseOMatic {
	public static void main (String[] args) {
		String[] wordlistone = {"dota2","league of legends","hearthstone","diablo3","starcraft2"};
		String[] wordlisttwo = {"had","empowered","shared","focused","aligned"};
		String[] wordlistthree = {"solution","creativity","power","point"};
		
		int onelength = wordlistone.length;
		int twolength = wordlisttwo.length;
		int threelength = wordlistthree.length;
		
		int rand1 = (int) (Math.random() * onelength);
		int rand2 = (int) (Math.random() * twolength);
		int rand3 = (int) (Math.random() * threelength);
		String phrase = wordlistone[rand1]+" "+wordlisttwo[rand2]+" "+wordlistthree[rand3];
		System.out.println("What we need is a "+ phrase);
		}

}

}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 프로그램을 실행한다. 보안 문제를 예방한다.

 * 컴파일러: 프로그래머가 입력한 코드를 기계어인 바이트 코드로 바꿔준다. 코드상의 문제사항을 미리 알려준다.

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
public class Exercise1b {

	public static void main(String[] args) {
		int x=1;
		while(x<10){
			if(x>3){
				System.out.println("big x");
			}
			x++; //x값이 증가하지 않아 오류가났다.
		}

	}

}

public class Exercise1b { //클래스가 지정되지 않아 오류가 났다.

	public static void main(String[] args) {
		int x=5;
		while(x>1){
			x=x-1;
			if(x<3){
				System.out.println("smaill x");
			}
		}

	}

}

public class Exercise1b {

	public static void main(String[] args) { //메인 메소드가 빠져서 오류가 났다.
		int x=5;
		while(x>1){
			x=x-1;
			if(x<3){
				System.out.println("smaill x");
			}
		}

	}

}





}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체에서 자신에 대해 아는 것
 * 메소드: 객체에서 할 수 있는 일
 * 클래스: 가상머신에 그 유형의 객체를 만드는 방법을 알려주는 역할
 * 테스트용 클래스: 새로운 클래스의 객체에 들어있는 메소드와 변수를 테스트
 

*68p Television* _채워넣기_

 * 인스턴스 변수: channel, volume
 * 메소드: upchannel(), downchannel(),upvolume(),downvolume()


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{

public class GuessGame {
	Player p1;
	Player p2;
	Player p3;
	Player p4;

	public void startGame() {
		p1=new Player();
		p2=new Player();
		p3=new Player();
		p4=new Player();
		
		int guessp1=0;
		int guessp2=0;
		int guessp3=0;
		int guessp4=0;
		
		boolean p1isRight=false;
		boolean p2isRight=false;
		boolean p3isRight=false;
		boolean p4isRight=false;
		
		int targetNumber=(int) (Math.random()*10);
		System.out.println("0 이상 9 이하의 숫자를 맞춰보세요.");
		
		while(true){
			System.out.println("맞춰야 할 숫자는"+targetNumber+"입니다.");
			
			p1.guess();
			p2.guess();
			p3.guess();
			p4.guess();
			
			guessp1=p1.number;
			System.out.println("1번 선수가 찍은 숫자: "+guesssp1);
			
			guessp2=p2.number;
			System.out.println("2번 선수가 찍은 숫자: "+guesssp2);
			
			guessp3=p3.number;
			System.out.println("3번 선수가 찍은 숫자: "+guesssp3);
			
			guessp4=p4.number;
			System.out.println("4번 선수가 찍은 숫자: "+guesssp4);
			
			if(guessp1==targetNumber) {
				p1isRight=true;
			}
			
			if(guessp2==targetNumber) {
				p2isRight=true;
			}
			
			if(guessp3==targetNumber) {
				p3isRight=true;
			}
			
			if(guessp4==targetNumber) {
				p4isRight=true;
			}
			
			if(p1isRight||p2isRight||p3isRight||p4isRight){
				
				System.out.println("맞춘 선수가 있습니다.");
				System.out.println("1번 선수가 찍은 숫자: "+p1isRight);
				System.out.println("2번 선수가 찍은 숫자: "+p2isRight);
				System.out.println("3번 선수가 찍은 숫자: "+p3isRight);
				System.out.println("4번 선수가 찍은 숫자: "+p4isRight);
				System.out.println("게임 끝.");
				break;
			} else{
				System.out.println("다시 시도해야 합니다.");
			}

		}

	}

}


}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
class TapeDeck {
	boolean canRecord = false;
	void playTape() {
		System.out.println("tape playing");
	}
	void recordTape() {
		System.out.println("tape recording");
	}

}

class TapeDeckTestDrive {
	public static void main(String [] args) {
		TapeDeck t = new TapeDeck(); //객체가 없어 오류가 난다. 객체 TapeDeck을 추가 해야함
		t.canRecord =true;
		t.playTape();
		
		if(t.canRecord == true) {
			t.recordTape();
		}
	}
}

class DVDPlayer {
	boolean canRecord = false;
	void recordDVD() {
		System.out.println("DVD recording");
	}
	void playDVD() {
		System.out.println("DVD playing"); //아래 클래스에 있는 d.playDVD를 실행시키기위해 필요하다.
	}

}

class DVDPlayerTestDrive {
	public static void mai(String [] args) {
		DVDPlayer d = new DVDPlayer();
		d.canRecord = true;
		d.playDVD();
		if(d.canRecord == true) {
			d.recordDVD();
		}
	}
}

}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수: 원시변수는 유형을 지정하여야한다. 값을 나타내는 비트가 원시변수에 저장된다.(컵에 비유) 레퍼런스변수는 유형이 따로없다. 객체에 접근하는 방법을 나타내는 비트가 레퍼런스변수에 저장된다.(리모콘에 비유)
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{
class Dog {
	String name;
	public static void main (String [] args) {
		Dog dog1 = new Dog();
		dog1.bark();
		dog1.name = "Bart";
		
		Dog[] myDogs = new Dog[8];
		myDogs[0] = new Dog();
		myDogs[1] = new Dog();
		myDogs[2] = new Dog();
		myDogs[3] = new Dog();
		myDogs[4] = new Dog();
		myDogs[5] = new Dog();
		myDogs[6] = new Dog();
		myDogs[7] = dog1;
		
		myDogs[0].name = "Fred";
		myDogs[1].name = "Bart";
		myDogs[2].name = "Wert";
		myDogs[3].name = "Joon";
		myDogs[4].name = "Marge";
		myDogs[5].name = "Tedd";
		myDogs[6].name = "Hod";
		
		System.out.print("마지막 개의 이름 : ");
		System.out.println(myDogs[7].name);
		
		int x = 0;
		while(x<myDogs.length) {
			myDogs[x].bark();
			x=x+1;
		}
	}
	public void bark() {
		System.out.println(name+"이(가) 왈!하고 짖습니다.");
		}
}

}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
 class Books {
	String title;
	String author;
}

class BooksTestDrive {
	public static void main (String [] args) {
		Books [] myBooks = new Books[3];
		int x=0;
		myBooks[0]=new Books();
		myBooks[1]=new Books();
		myBooks[2]=new Books(); // 아래에 보면 Books 객체가 필요하다는 것을 알수 있다.
		myBooks[0].title = "The Grapes of Java";
		myBooks[1].title = "The Java Gatsby";
		myBooks[2].title = "The Java Cookbook";
		myBooks[0].author = "bob";
		myBooks[1].author = "sue";
		myBooks[2].author = "ian";
		while(x<3) {
			System.out.print(myBooks[x].title);
			System.out.print("by");
			System.out.println(myBooks[x].author);
			x=x+1;
		}
	}
}
class Hobbits {
	String name;
	public static void main(String [] args) {
		Hobbits [] h = new Hobbits[3];
		int z = -1; //아래에 z변수가 있으니 z변수 추가, while문 추가
		while(z<2) {
			z = z+1;
			h[z] = new Hobbits();
			h[z].name = "bilbo";
			if(z==1) {
				h[z].name = "frodo";
			}
			if(z==2) {
				h[z].name = "sam";
			}
			System.out.print(h[z].name + "is a");
			System.out.println("good Hobbit name");
		}
	}

}


}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?:
 * 문제가 된 부분은 어딘가요?:

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:
 * 게터와 세터:
 * 인스턴스 변수 vs 지역 변수:
 
*107p Dog* _실행_

{{{

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{
package gjkkj;

public class SimpleDotComGame {

	public static void main(String[] args) {
		int numOfGuesses = 0;
		GameHelper helper = new GameHelper();
		
		SimpleDotCom theDotCom = new SimpleDotCom();
		int randomNum = (int) (Math.random()*5);
		
		int[] locations = {randomNum, randomNum+1,randomNum+2};
		theDotCom.setLocationCells(locations);
		boolean isAlive = true;
		
		while(isAlive == true) {
			String guess = helper.getUserInput("enter a number");
			String result = theDotCom.checkYourself(guess);
			numOfGuesses++;
			if(result.equals("kill")) {
				isAlive = false;
				System.out.println(numOfGuesses + "guesses");
			}
		}

	}

}
package gjkkj;

public class SimpleDotCom {
	
	int[] locationCells;
	int numOfHits = 0;
	
	public void setLocationCells(int[] locs) {
		locationCells = locs;
	}
	
	public String checkYourself(String stringGuess) {
		int guess = Integer.parseInt(stringGuess);
		String result = "miss";
		for(int i = 0; i < locationCells.length; i++) {
			if(guess == locationCells[i]) {
				result = "hit";
				numOfHits++;
				break;
			}
		}
		if(numOfHits == locationCells.length) {
			result = "kill";
		}
		System.out.println(result);
		return result;
	}

}
package gjkkj;
import java.io.*;
public class GameHelper {
	
	public String getUserInput(String prompt) {
		String inputLine = null;
		System.out.print(prompt + " ");
		try {
			BufferedReader is =new BufferedReader(new InputStreamReader(System.in));
			inputLine = is.readLine();
			if (inputLine.length()==0)
				return null;
		}
		catch (IOException e) {
			System.out.println("IOException: "+ e);
		}
		return inputLine;
	}

}


}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:
 * 다형성:

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}