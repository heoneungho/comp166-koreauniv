#summary 신호균

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{
package gjkkj;

public class Beersong {
	public static void main (String[] args) {
		int beernum = 99;
		String word = "bottles";
		while (beernum>0) {
			if (beernum == 1) {
				word ="bottle";
			}
			System.out.println(beernum+" "+word+" of beer on the wall");
			System.out.println(beernum+" "+word+" of beer.");
			System.out.println("Take one down.");
			System.out.println("Pass it around.");
			beernum=beernum-1;
			if(beernum==0){
				System.out.println("No more bottles of beer on the wall");
			}
		}
	}

}


}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{
package gjkkj;

public class PhraseOMatic {
	public static void main (String[] args) {
		String[] wordlistone = {"dota2","league of legends","hearthstone","diablo3","starcraft2"};
		String[] wordlisttwo = {"had","empowered","shared","focused","aligned"};
		String[] wordlistthree = {"solution","creativity","power","point"};
		
		int onelength = wordlistone.length;
		int twolength = wordlisttwo.length;
		int threelength = wordlistthree.length;
		
		int rand1 = (int) (Math.random() * onelength);
		int rand2 = (int) (Math.random() * twolength);
		int rand3 = (int) (Math.random() * threelength);
		String phrase = wordlistone[rand1]+" "+wordlisttwo[rand2]+" "+wordlistthree[rand3];
		System.out.println("What we need is a "+ phrase);
		}

}

}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 프로그램을 실행한다. 보안 문제를 예방한다.

 * 컴파일러: 프로그래머가 입력한 코드를 기계어인 바이트 코드로 바꿔준다. 코드상의 문제사항을 미리 알려준다.

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
public class Exercise1b {

	public static void main(String[] args) {
		int x=1;
		while(x<10){
			if(x>3){
				System.out.println("big x");
			}
			x++; //x값이 증가하지 않아 오류가났다.
		}

	}

}

public class Exercise1b { //클래스가 지정되지 않아 오류가 났다.

	public static void main(String[] args) {
		int x=5;
		while(x>1){
			x=x-1;
			if(x<3){
				System.out.println("smaill x");
			}
		}

	}

}

public class Exercise1b {

	public static void main(String[] args) { //메인 메소드가 빠져서 오류가 났다.
		int x=5;
		while(x>1){
			x=x-1;
			if(x<3){
				System.out.println("smaill x");
			}
		}

	}

}





}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체에서 자신에 대해 아는 것
 * 메소드: 객체에서 할 수 있는 일
 * 클래스: 가상머신에 그 유형의 객체를 만드는 방법을 알려주는 역할
 * 테스트용 클래스: 새로운 클래스의 객체에 들어있는 메소드와 변수를 테스트
 

*68p Television* _채워넣기_

 * 인스턴스 변수: channel, volume
 * 메소드: upchannel(), downchannel(),upvolume(),downvolume()


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{

public class GuessGame {
	Player p1;
	Player p2;
	Player p3;
	Player p4;

	public void startGame() {
		p1=new Player();
		p2=new Player();
		p3=new Player();
		p4=new Player();
		
		int guessp1=0;
		int guessp2=0;
		int guessp3=0;
		int guessp4=0;
		
		boolean p1isRight=false;
		boolean p2isRight=false;
		boolean p3isRight=false;
		boolean p4isRight=false;
		
		int targetNumber=(int) (Math.random()*10);
		System.out.println("0 이상 9 이하의 숫자를 맞춰보세요.");
		
		while(true){
			System.out.println("맞춰야 할 숫자는"+targetNumber+"입니다.");
			
			p1.guess();
			p2.guess();
			p3.guess();
			p4.guess();
			
			guessp1=p1.number;
			System.out.println("1번 선수가 찍은 숫자: "+guesssp1);
			
			guessp2=p2.number;
			System.out.println("2번 선수가 찍은 숫자: "+guesssp2);
			
			guessp3=p3.number;
			System.out.println("3번 선수가 찍은 숫자: "+guesssp3);
			
			guessp4=p4.number;
			System.out.println("4번 선수가 찍은 숫자: "+guesssp4);
			
			if(guessp1==targetNumber) {
				p1isRight=true;
			}
			
			if(guessp2==targetNumber) {
				p2isRight=true;
			}
			
			if(guessp3==targetNumber) {
				p3isRight=true;
			}
			
			if(guessp4==targetNumber) {
				p4isRight=true;
			}
			
			if(p1isRight||p2isRight||p3isRight||p4isRight){
				
				System.out.println("맞춘 선수가 있습니다.");
				System.out.println("1번 선수가 찍은 숫자: "+p1isRight);
				System.out.println("2번 선수가 찍은 숫자: "+p2isRight);
				System.out.println("3번 선수가 찍은 숫자: "+p3isRight);
				System.out.println("4번 선수가 찍은 숫자: "+p4isRight);
				System.out.println("게임 끝.");
				break;
			} else{
				System.out.println("다시 시도해야 합니다.");
			}

		}

	}

}


}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
class TapeDeck {
	boolean canRecord = false;
	void playTape() {
		System.out.println("tape playing");
	}
	void recordTape() {
		System.out.println("tape recording");
	}

}

class TapeDeckTestDrive {
	public static void main(String [] args) {
		TapeDeck t = new TapeDeck(); //객체가 없어 오류가 난다. 객체 TapeDeck을 추가 해야함
		t.canRecord =true;
		t.playTape();
		
		if(t.canRecord == true) {
			t.recordTape();
		}
	}
}

class DVDPlayer {
	boolean canRecord = false;
	void recordDVD() {
		System.out.println("DVD recording");
	}
	void playDVD() {
		System.out.println("DVD playing"); //아래 클래스에 있는 d.playDVD를 실행시키기위해 필요하다.
	}

}

class DVDPlayerTestDrive {
	public static void mai(String [] args) {
		DVDPlayer d = new DVDPlayer();
		d.canRecord = true;
		d.playDVD();
		if(d.canRecord == true) {
			d.recordDVD();
		}
	}
}

}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수: 원시변수는 유형을 지정하여야한다. 값을 나타내는 비트가 원시변수에 저장된다.(컵에 비유) 레퍼런스변수는 유형이 따로없다. 객체에 접근하는 방법을 나타내는 비트가 레퍼런스변수에 저장된다.(리모콘에 비유)
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{
class Dog {
	String name;
	public static void main (String [] args) {
		Dog dog1 = new Dog();
		dog1.bark();
		dog1.name = "Bart";
		
		Dog[] myDogs = new Dog[8];
		myDogs[0] = new Dog();
		myDogs[1] = new Dog();
		myDogs[2] = new Dog();
		myDogs[3] = new Dog();
		myDogs[4] = new Dog();
		myDogs[5] = new Dog();
		myDogs[6] = new Dog();
		myDogs[7] = dog1;
		
		myDogs[0].name = "Fred";
		myDogs[1].name = "Bart";
		myDogs[2].name = "Wert";
		myDogs[3].name = "Joon";
		myDogs[4].name = "Marge";
		myDogs[5].name = "Tedd";
		myDogs[6].name = "Hod";
		
		System.out.print("마지막 개의 이름 : ");
		System.out.println(myDogs[7].name);
		
		int x = 0;
		while(x<myDogs.length) {
			myDogs[x].bark();
			x=x+1;
		}
	}
	public void bark() {
		System.out.println(name+"이(가) 왈!하고 짖습니다.");
		}
}

}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
 class Books {
	String title;
	String author;
}

class BooksTestDrive {
	public static void main (String [] args) {
		Books [] myBooks = new Books[3];
		int x=0;
		myBooks[0]=new Books();
		myBooks[1]=new Books();
		myBooks[2]=new Books(); // 아래에 보면 Books 객체가 필요하다는 것을 알수 있다.
		myBooks[0].title = "The Grapes of Java";
		myBooks[1].title = "The Java Gatsby";
		myBooks[2].title = "The Java Cookbook";
		myBooks[0].author = "bob";
		myBooks[1].author = "sue";
		myBooks[2].author = "ian";
		while(x<3) {
			System.out.print(myBooks[x].title);
			System.out.print("by");
			System.out.println(myBooks[x].author);
			x=x+1;
		}
	}
}
class Hobbits {
	String name;
	public static void main(String [] args) {
		Hobbits [] h = new Hobbits[3];
		int z = -1; //아래에 z변수가 있으니 z변수 추가, while문 추가
		while(z<2) {
			z = z+1;
			h[z] = new Hobbits();
			h[z].name = "bilbo";
			if(z==1) {
				h[z].name = "frodo";
			}
			if(z==2) {
				h[z].name = "sam";
			}
			System.out.print(h[z].name + "is a");
			System.out.println("good Hobbit name");
		}
	}

}


}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?: 밥
 * 문제가 된 부분은 어딘가요?: 켄트의 코드의 경우에는 연락처 10개에 접근이 불가능하고 오직 1개만 접근할 수 있다.

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화: 누구나 데이터를 건드리는 것을 막기 위해서 다른 코드에서 데이터에 직접 접근할 수 없도록, 반드시 세터 메소드를 사용한다.
 * 게터와 세터: 게터는 게터가 가져오기로 되어있는 값을 리턴값 형태로 가져온다. 세터는 세터가 설정할 값을 인자로 받아서 인스턴스 변수를 값으로 설정하기 위한 용도로 쓰인다.
 * 인스턴스 변수 vs 지역 변수: 인스턴스 변수는 클래스 내에서 선언된다. 지역 변수는 메소드 냉서 선언된다. 지역 변수는 사용하기 전에 반드시 초기화해야 한다.
 
*107p Dog* _실행_

{{{
class Dog {
	int size;
	String name;
	
	void bark() {
		if (size > 60) {
			System.out.println("Wooof! Wooof!");
		}
		else if  (size > 14) {
			System.out.println("Ruff! Ruff!");
		}
		else {
			System.out.println("Yip! Yip!");
		}
	}

}
class DogTestDrive {
	public static void main (String[] args) {
		Dog one = new Dog();
		one.size = 70;
		Dog two = new Dog();
		two.size = 8;
		Dog three = new Dog();
		three.size = 35;
		
		one.bark();
		two.bark();
		three.bark();
	}

}

결과 : Wooof! Wooof!
      Yip! Yip!
      Ruff! Ruff!


}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

public class XCopy {
	public static void main(String[] args) {
		int orig = 42;
		XCopy x = new XCopy();
		int y = x.go(orig);
		System.out.println(orig + " " + y);
	}
	
	int go(int arg) {
		arg = arg*2;
		return arg;
	}

} //문제없이 실행 된다.

public class Clock {
	String time;
	void setTime(String t) {
		time = t;
	}
	String getTime() { //return을 하기 위해서는 void는 안됨, String이 가능하다.
		return time;
	}

}
class ClockTestDrive {
	public static void main(String [] args) {
		Clock c =new Clock();
		c.setTime("12345");
		String tod = c.getTime();
		System.out.println("time: " + tod);
	}
}

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란? : 프로그래머들이 정말 원하는 방법이고 막판에 스펙이 변경되어도 고객이 원하는 것을 고객이 원하는 기한에 맞춰서 제공할 수 있다는 장점이 있다.
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{
package gjkkj;

public class SimpleDotComGame {

	public static void main(String[] args) {
		int numOfGuesses = 0;
		GameHelper helper = new GameHelper();
		
		SimpleDotCom theDotCom = new SimpleDotCom();
		int randomNum = (int) (Math.random()*5);
		
		int[] locations = {randomNum, randomNum+1,randomNum+2};
		theDotCom.setLocationCells(locations);
		boolean isAlive = true;
		
		while(isAlive == true) {
			String guess = helper.getUserInput("enter a number");
			String result = theDotCom.checkYourself(guess);
			numOfGuesses++;
			if(result.equals("kill")) {
				isAlive = false;
				System.out.println(numOfGuesses + "guesses");
			}
		}

	}

}
package gjkkj;

public class SimpleDotCom {
	
	int[] locationCells;
	int numOfHits = 0;
	
	public void setLocationCells(int[] locs) {
		locationCells = locs;
	}
	
	public String checkYourself(String stringGuess) {
		int guess = Integer.parseInt(stringGuess);
		String result = "miss";
		for(int i = 0; i < locationCells.length; i++) {
			if(guess == locationCells[i]) {
				result = "hit";
				numOfHits++;
				break;
			}
		}
		if(numOfHits == locationCells.length) {
			result = "kill";
		}
		System.out.println(result);
		return result;
	}

}
package gjkkj;
import java.io.*;
public class GameHelper {
	
	public String getUserInput(String prompt) {
		String inputLine = null;
		System.out.print(prompt + " ");
		try {
			BufferedReader is =new BufferedReader(new InputStreamReader(System.in));
			inputLine = is.readLine();
			if (inputLine.length()==0)
				return null;
		}
		catch (IOException e) {
			System.out.println("IOException: "+ e);
		}
		return inputLine;
	}

}


}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

public class SimpleDotCom {
	
	int[] locationCells;
	int[] hitCells = {0,0,0}; //hitCells배열을 만든다.
	int numOfHits = 0;
	
	public void setLocationCells(int[] locs) {
		locationCells = locs;
	}
	
	public String checkYourself(String stringGuess) {
		int guess = Integer.parseInt(stringGuess);
		String result = "miss";
		for(int i = 0; i < locationCells.length; i++) {
			if(guess == locationCells[i]) {
				if(hitCells[i]==0) { //hitCells에 관련된 조건을 추가한다.
					result = "hit";
					hitCells[i] = 1; //맞을때 마다 hitCells배열에 1을 넣는다.
					numOfHits++;
					break;
			}
		}
		if(numOfHits == locationCells.length) {
			result = "kill";
		}
		System.out.println(result);
		return result;
	}

}

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{
public class SimpleDotCom {
	
	int[] locationCells;
	int numOfHits = 0;
	
	public void setLocationCells(int[] locs) {
		locationCells = locs;
	}
	
	public String checkYourself(String stringGuess) {
		int guess = Integer.parseInt(stringGuess);
		String result = "miss";
		for(int i = 0; i < locationCells.length; i++) {
			if(guess == locationCells[i]) {
				result = "hit";
				numOfHits++;
				locationCells[i] = -1; //맞은 locationCells배열에 -1을 넣는다.
				break;
			}
		}
		if(numOfHits == locationCells.length) {
			result = "kill";
		}
		System.out.println(result);
		return result;
	}

}


}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

import java.util.ArrayList; // ArrayList 사용
public class SimpleDotCom {
        private ArrayList<String> locationCells;
        
        public void setLocationCells(ArrayList<String> locs) { // SimpleDotComTestDrive에서도 변경한다.
                locationCells = locs;
        }
        
        public String checkYourself(String stringGuess) {
                String result = "miss";
                int index = locationCells.indexOf(stringGuess);
                if(index >= 0) {
                        locationCells.remove(index); // 배열에서 제거한다.
                        
                        if(locationCells.isEmpty()) { // 배열이 비어있으면 kill을 출력.
                                result = "kill";
                        } else { // 그렇지 않다면 hit 출력.
                                result = "hit";
                        }
                }
                
                return result;
        }
}
}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{
import java.util.*;

public class DotCom {
        private ArrayList<String> locationCells;// DotCom의 인스턴스 변수 -셀위치
        private String name;// DotCom의 인스턴스 변수 -DotCom의 이름

        public void setLocationCells(ArrayList<String> loc) {
                locationCells = loc;// DotCom의 위치를 갱신합니다.
        }

        public void setName(String n) {
                name = n;// 이름을 설정합니다
        }

        public String checkYourself(String userInput) {
                String status = "miss";// 처음에 miss로 초기화합니다.
                int index = locationCells.indexOf(userInput);
                // ArrayList의 indexOf()메소드를 사용하여 사용자가 추측한 위치가 ArrayList에 들어있으면 인덱스를 그렇지
                // 않으면 -1을 리턴합니다.
                if (index >= 0) {
                        locationCells.remove(index);
                        // ArrayList의 remove 메소드를 써서 그 항목을 지웁니다.
                        if (locationCells.isEmpty())// isEmpty를 써서 모든 위치를 맞췄는지 확인합니다.
                        {
                                status = "kill";
                                System.out.println("Ouch! You sunk " + name + "    : ( ");
                                // DotCom이 가라앉았다고 알려줍니다.
                        } else {
                                status = "hit";// 아니면 hit
                        }
                }// if문 끝

                return status;
        }
        // miss or hit or kill을 리턴합니다.
}

package 최종;

import java.util.*;

public class DotComBust {
        private GameHelper helper = new GameHelper();// GameHelper객체를 생성합니다.
        private ArrayList<DotCom> dotComsList = new ArrayList<DotCom>();// DotCom객체로
                                                                                                                                        // 이루어진
                                                                                                                                        // ArrayList를
                                                                                                                                        // 만듭니다.
        private int numOfGuesses = 0;// 추측한 숫자를 나타내는 변수를 선언하고 0으로 초기화합니다.

        private void setUpGame()// 닷컴 객체 몇 개를 만들고 위치를 지정합니다.
        {
                DotCom one = new DotCom();
                one.setName("Pets.com");
                DotCom two = new DotCom();
                two.setName("eToys.com");
                DotCom three = new DotCom();
                three.setName("Go2.com");
                dotComsList.add(one);
                dotComsList.add(two);
                dotComsList.add(three);
                // DotCom 객체 세 개를 만들고 각각 이름을 부여하고 ArrayList에 저장합니다.

                System.out.println("Your goal is to sink three dot coms.");
                System.out.println("Pets.com, eToys.com, Go2.com");
                System.out
                                .println("Try to sink them all in the fewest number of guesses");
                // 사용자에게 간단한 게임 방법을 설명합니다.

                for (DotCom dotComToSet : dotComsList)// 목록에 있는 각 DotCom에 대해 반복합니다.
                {
                        ArrayList<String> newLocation = helper.placeDotCom(3);
                        // DotCom의 위치를 지정하기 위한 보조 메소드를 호출합니다.
                        dotComToSet.setLocationCells(newLocation);
                        // 이 DOtCom 객체의 세터 메소드를 호출하여 방금 보조 메소드에서 받아온 위치를 지정합니다.

                }// for 순환문 끝
        }// setUpgame 메소드 끝

        private void startPlaying() {
                while (!dotComsList.isEmpty())// dotComsList가 비어있지 않으면 계속 반복합니다.
                {
                        String userGuess = helper.getUserInput("Enter a guess");
                        // 사용자의 입력을 받습니다.
                        checkUserGuess(userGuess);
                        // checkUserGuess 메소드를 호출합니다.

                }// while문 끝
                finishGame();
        }// startPlaying 메소드 끝

        private void checkUserGuess(String userGuess) {
                numOfGuesses++;// 메소드가 호출되면 사용자 추측 횟수를 증가시킵니다.
                String result = "miss";// miss라고 가정합니다.

                for (DotCom dotComToTest : dotComsList)// 목록의 모든 DotCom 객체에 대해 반복합니다.
                {
                        result = dotComToTest.checkYourself(userGuess);
                        // DotCom 객체에 사용자가 입력한 위치가 맞는지 또는 객체가 죽었는지 물어봅니다.
                        if (result.equals("hit"))// 결과가 hit 이라면
                        {
                                break;// 순환문을 빠져나옵니다.
                        }
                        if (result.equals("kill"))// 결과가 kill이라면
                        {
                                dotComsList.remove(dotComToTest);// DotCom 목록에서 빼고
                                break;// 순환문을 빠져나옵니다.
                        }
                }// for 문 끝
                System.out.println(result);
        }// checkUserGuess 메소드 끝

        private void finishGame()// 게임 결과를 알려주는 메시지를 출력합니다.
        {
                System.out
                                .println("All Dot Coms are dead! Your stock is now worthless");
                if (numOfGuesses <= 18) {
                        System.out
                                        .println("It only took you " + numOfGuesses + " guesses.");
                        System.out.println("You got out before your options sank");
                } else {
                        System.out.println("Took you long enough. " + numOfGuesses
                                        + " guesses.");
                        System.out.println("Fish are dancing with your options");
                }
        }

        public static void main(String[] args) {
                DotComBust game = new DotComBust();// DotComBust 객체를 만듭니다.
                game.setUpGame();// 게임 객체에 게임을 설정하라는 명령을 내립니다.
                game.startPlaying();
                // 게임 객체에서 주 게임 진행 순환문을 돌리라는 명령을 내립니다
        }

}

package 최종;

import java.io.*;
import java.util.*;

public class GameHelper
{
        private static final String alphabet = "abcdefg";
        private int gridLength = 7;
        private int gridSize = 49;
        private int[] grid = new int[gridSize];
        private int comCount = 0;
        
        public String getUserInput(String prompt)
        {
                String inputLine = null;
                System.out.println(prompt +" ");
                try
                {
                        BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
                        inputLine = is.readLine();
                        if(inputLine.length() == 0)
                                return null;    
                }
                catch(IOException e)
                {
                        System.out.println("IOException: " + e);
                }
        
                return inputLine.toLowerCase();
                
        }
        
        public ArrayList<String> placeDotCom(int comSize)
        {
                ArrayList<String> alphaCells = new ArrayList<String>();//F6과 같은 좌표가 들어감
                String temp = null;//나중에 연결하기 위한 임시 String배열
                int[] coords = new int[comSize];//현재 후보 좌표
                int attempts = 0;//시도 횟수를 세기 위한 카운터
                boolean success = false;//적당한 위치를 찾았느지 표시하기 위한 플래그
                int location = 0;//현재 시작 위치
                
                comCount++;//n번째 닷컴
                int incr = 1;//수평 방향으로 증가시킬 값 설정
                if((comCount % 2)==1)//홀수 번째 닷컴인 경우
                {
                        incr = gridLength;//수직 방향으로 증가시킬 값 결정
                }
                
                while(!success & attempts++ < 200)//주 검색 순환문(32)
                {
                        location = (int) (Math.random() * gridSize);//임의 시작 위치를 구함
                        //System.out.print(" try " + location);
                        
                        int x = 0;//위치시킬 닷컴의 n번째 위치
                        success = true;//성공할 것으로 가정함
                        while(success && x < comSize)//닷컴이 들어갈 자리가 비었는지 확인
                        {
                                if(grid[location] == 0)//아직 사용하지 않았으면
                                {
                                        coords[x++] = location;//위치 저장
                                        location += incr;//다음 칸 확인
                                        if(location >= gridSize)//경계를 벗어난 경우
                                                success = false;//실패
                                        if(x > 0 & (location % gridLength == 0))//경계를 벗어난 경우(오른쪽)
                                                success = false;//실패
                                        else//이미 사용중인 경우
                                                //System.out.print(" used " + location)
                                                success = false;//실패
                                }
                        }
                        
                }//while 끝

        int x = 0;//위치를 알파벳 좌표로 바꿈
        int row = 0;
        int column = 0;
        
        while(x < comSize)
        {
                grid[coords[x]] = 1;//기본 그리드 좌표를 사용중 으로 표시
                row = (int) (coords[x] / gridLength);//행 값을 구함
                column = coords[x]&gridLength;//열 값을 구함
                temp = String.valueOf(alphabet.charAt(column));//숫자가 된 열을 알파벳으로 변환
                
                alphaCells.add(temp.concat(Integer.toString(row)));
                x++;
                //System.out.println("   coord  " + x + " = "  + alphaCells.get(x-1));
                //DotCom의 위치를 알려주는 메소드
                                
        }
        
        return alphaCells;
        }
        
}

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속: 여러 클래스에서 공통적인 특성을 뽑아 하나의 상위클래스를 만드는 것을 뜻한다. 이렇게 하면 상위클래스에 어떤 기능을 하는 메소드가 있다면 하위클래스에서도 자동적으로 같은 기능을 수행할 수 있다.
 * 다형성: 여러가지 형태를 하나의 타입으로 나타낼수 있다. 즉, 부모의 레퍼런스 변수가 자식을 가리키도록 하는 것

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{
	public void takeRisk() throws BadException {
		if(abandonAllHope) {
			throw new BadException();
		}
	}
	
	public void crossFingers() {
		try {
			anObject.takeRisk();
		} catch (BadException ex) {
			System.out.println("Aaargh!");
			ex.printStackTrace();
		}
	}
}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{
import javax.sound.midi.*;
public class MiniMiniMusicApp {
	public static void main(String[] args) {
		MiniMiniMusicApp mini = new MiniMiniMusicApp();
		mini.play();
	}
	public void play() {
		try {
			Sequencer player = MidiSystem.getSequencer();
			player.open();
			Sequence seq = new Sequence(Sequence.PPQ,4);
			Track track = seq.createTrack();
			ShortMessage a = new ShortMessage();
			a.setMessage(144,1,44,100);
			MidiEvent noteOn = new MidiEvent(a,1);
			track.add(noteOn);
			
			ShortMessage b = new ShortMessage();
			b.setMessage(128,1,44,100);
			MidiEvent noteOff = new MidiEvent(b,16);
			track.add(noteOff);
			
			player.setSequence(seq);
			player.start();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

}

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{
import javax.sound.midi.*;
public class MiniMusicCmdLine {
	public static void main(String[] args) {
		MiniMusicCmdLine mini = new MiniMusicCmdLine();
		if (args.length < 2) {
			System.out.println("악기와 음 높이를 지정하는 인자를 입력하세요.");
		} else {
			int instrument = Integer.parseInt(args[0]);
			int note = Integer.parseInt(args[1]);
			mini.play(instrument,note);
		}
	}
	public void play(int instrument, int note) {
		try {
			Sequencer player = MidiSystem.getSequencer();
			player.open();
			Sequence seq = new Sequence(Sequence.PPQ,4);
			Track track = seq.createTrack();
			
			MidiEvent event = null;
			
			ShortMessage first = new ShortMessage();
			first.setMessage(192,1,instrument,0);
			MidiEvent changeInstrument = new MidiEvent(first,1);
			track.add(changeInstrument);
			
			ShortMessage a =new ShortMessage();
			a.setMessage(144,1,note,100);
			MidiEvent noteOn = new MidiEvent(a,1);
			track.add(noteOn);
			
			ShortMessage b = new ShortMessage();
			b.setMessage(128,1,note,100);
			MidiEvent noteOff = new MidiEvent(b,16);
			track.add(noteOff);
			player.setSequence(seq);
			player.start();
		} catch (Exception ex) {ex.printStackTrace();}
	}

}
}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}