#summary 같은 그림 맞추는 카드게임.
#labels 2013190731김석환

= Introduction =

뒷면인 카드들을 두장씩 뒤집어서 앞면을보고 맞추는 게임입니다.

= Details =

가장쉬운 2x2 와 중간단계인 4x4 그리고 어려운 6x6 세가지 게임을 선택해서 할수 있게 만들었습니다.


==코드 소개==

이 어플의 클래스는 이러한 것들이 있습니다.

https://comp166-koreauniv.googlecode.com/files/%ED%81%B4%EB%9E%98%EC%8A%A4.PNG

맨 첫화면인 First.java <br>
게임의 난이도를 설정하는 두번째 화면인 Second.java <br>
세가지 난이도의 HomeWork6.java/ HomeWork6_1.java/ HomeWork6_2.java <br>

첫화면인 First.java의 코드는 다음과 같습니다.

{{{

package exam.HomeWork6;


import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.Menu;
import android.view.View;
import android.widget.ImageView;

public class First extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_first);
		
		ImageView button3 = (ImageView) findViewById(R.id.ImageView02); 
                       // 다음 화면으로 넘어가는 버튼 생성
		button3.setOnClickListener(new View.OnClickListener() {
		        public void onClick(View v) {
		                Intent intent = new Intent(getBaseContext(), Second.class);
		                startActivity(intent);
		        }
		});
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.first, menu);
		return true;
	}

}

}}}

난이도를 설정하는 Second.java 의 코드는 다음과 같습니다.

{{{

package exam.HomeWork6;

import android.os.Bundle;
import android.app.Activity;
import android.content.Intent;
import android.view.Menu;
import android.view.View;
import android.widget.ImageView;

public class Second extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_second);
		
		ImageView button01 = (ImageView) findViewById(R.id.imageView2);
                            // 가장 쉬운난이도로 가는 버튼 생성
		button01.setOnClickListener(new View.OnClickListener() {
		        public void onClick(View v) {
		                Intent intent = new Intent(getBaseContext(), HomeWork6.class);
		                startActivity(intent);
		        }
		});
		
		ImageView button02 = (ImageView) findViewById(R.id.imageView3);
                             // 중간 난이도로 가는 버튼 생성
		button02.setOnClickListener(new View.OnClickListener() {
		        public void onClick(View v) {
		                Intent intent = new Intent(getBaseContext(), HomeWork6_1.class);
		                startActivity(intent);
		        }
		});
		
		ImageView button03 = (ImageView) findViewById(R.id.imageView1);
                             // 가장 어려운 난니도로 가는 버튼 생성
		button03.setOnClickListener(new View.OnClickListener() {
		        public void onClick(View v) {
		                Intent intent = new Intent(getBaseContext(), HomeWork6_2.class);
		                startActivity(intent);
		        }
		});
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.second, menu);
		return true;
	}

}

}}}

마지막으로 게임을 하는 클래스인 HomeWork6.java는 다음과 같습니다.

{{{

package exam.HomeWork6;

import android.app.Activity;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.drawable.BitmapDrawable;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.Gravity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

public class HomeWork6 extends Activity {
	/** Called when the activity is first created. */

	LinearLayout mainLinear; // 전체 레이아웃
	LinearLayout[] linearRows; // 행의 수

	ImageButton[] buttons; // 이미지 버튼 배열
	BitmapDrawable[] bitmapsDrawables; // drawable 배열
	Bitmap[] bitmaps; // 비트맵 배열
	
	BitmapDrawable bitmapDrawableBack;
	Bitmap bitmapBack;
	
	int[] indexes; // 카드의 고유번호 저장 배열
	
	int[] tempArr = null; // 임시 정수 배열	
	int maximum = 2;
	int start, end;
	
	int[] correctIndexArray;
	int[] selectedIndex;
	int selectedCardIndex;
	
	Resources res;
	boolean bPassible = true;
	
	TextView tv;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		int temp = 0;

		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);

		tv = (TextView)findViewById( R.id.text );
		mainLinear = (LinearLayout) findViewById(R.id.main_linear); // 전체 리니어
		
		tv.setText( R.string.choice1 ); // 메시지가 출력되는 텍스트 뷰
		tv.setTextColor( Color.BLUE );
		tv.setGravity( Gravity.CENTER_HORIZONTAL );

		res = getResources(); // 리소스 얻기
		indexes = new int[ maximum * maximum ]; // 이미지의 고유번호를 기억한다.

		start = 0x7f020002; // 리소스 번호 처음
		end = 0x7f02002f; // 리소스 번호 마지막
 
		// 시작부터 끝까지 카드중 2개의 카드를 뽑아낸다.
		bitmapDrawableBack = (BitmapDrawable)res.getDrawable( R.drawable.back );
		bitmapBack = bitmapDrawableBack.getBitmap();
		
		// 랜덤으로 이미지를 읽어온다.
		getRandomImages();
		// 적당히 섞는다.
		mixIndexes();	
		// 뷰를 배칠한다
		setViews();
		// 카드 뒷면을 보여준다.
		recoverAllCards();
		// 적절한 초기화
		init();		
		
	}
	
	private void mixIndexes(){
		int temp;
		
		// 랜덤으로 중복없이 값을 뽑는다.
		tempArr = getRandomNumbers(0, maximum * maximum - 1, maximum * maximum);
		temp = 0 ;	
		//indexes 배열은 랜덤으로 값들이 들어간다
		for( int i = 0 ; i < indexes.length ; i++ ){
			indexes[ tempArr[ i ] ] = temp;
			temp++;
	
			// 같은 카드가 두 장이 들어가도록 한다.
			if( temp >= maximum * maximum / 2 )
				temp = 0;
		}
	}
	
	private void getRandomImages(){
		
		int temp;
		bitmapsDrawables = null;
		tempArr = null;
		
		// 랜덤으로 중복없이 뽑는다. 총 50여장의 카드중 maximum * maximum / 2 개의 카드를 뽑는다.
		tempArr = getRandomNumbers(start, end, maximum * maximum / 2 );
		bitmapsDrawables = new BitmapDrawable[ maximum * maximum / 2 ];

		// 랜덤한 이미지를 로드한다.
		temp = 0;
		for (int i = 0; i < bitmapsDrawables.length; i++) {
			bitmapsDrawables[ i ] = (BitmapDrawable) res.getDrawable( tempArr[ temp++ ] 	);
		}

		// 비트맵을 얻는다.
		bitmaps = new Bitmap[ maximum * maximum / 2 ];
		for (int i = 0; i < bitmaps.length; i++) {
			bitmaps[ i ] = bitmapsDrawables[i].getBitmap();
		}
	}
	
	private void recoverAllCards(){
		// 카드를 모두 뒤집힌 상태로 놓는다.
		for (int i = 0; i < buttons.length; i++){
			buttons[ i ].setImageBitmap( bitmapBack );
		}		
	}
	
	private void recoverCard(){
		
		// 뒤집어본 카드를 다시 돌려놓는다.		
		buttons[ selectedIndex[ 0 ] ].setImageBitmap( bitmapBack );
		buttons[ selectedIndex[ 1 ] ].setImageBitmap( bitmapBack );
		
	}
	
	private void setViews(){		
		int temp;
		
		temp = 0;
		
		mainLinear.removeAllViews();
		
		// 버튼 생성
		buttons = new ImageButton[maximum * maximum];
		for (int i = 0; i < buttons.length; i++)
			buttons[ i ] = new ImageButton(this);
		
		// 행을 생성한다 수평 리니어이다.
		linearRows = new LinearLayout[maximum];
		
		for (int i = 0; i < linearRows.length; i++) {

			linearRows[i] = new LinearLayout(this);
			linearRows[i].setGravity( Gravity.CENTER_HORIZONTAL ); // 가운데 정렬
			linearRows[i].setOrientation( LinearLayout.HORIZONTAL );			
			
			for (int j = 0; j < maximum; j++) {
				// linearLayout 에 이미지버튼을 배치한다
				linearRows[i].addView(buttons[temp++]);
			}
			// 메인 LinearLayout 에 뷰를 배치한다,.
			mainLinear.addView(linearRows[i]);
		}
	}
	
	private void init(){

		// 이벤트 리스너 등록
		for( int i = 0 ; i < buttons.length ; i++ ){
			buttons[ i ].setOnClickListener( mClickListener );
		}
		
		
		// selectedindex 는 사용자가 선택한 카드의 index 가 들어있다.
		// 이미 선택된 카드를 다시 선택했는지 판단한다.
		selectedIndex =  new int[ 2 ];		
		for( int i = 0 ; i < selectedIndex.length ; i++ ){
			selectedIndex[ i ] = -1;
		}
		
		// correctindexarray 는 이미 맞춘 카드의 index 가 저장된다.
		correctIndexArray = new int[ maximum * maximum ];
		for( int i = 0 ; i < correctIndexArray.length ; i++ ){
			correctIndexArray[ i ] = -1;
		}
		
		// 선택한 카드의 이미지 index 가 저장된다.
		// 이미지가 서로 일치하는지 판단한다,.
		selectedCardIndex = -1;
		
		// bPassible 이 true 일때만 버튼클릭이 작동한다.
		// 이것은 1 초동안 딜레이상태일때 다른 버튼이 클릭되는것을 막는다.
		bPassible = true;
		
	}
	
	Handler mHandler = new Handler(){
		@Override
		public void handleMessage( Message msg ){
			
			switch( msg.what )
			{
			case 0:				// 틀린경우
				recoverCard();				
			case 1: // 맞은경우
				selectedIndex[ 0 ] = -1;
				selectedIndex[ 1 ] = -1;
				bPassible = true;
				tv.setTextColor( Color.BLUE );
				tv.setText( R.string.choice1 );
				break;
			}
			
		}
		
	};
	
	public boolean onCreateOptionsMenu( Menu menu ){
		super.onCreateOptionsMenu( menu );
		
		// 다시섞기 메뉴 추가
		MenuItem item = menu.add( 0, 1, 0, "다시 섞기"); 
		item.setIcon( R.drawable.icon );
		
		return true;
	}
	
	public boolean onOptionsItemSelected( MenuItem item ){
		switch( item.getItemId() )
		{
			case 1:
				
				//초기화
				getRandomImages();
				mixIndexes();					
				setViews();
				recoverAllCards();
				init();
				return true;
		}
		return false;
	}
	
	Button.OnClickListener mClickListener = new View.OnClickListener() {
		// 버튼 클릭시 호출된다.
		@Override		
		public void onClick(View v) {
			if( bPassible == false )
				return ;
			
			for( int i = 0 ; i < buttons.length ; i++ ){
				if( v.equals( buttons[i] ) ){
					
					 // 이미 선택한 카드일경우					
					if( selectedIndex[ 0 ] == i ){
						tv.setTextColor( Color.RED );
						tv.setText( R.string.already_selected );
						return ;
					}
						
					// 이미 정답을 맞춘 카드일 경우
					if( correctIndexArray[ i ] != -1 ){
						tv.setTextColor( Color.RED );
						tv.setText( R.string.already_correct );
						return ;
					}
					
					// 클릭한 이미지를 보여준다.
					buttons[ i ].setImageBitmap( bitmaps[ indexes[ i ] ] );

					// 처음클릭한 이미지이면
					if( selectedIndex[ 0 ] == -1 ){
						selectedCardIndex = indexes[ i ];
						tv.setTextColor( Color.YELLOW );
						tv.setText( R.string.choice2 ); // 두번째를 클릭해주세요
						selectedIndex[ 0 ] = i;
					}												
					else{
						//두번째 클릭한 이미지이면
						selectedIndex[ 1 ] = i;
						
						// 이미지가 일치하면
						if( selectedCardIndex == indexes[ i ] ){
							
							tv.setTextColor( Color.BLUE );
							tv.setText( R.string.correct ); // 맞췄습니다!
							// 맞춘이미지 index 를 저장한다.
							correctIndexArray[ selectedIndex[ 0 ] ] = 1;
							correctIndexArray[ selectedIndex[ 1 ] ] = 1;
							for( int j = 0 ; j < correctIndexArray.length ; j++ ){
								
								// 맞추지 못한 카드가 있을 경우
								if( correctIndexArray[ j ] == -1 ){
									// 1초후에 핸들러 실행
									mHandler.sendEmptyMessageDelayed( 1 , 1000 );
									return ;									
								}								
							}
							
							tv.setTextColor( Color.BLUE );
							tv.setText( R.string.clear ); // 모두 맞췄을 경우
							
							bPassible = false;
							
							return ;
														
							
						}
						else{
							
							tv.setTextColor( Color.RED );
							tv.setText( R.string.wrong ); // 틀렸습니다.
							mHandler.sendEmptyMessageDelayed( 0 , 1000 );
							bPassible = false;
						}
					}
					break;
				}
			}
		}
	};
	
	

	public static int[] getRandomNumbers(int start, int end, int num) {
		// 이 메서드는 start ~ end 범위의 정수중 num 갯수만큼의 정수를
		// 랜덤하게 중복없이 뽑아냅니다.
		int size; // 크기입니다
		int temp; // 임시변수입니다.

		if (start > end || start == end) // 시작위치가 끝 위치보다 크거나 같으면 실패입니다.
			return null;

		size = end - start + 1; // size 의 크기를 구합니다.

		if (size < num) // size 의 크기보다 원하는 숫자의 갯수가 많으면 실패입니다.
			return null; 
		int[] numbers;
		double[] dRandom;
		int[] result = null;
		
		try {

			numbers = new int[size];
			dRandom = new double[size];
			result = new int[num];

			// 랜덤한 수를 size 만큼 생성합니다.
			for (int i = 0; i < dRandom.length; i++) {
				dRandom[i] = Math.random();
			}
			// 차대로 할당 후
			temp = start;
			for (int i = 0; i < numbers.length; i++) {
				numbers[i] = temp++;
			}

			// 랜덤으로 생성된 숫자를 정렬하여 섞습니다.
			for (int i = 0; i < dRandom.length; i++) {
				for (int j = 0; j < dRandom.length - 1; j++) {
					double tmp = dRandom[j];
					temp = numbers[j];

					if (dRandom[j] > dRandom[j + 1]) {
						dRandom[j] = dRandom[j + 1];
						dRandom[j + 1] = tmp;
						numbers[j] = numbers[j + 1];
						numbers[j + 1] = temp;
					}
				}
			}
			// 결과를 리턴합니다.
			for (int i = 0; i < result.length; i++) {
				result[i] = numbers[i];
			}
		} catch (Exception e) {
		}

		return result;
	}
}

}}}

다른 난이도의 HomeWork6_1.java 와 HomeWork6_2.java 는 카드의 갯수에 관련된 코드를 제외하고는 HomeWork6.java 와 같습니다. <br><br>

다음으로 레이아웃에는 이러한 것들이 있습니다.

https://comp166-koreauniv.googlecode.com/files/xml.PNG

첫번째 화면인 activity_first.xml은 다음과 같은 화면을 나타내줍니다.

https://comp166-koreauniv.googlecode.com/files/Screenshot_2013-12-10-16-08-59.png

코드는 다음과 같습니다.

{{{

<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context=".First" >

    <ImageView
        android:id="@+id/imageView1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentTop="true"
        android:layout_centerHorizontal="true"
        android:src="@drawable/start" />
                 // 화투그림
    <ImageView
        android:id="@+id/imageView2"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@+id/imageView1"
        android:layout_centerHorizontal="true"
        android:src="@drawable/title" />
                 // 카드 뒤집기 게임 타이틀
    <ImageView
        android:id="@+id/ImageView02"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@+id/imageView2"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="94dp"
        android:src="@drawable/startbutton" />
                 // 시작! 버튼
</RelativeLayout>

}}}

난이도 설정하는 두번째 화면인 Second.xml은 다음과 같습니다.

https://comp166-koreauniv.googlecode.com/files/Screenshot_2013-12-10-16-09-04.png

코드는 다음과 같습니다.

{{{

<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context=".Second" >

    <ImageView
        android:id="@+id/imageView1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_centerHorizontal="true"
        android:layout_marginBottom="146dp"
        android:src="@drawable/u1" />
           //어린이용 버튼
    <ImageView
        android:id="@+id/imageView3"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_above="@+id/imageView1"
        android:layout_alignLeft="@+id/imageView2"
        android:layout_marginBottom="22dp"
        android:src="@drawable/u3" />
           //청소년용 버튼
    <ImageView
        android:id="@+id/imageView2"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_above="@+id/imageView3"
        android:layout_centerHorizontal="true"
        android:layout_marginBottom="25dp"
        android:src="@drawable/u2" />
           //어른용 버튼
</RelativeLayout>

}}}

main.xml은 기본적으로 있었던 파일로 게임의 기본적인 배경화면을 만들어주기만 하는 xml 입니다. 코드는 다음과 같습니다.

{{{

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    >
<TextView  
    android:layout_width="fill_parent" 
    android:layout_height="wrap_content" 
    android:text="@string/hello"
    android:id="@+id/text"
    android:textColor="#ff0000ff"
    android:textSize="12pt"
    />
    <LinearLayout
	android:id="@+id/main_linear"
    android:orientation="vertical"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    />
</LinearLayout>

}}}