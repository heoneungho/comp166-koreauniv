#summary 이민주의 실습 페이지입니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{
pubic class Beersong{
	public static void main (String[] arg){
		int beerNum = 99;
		String word = "bottles"; // 복수형
		while (beerNum > 0) {
			if (beerNum ==1){
				word = "bottles"; // 단수형(한 병인 경우)
			}

			system.out.println(beerNum + " " + word + "of beer on the wall");
			system.out.println(beerNum + " " + word + "of beer.");
			system.out.println("Take one down.");
			system.out.println("Pass it around.");
			beerNum = beerNum-1;

			if (beerNum > 0){
				system.out.println(beerNum + " " + word + "of beer on the wall");
			} else{
				system.out.println("No more bottles of beer on the wall");
			}// else 문 끝
		}// while 순환문 끝
	}// main 클래스 끝
}//클래스 끝



}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{
public class a {
	public static void main (String[] args){
		String[] animalList = {"cat","dog","snake","fish","panda"};
		String[] foodList = {"pizza", "hamburger"," spaghetti"};
		String[] fruitList = {"apple", "banana", "peach", "orange", "watermelon"};

		int animalListLength = animalList.length;
		int foodListLength = foodList.length;
		int fruitListLength = fruitList.length;

		int rand1 = (int) (Math.random() * animalListLength);
		int rand2 = (int) (Math.random() * foodListLength);
		int rand3 = (int) (Math.random() * fruitListLength);

		String Phrase = animalList[rand1] + " " + foodList[rand2]+ " " + fruitList[rand3];

		System.out.println("What we need is a " + Phrase);
}
}		

}}}

*52p 집중토론* _요약_

 * 자바 가상 머신:프로그램을 실행하고 출력을 하고 보안문제를 예방하고 
바이트 코드가 만들어지고 실행되기 전까지 외부인의 접근을 확인하는 작업을 함.
 * 컴파일러:파일을 줌. 문법이 맞는지 검사함. 
실행할때 순수한 인터프리터 언어 
바이트코드로 만들어진 것은 컴파일러가 필요없음. 
변수에 이상한 유형의 데이터를 저장하게 되면 위험한데, 이것을 판단하고 유연성을 확보한다.
비공개 메소드 또는 고치면 안되는 메소드에 접근하는 것과 
클래스의 핵심적인 내용에 접근하는 코드와 같이 사람들이 함부로 보면 안되는 코드를 건드리는 것을 방지해줌.



*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
class Exercise1b {
	public static void main (String [] args) {
		int x=1;
		while (x<10){
			if (x>3) {
				System.out.println("big x");
				}
x=x+1//수정
			}

		}
}

class small{//수정
public static void main( String [] args){
	int x=5;
	while (x>1){
		x=x-1;
		if(x<3){
			System.out.println("small x");
			}	
		}
}
}
class Exercise1b {
public static void main (String[] args){//수정
	int x=5;
	while (x > 1) {
		x=x-1;
		if (x<3){
			System.out.println("small x");
			}
		}
}
}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체에서 자신에 대해 아는것
 * 메소드: 객체에서 자신이 하는것
 * 클래스: 객체를 만들기 위한 용도, 청사진
 * 테스트용 클래스: 새로운 클래스를 테스트 사기 위한 클래스
 

*68p Television* _채워넣기_

 * 인스턴스 변수: 전원, 채널
 * 메소드: Poweron(), setchannel(), Soundchange(), channelchange()


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{
public class GuessGame { 
        Player p1; 
        Player p2; 
        Player p3; 
        Player p4; 
 
        public void startGame() { 
                p1 = new Player(); 
                p2 = new Player(); 
                p3 = new Player(); 
 
                int guessp1 = 0; 
                int guessp2 = 0; 
                int guessp3 = 0; 
                int guessp4 = 0; 
 
                boolean p1isRight = false; 
                boolean p2isRight = false; 
                boolean p3isRight = false; 
                boolean p4isRight = false; 
 
                int targetNumber = (int)(Math.random()*10); 
                System.out.println("0 이상 9이하의 숫자를 맞춰보세요."); 
 
                while(true) { 
                        System.out.println("맞춰야 할 숫자는 " + targetNumber + "입니다."); 
 
                        p1.guess(); 
                        p2.guess(); 
                        p3.guess(); 
                        p4.guess(); 
 
                        guessp1 = p1.number; 
                        System.out.println("1번 선수가 찍은 숫자: " + guessp1); 
 
                        guessp2 = p2.number; 
                        System.out.println("2번 선수가 찍은 숫자: " + guessp2); 
 
                        guessp3 = p3.number; 
                        System.out.println("3번 선수가 찍은 숫자: " + guessp3); 
                 
                        guessp4 = p4.number; 
                        System.out.println("4번 선수가 찍은 숫자: " + guessp4); 
 
                        if(guessp1 == targetNumber) { 
                                p1isRight = true; 
                        } 
                        if(guessp2 == targetNumber) { 
                                p2isRight = true; 
                        } 
                        if(guessp3 == targetNumber) { 
                                p3isRight = true; 
                        } 
                        if(guessp4 == targetNumber) { 
                                p4isRight = true; 
                        } 
 
                        if(p1isRight || p2isRight || p3isRight || p4isRight)    { 
                                 
                                System.out.println("맞춘 선수가 있습니다."); 
                                System.out.println("1번 선수: " + p1isRight); 
                                System.out.println("2번 선수: " + p2isRight); 
                                System.out.println("3번 선수: " + p3isRight); 
                                System.out.println("4번 선수: " + p4isRight); 
                                System.out.println("게임 끝"); 
                                break; //게임이 끝났으므로 break문으로 순환문을 빠져나간다. 
 
                        }else { 
                        //아직 아무도 못 맞췄기 때문에 계속 해야 합니다. 
                        System.out.println("다시 시도해야 합니다."); 
                        }// if/else 부분 끝 
                }// 순환문 끝 
        }// 메소드 끝 
}// 클래스 끝 
 
public class Player { 
        int number = 0; //찍은 숫자를 저장할 변수 
 
        public void guess() { 
                number = (int) (Math.random()*10); 
                System.out.println("찍은 숫자: " + number); 
        } 
} 
 
public class GameLauncher { 
        public static void main(String[] args) { 
                GuessGame game = new GuessGame(); 
                game.startGame(); 
        } 

}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
public class TapeDeck { 
 
        boolean canRecord = false; 
         
        void playTape() { 
                System.out.println("tape playing"); 
        } 
         
        void recordTape() { 
                System.out.println("tape recording"); 
        } 
} 
 
public class TapeDeckTestDrive { 
        public static void main(String[] args){ 
                 
                TapeDeck t = new TapeDeck();// 이부분! 
                t.canRecord = true; 
                t.playTape(); 
                 
                if(t.canRecord == true){ 
                        t.recordTape(); 
                } 
        } 
 
} 
 
---------------------------------------------------------------- 
public class DVDPlayer { 
         
        boolean canRecord = false; 
         
        void recordDVD() { 
                System.out.println("DVD recording"); 
        } 
 
} 
 
 
public class DVDPlayerTestDrive { 
        public static void main(String[] args) { 
                 
                DVDPlayer d = new DVDPlayer(); 
                d.canRecord = true; 
                d.recordDVD();//play 대신 record로!! 
                 
                if(d.canRecord == true) { 
                        d.recordDVD(); 
                } 
        } 

}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =
 
*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수:원시 변수: 정수, 부울, 부동소수점 수와 같은 기초적인 값 으로 단순한 비트 패턴으로 나타낼 수 있는 값  
레퍼런스변수: 객체에 대한 레퍼선스가 들어감 

 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{
class Dog 
{ 
        String name; 
        public static void main(String [] args) 
        { 
                int n,i; 
                Dog dog1 = new Dog(); 
                dog1.bark(); 
                dog1.name = "Bart"; 
 
                         
                Dog[] mydogs = new dog[100]; 
 
                for(i=0;i<99;i++) 
                { 
                        myDogs[i] = new Dog(); 
                } 
                myDogs[99] = dog1; 
 
                for(i=0;i<99;i++) 
                { 
                        myDogs[i].name = "Bart" + i ; 
                } 
                 
                myDogs[99] = "Bart" + n-1; 
 
                System.out.println("마지막 개의 이름 :");       
                System.out.println("myDogs[99].name); 
         
                int x = 0; 
                 
                while(x < myDogs.length) 
                { 
                        myDog[x].bark(); 
                        x++; 
                } 
        } 
 
        public void bark() 
        { 
                System.out.println(name + "이(가) 왈! 하고 짖습니다."); 
        } 
         
        public void eat() { } 
        public void chaseCat() { }
}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
class Books 
{ 
        String title; 
        String author; 
} 
 
class BooksTestDrive 
{ 
        public static void main(String [] args) 
        { 
                Books [] myBookes = new Books[3]; //Books 객체 생성 
                int x = 0; 
                myBooks[0] = new Books(); 
                myBooks[1] = new Books(); 
                myBooks[2] = new Books(); 
 
                myBooks[0].title = "The Grapes of Java"; 
                myBooks[1].title = "The Java Gatsby"; 
                myBooks[2].title = "The Java Cookbook"; 
                myBooks[0].author = "bob"; 
                myBooks[1].author = "sue"; 
                myBooks[2].author = "ian"; 
 
                while(x<3) // 차례대로 책이름 저자 프린트 
                {        
                        System.out.println(myBooks[x].title); 
                        System.out.println(" by "); 
                        System.out.println(myBooks[x].author); 
                        x++; 
                } 
        } 
} 
 
 
 
 
class Hobbits 
{ 
         
        String name; 
         
        public static void main(String [] args) 
        { 
                Hobbits [] h = new Hobbits[3]; //Hobbits 객체 생성 
                int z = 0; 
                 
                while(z<3) // 차례대로 is a good Hobbit name 프린트 
                { 
                        h[z] = new Hobbits(); 
                        h[z].name = "bilbo"; 
                        if(z==1) 
                                h[z].name = "frodo"; 
                        if(z==2) 
                                h[z].name = "sam"; 
                 
                        System.out.println(h[z].name + " is a "); 
                        System.out.println("good Hobbit name"); 
                        z++; 
                } 
        } 

}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?:밥
 * 문제가 된 부분은 어딘가요?:객체를 형성하지 않았다.

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:인스턴스 변수를 private로 지정, 게터와 세터를 생성 2. 인스턴스 변수를 부적절한 값으로 설정하지 못하게 한다(인스턴스 변수 범위 제한) 3. 세터를 사용하여 값을 바꿔도 다른 사용자에게 피해가 없다. 

 * 게터와 세터: 게터-인스턴스 변수의 값을 알아내기 위한 메소드. 일반적으로 인스턴스 변수의 값을 리턴함 세터- 인스턴스 변수의 값을 설정하기 위한 메소드. 전달된 값을 확인하고 인스턴스 변수의 값을 설정함 


 * 인스턴스 변수 vs 지역 변수: 인스턴트변수-
초기화하지 않아도 기본값이 있다 2. 클래스 내에서 선언된다 
지역변수-1. 반드시 초기화해야 된다 2. 메소드 내에서 선언된다 


 
*107p Dog* _실행_

{{{
class Dog{ 
        int size; 
        String name; 
 
        void bark(){ 
                if(size>60)  
                        System.out.println("Woof! Woof"); 
                else if(size>14) 
                        System.out.println("Ruff! Ruff!"); 
                else 
                        System.out.println("Yip! Yip!"); 
        } 
}
}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
class XCopy{ 
        public static void main(String[] args){ 
                int orig = 42; 
 
                XCopy x = new XCopy(); 
 
                int y = x.go(orig); 
 
                System.out.println(orig + " " + y); 
        } 
 
        int go(int arg){ 
                arg = arg * 2; 
 
                return arg; 
        } 
}//이상 없음
}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
익스트림 프로그래밍은 소프트웨어 개발 방법중의 하나인데 가장 큰 장점은 스펙이 변경되어도 고객이 원하는 것을 고객이 원하는 기한에 맞춰서 제공할 수 있다는점이다. 
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{
public class SimpleDotCom{ 
        int[] locationCells; 
        int hits = 0; 
 
        void setLocationCell(int[] cellLocations){ 
                locationCells = cellLocations; 
 
        } 
 
        public String checkYourself(String userGuess){ 
                int guess = Integer.parseInt(userGuess); 
                String result = "miss"; 
 
                for(int cell : locationCells){ 
                        if(guess == cell){ 
                                result = "hit"; 
                                hits++; 
                                break; 
                        } 
                } 
                 
                if(hits==locationCells.length) 
                        result = "kill"; 
                 
                return result; 
                         
        } 
} 
 
import java.util.Scanner; 
 
public class SimpleDotComTest{ 
         
 
        public static void main(String[] args){ 
                SimpleDotCom dot = new SimpleDotCom(); 
                Scanner scan = new Scanner(System.in); 
 
                int[] locations = {2,3,4,5}; 
                dot.setLocationCell(locations); 
                 
                System.out.println("The chances : " + (locations.length+3)); 
                for(int i=0;i<locations.length+3;i++){ 
                        String guess = scan.next(); 
                        String result = dot.checkYourself(guess); 
                        System.out.println(result); 
                        if(dot.hits==locations.length) 
                                break; 
                } 
                 
        } 
}
}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{
클래스 SimpleDotComTestDrive1 
 
public class SimpleDotComTestDrive1 { 
         
        public static void main (String args[]) { 
                 
                int numOfGuesses = 0;  
                GameHelper helper = new GameHelper();   
                 
                SimpleDotCom theDotCom = new SimpleDotCom();  
                int randomNum = (int) (Math.random()*5);  
                 
                int[] locations = {randomNum, randomNum+1, randomNum+2}; 
                theDotCom.setLocationCells(locations);  
 
                boolean[] checks = {false, false, false}; // boolean형 배열의 값을 모두 false로 초기화 
                theDotCom.setcheckCells(checks); // 새로운 배열을 만들어 준다.      
 
                boolean isAlive = true; 
                 
                while(isAlive == true) { 
                        String guess = helper.getUserInput("enter a number");  
                        String result = theDotCom.checkYourself(guess);  
                        numOfGuesses++; 
                         
                        if(result.equals("kill")) { 
                                isAlive = false;  
                                System.out.println(numOfGuesses + "guesses"); 
                        } 
                } 
        }  



클래스 SimpleDotCom1 
 
public class SimpleDotCom1 { 
         
        int[] locationCells; 
        int numOfHits = 0;  
 
        boolean[] checkCells; // 눌린 닷컴의 위치를 체크하기 위한 boolean형의 배열 선언 
         
        public void setLocationCells (int[] locs) { 
                 
                locationCells = locs; 
        } 
 
        public void setcheckCells (int[] checks) { /*set해주는 함수 또한 하나 추가한다.*/ 
                 
                checkCells = checks; 
        } 
 
        public String checkYourself (String stringGuess) { 
                 
                int guess = Integer.parseInt(stringGuess);  
                String result = "miss"; 
 
                for(int i = 0 ;i < locationCells.length ; i++) { 
                        if(guess == locationCells[i]) { 
 
                                if(checkCells[i] == true)  // 이미 true인 경우는 break을 통해 빠져나오게 해준다. 
                                        break; 
 
                                result = "hit";   
                                numOfHits++; 
 
                                checkCells[i] = true; // 누른 번호가 맞았다면 checkCells[i]를 true로 바꿔준다. 
 
                                break; 
                                 
                        } 
                } 
                 
                if(numOfHits == locationCells.length) {  
                        result = "kill"; 
                } 
                System.out.println(result);  
                return result;  
        }        
}
클래스 GameHelper1 
 
import java.io.*; 
public class GameHelper1 {  
        public String getUserInput(String prompt) { 
                String inputLine = null;  
                System.out.print(prompt + " ");  
                 
                try { 
                        BufferedReader is = new BufferedReader(new InputStreamReader(System.in)); 
                        inputLine = is.readLine(); 
                        if(inputLine.length() == 0)  
                                return null; 
                } catch (IOException e) { 
                        System.out.println("IOException: "+ e); 
                } 
                 
                return inputLine;  
        } 
         
}
}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{
public class DotComSecondoption 
{ 
        int[] locationCells; 
        int numOfHits = 0; 
        boolean[] hitCells = {false, false,false };//Define hitCells 
         
        public void setLocationCells(int [] locs) 
        { 
                locationCells = locs; 
        } 
         
        public String checkYourself(String stringGuess) 
        { 
                int guess = Integer.parseInt(stringGuess); 
                String result = "miss"; 
                for(int i = 0 ;i < locationCells.length; i++) 
                { 
                        if(guess == locationCells[i]&& hitCells[i] == false) 
                        { 
                         
                                result = "hit"; 
                                hitCells[i] = -1; //false -> -1 
                                numOfHits++; 
                                break; 
                        } 
                } 
 
         
        if(numOfHits == locationCells.length) 
        { 
                result = "kill"; 
        } 
        System.out.println(result); 
        return result; 
 
        } 
} 
 
import java.io.*;
}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{
//다른 클래스는 모두 같습니다.

import java.util.ArrayList;

public class DotCom 
{
	private ArrayList<String> locationCells;
	//private int numOfHits;
	//없어도 됩니다.
	
	//배열 대신 string이 들어가는 ArrayList를 사용합니다.
	
	public void setLocationCells(ArrayList<String> loc)
	{
		locationCells = loc;
	}
	
	public String checkYourself(String userInput)//새로 바뀐 인자명입니다.
	{
		String result = "miss";
		
		int index = locationCells.indexOf(userInput);
		//사용자가 추측한 위치가 ArrayList에 들어있는지 확인합니다. 들어있으면 인덱스 번호가, 그렇지 않으면 -1이 리턴됩니다.
		if(index >= 0)//인덱스가 0 이상이면
		{
			locationCells.remove(index);//제거
		
			if(locationCells.isEmpty())//목록이 비어있다면 닷컴이 죽었다는 것을 알 수 있다.
				retult = "kill";	
			else
				result = "hit";
		}//바깥쪽 if문 끝
		
		return result;
	}//메소드 끝
}//클래스 끝


}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{
import java.util.*;

public class DotCom
{
	private ArrayList<String> locationCells;//DotCom의 인스턴스 변수 -셀위치
	private String name;//DotCom의 인스턴스 변수  -DotCom의 이름

	public void setLocationCells(ArrayList<String> loc)
	{
		locationCells = loc;//DotCom의 위치를 갱신합니다.
	}
	
	public void setName(String n)
	{
		name = n;//이름을 설정합니다
	}
	
	public String checkYourself(String userInput)
	{
		String status = "miss";//처음에 miss로 초기화합니다.
		int index = locationCells.indexOf(userInput);
		//ArrayList의 indexOf()메소드를 사용하여  사용자가 추측한 위치가 ArrayList에 들어있으면 인덱스를 그렇지 않으면 -1을 리턴합니다.
		if(index >= 0)
		{
			locationCells.remove(index);
			//ArrayList의 remove 메소드를 써서 그 항목을 지웁니다.
			if(locationCells.isEmpty())//isEmpty를 써서 모든 위치를 맞췄는지 확인합니다.
			{
				status = "kill";
				System.out.println("Ouch! You sunk " + name + "    : ( ");
				//DotCom이 가라앉았다고 알려줍니다.
			}
			else
			{
				status = "hit";//아니면 hit
			}
		}//if문 끝

	return status;
	}
	//miss or hit or kill을 리턴합니다.
}

import java.util.*;

public class DotComBust 
{
	private GameHelper helper = new GameHelper();//GameHelper객체를 생성합니다.
	private ArrayList<DotCom> dotComsList = new ArrayList<DotCom>();//DotCom객체로 이루어진 ArrayList를 만듭니다.
	private int numOfGuesses = 0;//추측한 숫자를 나타내는 변수를 선언하고 0으로 초기화합니다.
	
	private void setUpGame()//닷컴 객체 몇 개를 만들고 위치를 지정합니다.
	{
		DotCom one = new DotCom();
		one.setName("Pets.com");
		DotCom two = new DotCom();
		two.setName("eToys.com");
		DotCom three = new DotCom();
		three.setName("Go2.com");
		dotComsList.add(one);
		dotComsList.add(two);
		dotComsList.add(three);
		//DotCom 객체 세 개를 만들고 각각 이름을 부여하고 ArrayList에 저장합니다.
		
		System.out.println("Your goal is to sink three dot coms.");
		System.out.println("Pets.com, eToys.com, Go2.com");
		System.out.println("Try to sink them all in the fewest number of guesses");
		//사용자에게 간단한 게임 방법을 설명합니다.
		
		for(DotCom dotComToSet : dotComsList)//목록에 있는 각 DotCom에 대해 반복합니다.
		{
			ArrayList<String> newLocation = helper.placeDotCom(3);
			//DotCom의 위치를 지정하기 위한 보조 메소드를 호출합니다.
			dotComToSet.setLocationCells(newLocation);
			//이 DOtCom 객체의 세터 메소드를 호출하여 방금 보조 메소드에서 받아온 위치를 지정합니다.
			
		}//for 순환문 끝
	}//setUpgame 메소드 끝
	
	private void startPlaying()
	{
		while(!dotComsList.isEmpty())//dotComsList가 비어있지 않으면 계속 반복합니다.
		{
			String userGuess = helper.getUserInput("Enter a guess");
			//사용자의 입력을 받습니다.
			checkUserGuess(userGuess);
			//checkUserGuess 메소드를 호출합니다.
			
		}//while문 끝
		finishGame();
	}//startPlaying 메소드 끝

	private void checkUserGuess(String userGuess)
	{
		numOfGuesses++;//메소드가 호출되면 사용자 추측 횟수를 증가시킵니다.
		String result = "miss";//miss라고 가정합니다.
		
		for(DotCom dotComToTest : dotComsList)//목록의 모든 DotCom 객체에 대해 반복합니다.
		{
			result = dotComToTest.checkYourself(userGuess);
			//DotCom 객체에 사용자가 입력한 위치가 맞는지 또는 객체가 죽었는지 물어봅니다.
			if(result.equals("hit"))//결과가 hit 이라면
			{
				break;//순환문을 빠져나옵니다.
			}
			if(result.equals("kill"))//결과가 kill이라면
			{
				dotComsList.remove(dotComToTest);//DotCom 목록에서 빼고
				break;//순환문을 빠져나옵니다.
			}
		}//for 문 끝
	}//checkUserGuess 메소드 끝
	
	private void finishGame()//게임 결과를 알려주는 메시지를 출력합니다.
	{
		System.out.println("All Dot Coms are dead! Your stock is now worthless");
		if(numOfGuesses <= 18)
		{
			System.out.println("It only took you " + numOfGuesses + " guesses.");
			System.out.println("You got out before your options sank");
		}
		else
		{
			System.out.println("Took you long enough. " + numOfGuesses + " guesses.");
			System.out.println("Fish are dancing with your options");
		}
	}

	public static void main(String[] args)
	{
		DotComBust game = new DotComBust();//DotComBust 객체를 만듭니다.
		game.setUpGame();//게임 객체에 게임을 설정하라는 명령을 내립니다.
		game.startPlaying();
		//게임 객체에서 주 게임 진행 순환문을 돌리라는 명령을 내립니다
	}

}


import java.io.*;
import java.util.*;

public class GameHelper
{
	private static final String alphabet = "abcdefg";
	private int gridLength = 7;
	private int gridSize = 49;
	private int[] grid = new int[gridSize];
	private int comCount = 0;
	
	public String getUserInput(String prompt)
	{
		String inputLine = null;
		System.out.println(prompt +" ");
		try
		{
			BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
			inputLine = is.readLine();
			if(inputLine.length() == 0)
				return null;	
		}
		catch(IOException e)
		{
			System.out.println("IOException: " + e);
		}
	
		return inputLine.toLowerCase();
		
	}
	
	public ArrayList<String> placeDotCom(int comSize)
	{
		ArrayList<String> alphaCells = new ArrayList<String>();//F6과 같은 좌표가 들어감
		String temp = null;//나중에 연결하기 위한 임시 String배열
		int[] coords = new int[comSize];//현재 후보 좌표
		int attempts = 0;//시도 횟수를 세기 위한 카운터
		boolean success = false;//적당한 위치를 찾았느지 표시하기 위한 플래그
		int location = 0;//현재 시작 위치
		
		comCount++;//n번째 닷컴
		int incr = 1;//수평 방향으로 증가시킬 값 설정
		if((comCount % 2)==1)//홀수 번째 닷컴인 경우
		{
			incr = gridLength;//수직 방향으로 증가시킬 값 결정
		}
		
		while(!success & attempts++ < 200)//주 검색 순환문(32)
		{
			location = (int) (Math.random() * gridSize);//임의 시작 위치를 구함
			//System.out.print(" try " + location);
			
			int x = 0;//위치시킬 닷컴의 n번째 위치
			success = true;//성공할 것으로 가정함
			while(success && x < comSize)//닷컴이 들어갈 자리가 비었는지 확인
			{
				if(grid[location] == 0)//아직 사용하지 않았으면
				{
					coords[x++] = location;//위치 저장
					location += incr;//다음 칸 확인
					if(location >= gridSize)//경계를 벗어난 경우
						success = false;//실패
					if(x > 0 & (location % gridLength == 0))//경계를 벗어난 경우(오른쪽)
						success = false;//실패
					else//이미 사용중인 경우
						//System.out.print(" used " + location)
						success = false;//실패
				}
			}
			
		}//while 끝

	int x = 0;//위치를 알파벳 좌표로 바꿈
	int row = 0;
	int column = 0;
	
	while(x < comSize)
	{
		grid[coords[x]] = 1;//기본 그리드 좌표를 사용중 으로 표시
		row = (int) (coords[x] / gridLength);//행 값을 구함
		column = coords[x]&gridLength;//열 값을 구함
		temp = String.valueOf(alphabet.charAt(column));//숫자가 된 열을 알파벳으로 변환
		
		alphaCells.add(temp.concat(Integer.toString(row)));
		x++;
		//System.out.println("   coord  " + x + " = "  + alphaCells.get(x-1));
		//DotCom의 위치를 알려주는 메소드
				
	}
	
	return alphaCells;
	}
	
}

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

* 상속: 한 클래스가 다른 클래스를 상속하는 것을 하위클래스가 상위클래스로부터 상속받는다고 한다. 자바에서는 하위클래스가 상위클래스를 확장한다고 이야기합니다. 상속은 하위클래스가 상위클래스의 멤버를 물려받는 것을 의미합니다. 인스턴스 변수는 오버라이드할 필요가 없기 때문에 하지 않습니다.상위 클래스는 추상적이고 하위 클래스는 조금 더 구체적입니다.


 * 다형성:     여러가지 형태의 변수들이나 객체를 하나의 배열같은 것 안에서 나타낼 수 있다. 부모의 레퍼런스 변수가 자식을 가리키도록 하는 것이 다형성이다.


*208p 클래스 계층 구조* _클래스로 구현_

{{{
class Animal
{
        String picture;
        Boolean food;
        int hunger;
        float boundaries;
        float location;

        void makeNoise()
        {
                //소리를 낼 때의 행동
        }

        void eat()
        {
                //그 동물이 음식을 접했을 때의 행동
        }

        void sleep()
        {
                //그 동물이 잠들어 있을 때의 행동
        }

        void roam()
        {
                //그 동물이 먹거나 자고 있지 않을 때의 행동
        }

}
class Feline extends Animal//Feline은 Animal을 상속받습니다.
{
        void roam()
        {
                //roam을 오버라이드합니다.
        }
}

class Canine extends Animal//Canine은 Animal을 상속받습니다.
{
        void roam()
        {
                //roam을 오버라이드합니다.
        }
}

class Lion extends Feline//Lion은 Feline을 확장합니다.
{
        void makeNoise()
        {
                //makeNoise를 오버라이드합니다.
        }

        void eat()
        {
                //eat를 오버라이드합니다.
        }
}

class Tiger extends Feline//Tiger은 Feline을 확장합니다.
{
        void makeNoise()
        {
                //makeNoise를 오버라이드합니다.
        }

        void eat()
        {
                //eat를 오버라이드합니다.
        }
}



class Cat extends Feline//Cat은 Feline을 확장합니다.
{
        void makeNoise()
        {
                //makeNoise를 오버라이드합니다.
        }

        void eat()
        {
                //eat를 오버라이드합니다.
        }
}

class Hiippo extends Animal//Hippo는 Animal을 확장합니다.
{
        void makeNoise()
        {
                //makeNoise를 오버라이드합니다.
        }

        void eat()
        {
                //eat를 오버라이드합니다.
        }
}

class Wolf extends Canine//Wolf는 Canine를 확장합니다.
{
        void makeNoise()
        {
                //makeNoise를 오버라이드합니다.
        }

        void eat()
        {
                //eat를 오버라이드합니다.
        }
}

class Dog extends Canine//Dog는 Canine를 확장합니다.
{
        void makeNoise()
        {
                //makeNoise를 오버라이드합니다.
        }

        void eat()
        {
                //eat를 오버라이드합니다.
        }
}


}}}
 
*224p 오버라이드와 오버로딩* _요약_

* 오버라이드: 오버라이딩은 하위클래스에서 메소드의 역할을 변경하거나 확장할 필요가 있을 때 상속받은 메소드를 새로 정의하는 것이다.인자는 똑같아야 하고, 리턴 유형은 호환 가능해야 한다. 메소드를 더 접근하기 어렵게 만들면 안 된다.


 * 오버로딩: 이름이 같고 인자 목록이 다른 메소드 두 개를 만드는 것입니다.리턴 유형이 달라도 된다. 리턴 유형만 바꿀 수는 없다. 접근 단계를 마음대로 바꿀 수는 없다.
 

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
//1번이 제대로 작동해요.
public class MonsterTestDrive
{
        public static void main(String[] args)
        {
                Monster[] ma = new Monster[3];//Monster 타입의 배열을 만듭니다.

                ma[0] = new Vampire();//0의 위치에 Vampire객체를 집어넣습니다.
                ma[1] = new Dragon();//1의 위치에 Dragon객체를 집어넣습니다.
                ma[2] = new Monster();//2의 위치에 Monster객체를 집어넣습니다.

                for(int x = 0; x < 3; x++)//반복문입니다.
                {
                        ma[x].frighten(x);//배열의 각 객체가 frighten을 하도록 합니다.
                }
        }
}

class Monster
{
        boolean frighten(int d)
        {
                System.out.println("arrrgh");
                return true;
        }
}

class Vampire extends Monster//Vampire는 Monster을 확장합니다.
{
        boolean frighten(int x)
        {
                System.out.println("a bite?");
                return false;
        }
}

class Dragon extends Monster//Dragon은 Monster을 확장합니다.
{
        boolean frighten(int degree)
        {
                System.out.println("breath fire");
                return true;
        }
}

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

* 인터페이스: 인터페이스는 곧 추상 클래스 입니다.
 
 * 다형성: 다형성은 여러 형태를 의미합니다.

 * 추상 클래스: 추상클래스는 abstract 을 앞에 붙임으로써 만들 수 있다. 추상 클래스는 반드시 확장해야만 하는 클래스이다.
 
 * 추상 메소드: 추상 메소드는 반드시 오버라이드해야만 하는 메소드이다. 추상메소드를 만들 때에는 클래스도 반드시 추상 클래스로 만들어야 한다. 추상 클래스가 아닌 클래스에 추상 메소드를 집어넣을 수는 없다.
 
 * 다중 상속: 상위 클래스를 두 개 사용하는 접근법이다. 


= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

  * 힙에서의 변수: 힙은 모든 객체가 사는 곳인데 인스턴스 변수는 객체 안에 삽니다. 그러므로 인스턴스 변수는 힙 안에서 삽니다.

 * 스택에서의 변수: 스택은 메소드가 호출되면 쌓이는 곳입니다 그리고 그 안에서는 지역 변수가 삽니다. 지역 변수로 들어있는 객체는 리모컨만 스택에 들어갑니다. 객체 자체는 힙 안에 있습니다.

 * 생성자: 생성자에는 객체를 생성할 때 실행되는 코드가 들어있습니다. 즉, 어떤 클래스 유형에 대해 new 키워드를 사용했을 때 실행되는 코드가 들어있죠. 사용자가 직접 생성자를 만들지 않아도 자바에서는 알아서 default 생성자를 생성해줍니다.

 * 널 레퍼런스: NULL 레퍼런스를 설정하면 리모컨의 기능을 해제하는 것과 같다. 널 레퍼런스에는 널(아무것도 없음)을 나타내는 비트들이 들어있다.
 
*298p 집중토론* _요약_

* 인스턴스 변수: 인스턴수 변수는 객체 내애서 산다. 객체는 힙 안에서 살고 있다. 인스턴스 변수는 객체의 상태를 저장하는 변수이다. 객체가 가비지 컬렉터에 의해 처리된다면 인스턴스 변수도 없어지고 만다.

 * 지역 변수: 지역 변수는 인스턴스 변수에 비해서 수명이 짧다. 지역 변수는 자신의 프레임이 스택 맨 위로 올라갈 때 까지 아무것도 하지 않는다. 인스턴스가 변수가 들어있는 객체를 지역 변수에서만 참조할 수도 있다.

*302p 5분 미스터리* _구현후 주석달기_

{{{
import java.util.*;
class V2Radiator
{
	V2Radiator(ArrayList<SimUnit> list)
	{
		for(int x = 5; x < 5 ; x++)
		{
			list.add(new SimUnit("V2Radiator"));//list에 SimUnit 객체를 더합니다.
		}
	}
}

class V3Radiator //extends V2Radiator
{
	V3Radiator(ArrayList<SimUnit> lglist)
	{
		//super(lglist);
		for(int g = 0; g < 10 ; g++)
		{
			lglist.add(new SimUnit("V3Radiator"));//lglist에 SimUnit객체를 더합니다.
		}
	}
}

class RetentionBot
{
	RetentionBot(ArrayList<SimUnit> rlist)
	{
		rlist.add(new SimUnit("Rention"));//rlist에 SimUnit객체를 더합니다.
	}
}

public class TestLifeSupportSim 
{
	public static void main(String[] args)
	{
		ArrayList<SimUnit> aList = new ArrayList<SimUnit>();//ArrayList를 만듭니다.
		V2Radiator v2 = new V2Radiator(aList);//V2Radiator객체 생성.
		V3Radiator v3 = new V3Radiator(aList);//V3Radiator객체 생성.
		for(int z = 0 ; z < 20 ; z++)
		{
			RetentionBot ret = new RetentionBot(aList);//RententionBot객체 생성.
		}
	}
}

class SimUnit
{
	String botType;//문자열 선언
	SimUnit(String type)
	{
		botType = type;//대입
	}
	int powerUse()
	{
		if("Retention".equals(botType))
		{
			return 2;			
		}
		else
		{
			return 4;
		}
	}
}

/*V3Radiator를 호출할 때마다 super()을 통해 V2Radiator 생성자를 호출할 때 ArrayList를 전달하게 됩니다.
따라서 불필요하게 V2Radiator의 SimUnit다섯 개가 추가로 만들어집니다. */
}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드: 클래스의 인스턴스없이 메소드를 실행할 수 있는 메소드.
 * 정적 메소드를 선언하는 방법:  앞에 static을 붙인다.
 * static final: static final로 선언된 변수는 상수다.
 * 널 레퍼런스: 아무것도 가르치지 않는 것을 나타내는 레퍼런스다.
 * 오토 박싱: 원시유형을 컬렉션에 집어넣거나, 컬렉션에서 꺼낼 때, 거의 언제나 원시 유형이 들어갈 자리에 그 유형에 해당하는 래퍼 객체를 집어넣거나, 반대로 어떤 래퍼 객체가 들어갈 자리에 원시값을 집어넣을 수 있게하준다.
 * 정적 임포트: 정적 클래스, 정적 변수, enum 값 등을 사용할 때 활용해서 타이핑을 더 적게 해보자는 것.

*339p Calendar* _구현후 주석달기_

{{{

package calendar;

import java.util.*;

public class CalendarUsage {
	public static void main(String[] args) {
		Calendar c = Calendar.getInstance();
		
		c.set(1992,4,27,18,15);
		// 1992년 5월 27일 18시 15분
		long day1 = c.getTimeInMillis();
		// 1970년 1월 1일부터 경과한 시간을 밀리초 단위로 표현.
		day1 += 1000 * 60 * 60;
		// 밀리초단위로 한시간을 나타냅니다.
		c.setTimeInMillis(day1);
		// 한시간에 해당하는 밀리초 만큼의 시간을 더하고 시각을 갱신합니다.
		System.out.println("새 시간 " + c.get(c.HOUR_OF_DAY));
		c.add(c.DATE, 35);
		// 35일을 더합니다.
		System.out.println("35일 후 " + c.getTime());
		// 35일 후 결과값 출력.
		c.roll(c.DATE, 35);
		// 35일을 더하되, 달은 변경하지 않습니다.
		System.out.println("35일을 굴리면 " + c.getTime());
		// 35일 굴리고 결과값 출력.
		c.set(c.DATE, 1);
		// 날짜를 1로 설정.
		System.out.println("1일로 설정 " + c.getTime());
		 // 날짜를 1로 설정하고 결과값 출력.
	}
}


}}}

*342p 집중토론* _요약_

 * 인스턴스 변수: 정적변수는 절차위주의 프로그래밍 썼던 비효율적인 변수 할당 방법이므로 바람직하지 않다. 
 * 정적 변수: 하지만 정적변수는 이미 자바 환경 자체에 녹아들어가 있고 때에 따라서는 정적 변수를 쓰는 것이 편리할 때도 있으므로 정적변수를 매도해서만은 안된다.

*344p 컴파일러가 되어봅시다* _구현후 주석달기_


{{{
package toBeCompiler;

public class StaticSuper {
	static { // 실행하자마자 바로 초기화
		System.out.println("super static block");
	}
	
	StaticSuper() { // 생성자 메소드에 ()를 넣어줍니다.
		System.out.println("super constructor");
	}
}

//----------------------------------------

package toBeCompiler;

public class StaticTests extends StaticSuper {
	static int rand; 
	
	static { // 실행하자마자 바로 초기화
		rand = (int) (Math.random() * 6);
		System.out.println("static block " + rand);
	}
	
	StaticTests() {
		System.out.println("constructor");
	}
	
	public static void main(String[] args) {
		System.out.println("in main");
		StaticTests st = new StaticTests();
	}
	
}

// 고로 출력 결과는
// super static block
// static block 0
// in main
// super constructor
// constructor
// 가 된다.

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{
package exception;

public class Test01 {
	public static void main(String[] args) {
		
		// 앞뒤 상황 생략
		
		public void takeRisk() throws BadException {
			if (abandonAllHope) {
				throw new BadException();
			}
		}
		
		public void crossFingers() {
			try {
				anObject.takeRisk(); // 오류가 발생할 수도 있는 행동
			} catch (BadException ex) {
				System.out.println("Aaargh!"); // 그 때 예외 상황을 발생시키고 출력할 것.
				ex.printStackTrance();
			}
		}
		
	}
}
}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{
package soundApp;

import javax.sound.midi.*;

public class MiniMiniMusicApp {

		public static void main(String[] args) {
			MiniMiniMusicApp mini = new MiniMiniMusicApp(); // 미니미니뮤직앱 생성 >_<
			mini.play(); // 실행
		} // main 메소드 끝
		
		public void play() {
			
			try {
				Sequencer player = MidiSystem.getSequencer(); // 시퀀서를 받아서 엽니다.
				player.open();
				
				Sequence seq = new Sequence(Sequence.PPQ, 4);
				
				
				Track track = seq.createTrack(); // 시퀀서에 트랙을 요청
				
				// 트랙에 미디이벤트를 집어넣습니다.
				ShortMessage a = new ShortMessage(); 
				a.setMessage(144, 1, 44, 100);
				MidiEvent noteOn = new MidiEvent(a, 1);
				track.add(noteOn);
				
				ShortMessage b = new ShortMessage();
				b.setMessage(128, 1, 44, 100);
				MidiEvent noteOff = new MidiEvent(b, 16);
				track.add(noteOff);
				
				player.setSequence(seq); // 시퀀서에 시퀀스를 보냅니다.
				
				player.start(); // CD의 재생 버튼을 누르는 것과 비슷!
			
			} catch (Exception ex) {
				ex.printStackTrace();
			}

		} // play 메소드 끝
} // 클래스 
}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{
package soundApp2;

import javax.sound.midi.*;

public class MiniMusicCmdLine {

		public static void main(String[] args) {
			MiniMusicCmdLine mini = new MiniMusicCmdLine(); // 미니미니뮤직앱 생성 >_<
			if (args.length < 2) {
				System.out.println("악기와 음 높이를 지정하는 인자를 입력하세요.");
			} else {
				int instrument = Integer.parseInt(args[0]); // 악기선택
				int note = Integer.parseInt(args[1]); // 음 높이선택
				mini.play(instrument, note); // 실행
			}
		} // main 끝
		
		public void play(int instrument, int note) {
			
			try {
				
				Sequencer player = MidiSystem.getSequencer(); // 시퀀서를 받아서 엽니다.
				player.open();
				Sequence seq = new Sequence(Sequence.PPQ, 4);
				Track track = seq.createTrack(); // 시퀀서에 트랙을 요청
				
				MidiEvent event = null; // 무엇을 할지,  언제 할지 결정함.
				
				ShortMessage first = new ShortMessage();
				first.setMessage(192, 1, instrument, 0);
				MidiEvent changeInstrument = new MidiEvent(first,1);
				track.add(changeInstrument);
				
				// 트랙에 미디이벤트를 집어넣습니다.
				ShortMessage a = new ShortMessage(); 
				a.setMessage(144, 1, 44, 100);
				MidiEvent noteOn = new MidiEvent(a, 1);
				track.add(noteOn);
				
				ShortMessage b = new ShortMessage();
				b.setMessage(128, 1, 44, 100);
				MidiEvent noteOff = new MidiEvent(b, 16);
				track.add(noteOff);
				player.setSequence(seq); // 시퀀서에 시퀀스를 보냅니다.
				player.start(); // CD의 재생 버튼을 누르는 것과 비슷!
			
			} catch (Exception ex) {
				ex.printStackTrace();
			}

		} // play 메소드 끝
} // 클래스
}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}