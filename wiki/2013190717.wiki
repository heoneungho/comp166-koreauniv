#summary 이민경의 실습 페이지입니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{
public class BeerSong{
	public static void main(String[] args){
		int beerNum = 99;
		String word = "bottles";//plural
 
    		while (beerNum>0){ 
			System.out.println(beerNum + " " + word + " of beer on the wall"); 
			System.out.println(beerNum + " " + word + " of beer."); System.out.println("Take one down."); 
			System.out.println("Pass it around"); beerNum -= beerNum; 

    			if (beerNum==1){
				word = "bottle";//singular 
		   	} 

    			if(beerNum>0){
			        System.out.println(beerNum + " " + word + " of beer on the wall\n"); 
    			}
			
 			else {
			       System.out.println("No more bottles of beer on the wall\n"); 
			} 

    		} 

    	} 

}

}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{
public class PhraseOMatic{
    public static void main(String[] args){
        String[] wordListOne = {"attractive", "bad", "calm", "dangerous", "envious"};
        String[] wordListTwo = {"fancy", "giant", "huge", "irritating", "junior"};
        String[] wordListThree = {"anteater", "bear", "cat", "dog", "elphant"};

        int oneLength = wordListOne.length;
        int twoLength = wordListTwo.length;
        int threeLength = wordListThree.length;

        int rand1 = (int)(Math.random()*oneLength);
        int rand2 = (int)(Math.random()*twoLength);
        int rand3 = (int)(Math.random()*threeLength);

        String phrase = wordListOne[rand1] + " " + wordListTwo[rand2] + " " + wordListThree[rand3];

        System.out.println("What we need is a " + phrase);
    }
}

}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 1. 프로그램을 실행 2. 자바는 순수 인터프리터 언어가 아님 3. 유형에 엄격함 4. 동적 바인딩 지원
 * 컴파일러: 1. 문법 검사 2. 실행 시 문제점을 미리 감지 3. 핵심 코드 보안

*55p 컴파일러가 되어봅시다* _구현후 주석달기_


A
{{{
class Exercise1b{
	public static void main(String[] args){
		int x=1;
	
		while(x<10){
			if(x>3){
				System.out.println("big x");
			}//컴파일은 가능하지만 결과가 출력되지 않음
			x += 1;//x를 증가시켜서 결과가 출력되게 함
		}	
	}
}
}}}
B
{{{
//class이름이 없어서 컴파일 불가 -> 추가함
public class smallx {
	public static void main(String[] args){
		int x=5;
		
		while(x>1){
			x = x-1;
			
			if(x<3){
				System.out.println("small x");
			}
		}
	}

}
}}}
C
{{{
public class Exercise1b {
	//main 메소드가 없어서 컴파일 안됨
	public static void main(String[] args){
		int x=5;
		
		while(x>1){
			x = x-1;
			
			if(x<3){
				System.out.println("small x");
			}
		}
	}

}

}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체에서 자신에 대해 아는 것. 객체의 상태(데이터)를 나타내며 그 유형에 속하는 각 객체마다 값이 다르다.
 * 메소드: 객체가 할 수 있는 일. 
 * 클래스: 객체를 만들기 위한 청사진. 클래스로부터 만들어진 각 객체는 클래스의 인스턴스 변수용으로 쓰기 위한 변수를 가질 수 있다.
 * 테스트용 클래스: 중요하거나 복잡한 클래스 혹은 메소드를 테스트하기 위한 클래스
 

*68p Television* _채워넣기_

 * 인스턴스 변수: 해상도, 화면크기, 가격, 제조사, 소비전력, 스마트TV 여부
 * 메소드: Poweron(),Poweroff(), VolumeUP(), VolumeDown(), ChannelUp(), ChannelDown()


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

GuessGame
{{{
public class GuessGame{
	Player p1;
	Player p2;
	Player p3;
	Player p4;	

	public void startGame(){
		p1=new Player();
		p2=new Player();
		p3=new Player();
		p4=new Player();

		int guess1=0;
		int guess2=0;
		int guess3=0;
		int guess4=0;
		
		boolean correct1=false;
		boolean correct2=false;
		boolean correct3=false;
		boolean correct4=false;

		int answer=(int)(Math.random() * 10);
		System.out.println("Guess the number(0~9)");
		
		while(true){
			
			p1.guess();
			p2.guess();
			p3.guess();
			p4.guess();

			guess1 = p1.number;
			System.out.println("P1 : " + guess1);

			guess2 = p2.number;
			System.out.println("P2 : " + guess2);

			guess3 = p3.number;
			System.out.println("P3 : " + guess3);

			guess4 = p4.number;
			System.out.println("P4 : " + guess4);


			if(guess1 == answer)
				correct1 = true;

			if(guess2 == answer)
				correct2 = true;

			if(guess3 == answer)
				correct3 = true;

			if(guess4 == answer)
				correct4 = true;


			if(correct1 || correct2 || correct3 || correct4) {
				System.out.println("Congratulation!");
				System.out.println("P1 : " + correct1);
				System.out.println("P2 : " + correct2);
				System.out.println("P3 : " + correct3);
				System.out.println("P4 : " + correct4);
				System.out.println("The answer is " + answer);
				System.out.println("The end of the game");
				break;		
			}
			
			else 
				System.out.println("Try again");

			
		}
	}
}

}}}
Player
{{{
public class Player{
	int number=0;

	public void guess(){
		number=(int)(Math.random() * 10);
		//System.out.println("The Guessed number : " + number);
	}
}
}}}
GameLauncher.
{{{
public class GameLauncher{
	public static void main(String[] args){
		GuessGame game = new GuessGame();
		game.startGame();
	}
}	
}}}
*76p 컴파일러가 되어봅시다* _구현후 주석달기_

A
{{{
class TapeDeck{
	boolean canRecord=false;

	void playTape(){
		System.out.println("Tape Playing");
	}

	void recordTape(){
		System.out.println("Tape Recording");
	}
}

class TapeDeckTest{
	public static void main(String[] args){
		
		TapeDeck t = new TapeDeck();//새로운 TapeDeck을 만들어주어야 한다.
		
		t.canRecord=true;
		t.playTape();

		if(t.canRecord==true) 
			t.recordTape();
		
	}
}
}}}

B
{{{
class DVDPlayer{
	boolean canRecord=false;

	void recordDVD{
		System.out.println("DVD Recording");
	}

	void playDVD{
		System.out.println("DVD Playing");
	}//Test에서 playDVD 메소드를 호출했으므로 만들어준다.
}

class DVDPlayerTest{
	public static void main(String[] args){
		DVDplayer d = new DVDplayer();

		d.canRecord=true;
		d.playDVD();

		if(d.canRecord=true)
			d.recordDVD();
	}
}
}}}


= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 : 1. 단순한 비트 패턴으로 나타낼 수 있는 값 2. boolean, char, int, short, byte, long, float, double 3. 무언가를 담기 위한 컵이라고 할 수 있다.(컵을 넘치게 무언가를 담을 수 없다.) 4. 변수 이름은 알파벳, _, $ 로만 시작할 수 있다. 숫자는 불가 5. 변수 이름으로는 예약어를 사용할 수 없다.
 * 레퍼런스 : 1. 객체에 접근하는 방법을 알려주는 비트가 들어있다 2. 컵을 적용시키자면, 컵 안에 리모컨이 들어간 것과 같다 3. 모든 레퍼런스의 크기는 같다 4. 같은 클래스의 객체이기만 하면 다른 객체를 참조할 수도 있다(final없으면) 5. 

 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{
class Dog{
	String name;
	public static void main(String[] args){
		Dog dog1 = new Dog();
		dog1.bark();
		dog1.name = "Bart";

		Dog[] myDogs = new Dog[3];
		myDogs[0] = new Dog();
		myDogs[1] = new Dog();
		myDogs[2] = dog1;

		myDogs[0].name = "Fred";
		myDogs[1].name = "Marge";

		System.out.print("The name of the last Dog : ");
		System.out.println(myDogs[2].name);

		int x = 0;
		while(x<myDogs.length){
			myDogs[x].bark();
			x = x+1;
		}

	}

	public void bark(){
		System.out.println(name + " barks.");
	}
}



}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_
A
{{{
class Books{
	String title;
	String author;
}

class BooksTest{
	public static void main(String[] args){
		Books[] myBooks = new Books[3];

		myBooks[0] = new Books();
		myBooks[1] = new Books();
		myBooks[2] = new Books();//각자 개체를 추가해주어야 한다.

		int x = 0;
		myBooks[0].title = "The Grapes of Java";
		myBooks[1].title = "The Java Gatsby";
		myBooks[2].title = "The Java Cookbook";
		myBooks[0].author = "bob";
		myBooks[1].author = "sue";
		myBooks[2].author = "ian";

		while(x<3) {
			System.out.print(myBooks[x].title);
			System.out.print(" by ");
			System.out.println(myBooks[x].author);
			x = x+1;
		}
	}
}
}}}
B
{{{
class Hobbits{
	String name;
}
class HobbitsTest{
	public static void main(String[] args){
		Hobbits[] h = new Hobbits[3];
		int z=0;

		while(z<3){
			h[z] = new Hobbits();
			h[z].name = "bilbo";
			if(z==1)
				h[z].name = "frodo";
			if(z==2)
				h[z].name = "sam";
			
			System.out.print(h[z].name + " is a ");
			System.out.println("good Hobbit name.");

			z = z+1;//마지막에 증가시켜야한다. 그대로 실행하면 h[0]이 없다.

		}
	}
}





*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?:
 * 문제가 된 부분은 어딘가요?:

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:
 * 게터와 세터:
 * 인스턴스 변수 vs 지역 변수:
 
*107p Dog* _실행_
Dog
{{{
class Dog{
	int size;
	String name;

	void bark(){
		if(size>60) 
			System.out.println("Woof! Woof");
		else if(size>14)
			System.out.println("Ruff! Ruff!");
		else
			System.out.println("Yip! Yip!");
	}
}

}}}
DogTest
{{{


*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:
 * 다형성:

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}