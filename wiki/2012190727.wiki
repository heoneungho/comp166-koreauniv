#summary 2012190727 한혜원 자바자바자바
<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{

public class BeerSong{
           
      public static void main(String[] args)  {  
           int beerNum = 99;   //beerNum에 99저장           
           String word = "bottles";   //복수형

           while (beerNum > 0) {           //while 순환문 시작

               System.out.println(beerNum + " " + word + " of beer on the wall");
               System.out.println(beerNum + " " + word + " of beer.");
               System.out.println("Take one down.");
               System.out.println("Pass it around.");
               beerNum = beerNum - 1;

               if (beerNum == 1) {
                       word = "bottle";   //단수형(한 병인 경우)
                }


               if (beerNum > 0 ) {
                     System.out.println(beerNum + " " + word + " of beer on the wall");
               } else {
                    System.out.println("No more bottles of beer on the wall");
               } // else 문 끝
          } // while 순환문 끝
     } // main 클래스 끝
} // 클래스 끝

맥주의 갯수가 1일 경우에 bottles가 아닌 bottle로 출력되도록 if문의 위치를 변경하였습니다.

}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{

public class PhraseOMatic{

     public static void main (String[] args) {

     // 세 종류의 단어목록을 만듭니다. 적당히 필요한 단어를 추가해도 됩니다. 
          String[] wordListOne = { "red", "orange", "green", "blue" };
          String[] wordListTwo = { "is", "seems", "looks", "sounds" };
          String[] wordListThree = { "happy", "good", "warm", "nice" }; 

     //각 목록에 단어가 몇 개씩 들어있는지 확인합니다.
     int oneLength = wordListOne.length;
     int twoLength = wordListTwo.length;
     int threeLength = wordListThree.length;

     //난수 세 개를 발생시킵니다.
     int rand1 = (int) (Math.random() * oneLength);
     int rand2 = (int) (Math.random() * twoLength);
     int rand3 = (int) (Math.random() * threeLength);

     //이제 구문을 만듭니다.
     String phase = wordListOne[rand1] + " " +wordListTwo[rand2] + " " + wordLIstThree[rand3];

     //구문을 출력합니다.
     System.out.println("What we need is a " + phase);
     }//main class 끝

}//class 끝

}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 
 1. 프로그램실행, 보안, 동적 바인딩 지원, 
 2. 바이트 코드가 만들어진 후 바이트 코드가 실행되기 전까지 다른 누군가가 건드리지 않았는지 확인하는 작업 수행

 * 컴파일러: 
 1. 파일전송 
 2. 문법확인
 3. 바이트코드작성
 4. 데이터유형위반사항검사
 5. 접근위반 방지

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

//big x를 여러번 출력하는 프로그램
class Exercise1b {

     public static void main(String [] args) {

          int x = 1;  //x에 1 저장
          while ( x < 10 ) {  //while문 실행
          
               x = x + 1;  //x를 1씩 증가시킴
          
               if ( x > 3 ) {
                    System.out.println("big x");
               }  //if문 끝
          }  //while문 끝
     }  //main class 끝
}  //class 끝


//small x를 여러번 출력하는 프로그램
class Foo{

     public static void main(String [] args) {
          int x = 5;
          while ( x > 1 ) {
               x = x - 1;
               if ( x < 3) {
                    System.out.println("small x");
               }
          }
     }
}


//small x를 여러번 출력하는 프로그램

class Exercise1b {

     public static void main(String [] args) {
          int x = 5;
          while ( x > 1) {
               x = x - 1;
               if ( x < 3 ) {
                    System.out.println("small x");
               }
          }
     }
}


}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체에서 자신에 대해 아는 것. 객체의 상태(데이터) 객체를 부르는 다른 이름
 * 메소드: 객체에서 할 수 있는 일
 * 클래스: 객체를 만들기 위한 청사진
 * 테스트용 클래스: 새로운 클래스를 테스트하는 것
 

*68p Television* _채워넣기_

 * 인스턴스 변수: channel, volume, power
 * 메소드: TurnOn(), TurnOff(), VolumeUp(), VolumeDown(), 


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{

public class GuessGame{

     Player p1;      //player 변수 4개를 저장하기 위한 인스턴스 변수 네 개
      Player p2;
     Player p3;
     Player p4;

     public void startGame( ) {

          p1 = new Player();
          p2 = new Player();
          p3 = new Player();
          p4 = new Player();

          int guessp1 = 0; 
          int guessp2 = 0;
          int guessp3 = 0;
          int guessp4 = 0;

          boolean p1isRight = false; 
          boolean p2isRight = false; 
          boolean p3isRight = false;
          boolean p4isRight = false;

          int targetNumber = (int) (Math.random() * 10);
                                                               
          System.out.println("0 이상 9 이하의 숫자를 맞춰보세요.");

          while(true){
                
               System.out.println("맞춰야 할 숫자는 " + targetNumber + "입니다.0");

               p1.guess();
                  p2.guess();
               p3.guess();
               p4.guess();

               guessp1 = p1.number;
               System.out.println("1번 선수가 찍은 숫자: " + guessp1);

               guessp2 = p2.number;
               System.out.println("2번 선수가 찍은 숫자: " + guessp2);

               guessp3 = p3.number;
               System.out.println("3번 선수가 찍은 숫자: " + guessp3);

               guessp4 = p4.number;
               System.out.println("4번 선수가 찍은 숫자: " + guessp4);

                  if ( guessp1 == targetNumber)
                        p1isRight = true;
               if ( guessp2 == targetNumber)
                        p2isRight = true;
               if ( guessp3 == targetNumber)
                        p3isRight = true;
               if ( guessp4 == targetNumber)
                        p4isRight = true;

                  if ( p1isRight || p2isRight || p3isRight || p4isRight)
               {
                        System.out.println("맞춘 선수가 있습니다.");
                        System.out.println("1번 선수: " + p1isRight);
                        System.out.println("2번 선수: " + p2isRight);
                        System.out.println("3번 선수: " + p3isRight);
                        System.out.println("4번 선수: " + p4isRight);
                        System.out.println("게임 끝.");
                           
                        break;
               } else {
                        System.out.println("다시 시도해야 합니다.");
               }
        }
    }
}


public class Player
{
      int number = 0;
 
      public void guess() {
          number = (int) (Math.random() * 10);
          System.out.println("찍은 숫자: " + number);
      }
}


public class GameLauncher{

        public static void main(String[] args)
        {
               GuessGame game = new GuessGame();
               game.startGame();
         }
}

}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

class TapeDeck{

     boolean canRecord = false;

     void playTape() {
          System.out.println("tape playing");
     }

     void recordTape() {
          System.out.println("tape recording");
     }
}

class TapeDeckTestDrive{

     public static void main(String [] args) {

          TapeDeck t = new TapeDeck();
          t.canRecord = true;
          t.playTape();

          if (t.canRecord == true) {
               t.recordTape();
          }
     }
} 



class DVDPlayer{

     boolean canRecord = false;

     void recordDVD() {
          System.out.println("DVD recordings");
     }

     void playDVD() {
          System.out.println("DVD recording");
     }
}

class DVDPlayerTestDrive {

     public static void main(String [] args) {

          DVDPlayer d = new DVDPlayer();
          d.canRecord = true;
          d.playDVD();

          if (d.canRecord == true) {
               d.recordDVD();
          }
     }
}



}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

* 원시변수 vs 레퍼런스변수:

 원시변수 : 정수와 부울값과 같은 기본적인 값이 저장됩니다.
 레퍼런스 변수 : 객체의 레퍼런스가 저장됩니다.
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{

class Dog {

     String name;

     public static void main (String[] args) {
          // Dog 객체를 만들고 접근합니다.
          Dog dog 1 = new Dog();
          dog1.bark();
          dog1.name = "Bart";

          // 이번에는 Dog 배열을 만듭니다.
          Dog[] myDogs = new Dog[7];

          for(i = 0; i < 7; i++) 
               mydog[i] = new Dog();

          mydog[0].name = "red";
          mydog[1].name = "orange";
          mydog[2].name = "yellow";
          mydog[3].name = "green";
          mydog[4].name = "blue";
          mydog[5].name = "nam";
          mydog[6].name = "purple";        

          //이제 순환문을 사용하여 배열에 속해있는 모든 개가 짖도록 합시다.
          int x = 0;
          while(x < mydog.length) {
               mydog[x].bark();
               x = x + 1;
          }
     }

     public void bark() {
          System.out.println(name + "이(가) 왈! 하고 짖습니다.");
     }
}



}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

class Books {
     String title;
     String author;
}

class BooksTestDrive {

     public static void main(String [] args) {

          Books [] myBooks = new Books[3];
          int x = 0;
          myBooks[0] = new Books();
          myBooks[1] = new Books();
          myBooks[2] = new Books();

          myBooks[0].title = "The Grapes of Java";
          myBooks[1].title = "The Java Gatsby";
          myBooks[2].title = "The Java Cookbook";

          myBooks[0].author = "bob";
          myBooks[1].author = "sue";
          myBooks[2].author = "ian";

          while ( x < 3) {
               System.out.print(myBooks[x].title);
               System.out.print(" by ");
               System.out.println(myBooks[x].author);
               x = x + 1;
          }
     }
}

class Habbits{

     String name;

     public static void main (String [] args) {

           Hobbits [] h = new Hobbits[3];
               int z = -1;
               while( z < 2) {
               z = z + 1;
               h[z] = new Hobbits();
               h[z].name = "bilbo";
               if ( z == 1) {
                    h[z].name = "frodo";
               }
               if ( z == 2) {
                    h[z].name = "sam";
               }
               System.out.print(h[z].name + " is a ");
               System.out.println("good Hobbit name");
          }
     }
} 


}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?: 밥
 * 문제가 된 부분은 어딘가요?: 켄트가 refc값을 계속하여 초기화한다.

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화: 변수에 직접 접근하지 못하게 막는다. 
 * 게터와 세터: private로 선언된 변수에 대해 간접적으로 접근 가능
 * 인스턴스 변수 vs 지역 변수:

 인스턴스 변수 : 클래스 안에서 선언.
 지역 변수 : 메소드 안에서 선언. 

*107p Dog* _실행_

{{{

class Dog {

     int size;
     String name;
 
     void bark() {

          if (size > 60) {
               System.out.println("Wooof!  Wooof!");
          } else if (size > 14) {
                 System.out.println("Ruff!  Ruff!");
          }  else {
                 System.out.println("Yip!  Yip!");
          }
     }
}

class DogTestDrive{

     public static void main (String[] args) {
          Dog one = new Dog();
          one.size = 70;
          Dog two = new Dog();
          two.size = 8;
          Dog three = new Dog();
          three.size = 35;

          one.bark();
          two.bark();
          three.bark();
     }
}

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

class XCopy {

     public static void main(String [] args) {

          int orig = 42;
          XCopy x = new XCopy();
          int y = x.go(orig);
          System.out.println(orig + " " + y);
     }

     int go(int arg) {
          arg = arg * 2;
          return arg;
     }
} 

class Clock{

     String time;

     void setTime(String t) {
          time = t;
     }

     String getTime() {
          return time;
     }
}

class ClockTestDrive{

     public static void main(String [] args) {

          Clock c = new Clock();
          c.setTime("1245");
          String tod = c.getTime();
          System.out.println("time: " + tod);
     }
}

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_ 익스트림 프로그래밍(XP, eXtreme Programming)이라는 방법은 

 * 익스트림 프로그래밍이란? 

 - 켄트 백 등이 제안한 소프트웨어 개발 방법
 - 비즈니스 상의 요구가 시시각각 변동이 심한 경우에 적합한 개발 방법
 - '고객이 원하는 양질의 소프트웨어를 빠른 시간안에 전달하는 것'이 목적
 -  실천방법
   1. Whole team
   2. Planning Game
   3. Customer Tests
   4. Small Releases
   5. Simple Design
   6. Test-driven Development
   7. Pair Programming
   8. Design Improvement
   9. Continuous Integration
   10. Collective Code Ownership
   11. Coding Standard


*137p~ 간단한 닷컴 게임* _구현후 주석달기_
*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_ 
{{{


}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속: 객체의 새로운 클래스를 정의할 때 상위 클래스의 구조와 메소드를 그대로 이어받을 수 있는것.
 * 다형성: 상위 클래스의 레퍼런스 변수가 하위 클래스를 가리키도록 하는 것.

*208p 클래스 계층 구조* _클래스로 구현_

{{{

class Animal {
     String picture;
     boolean food;
     int hunger;
     float boundaries;
     float location;

     void makeNoise(){}
     void eat(boolean food){}
     void sleep(){}
     void roam(){}
}

class Feline extends Animal{
     void roam();
}

class Lion extends Feline{
     void makeNoise();
     void eat(boolean food){}
}

class Tiger extends Feline{
     void makeNoise();
     void eat(boolean food);
}

class Cat extends Feline{
     void makeNoise();
     void eat(boolean food);
}

class Hippo extends Animal{
        void makeNoise();
        void eat(boolean food);
}

class Canine extends Animal{
        void roam();
}

class Wolf extends Canine{
        void makeNoise();
        void eat(boolean food);
}

class Dog extends Canine{
        void makeNoise();
        void eat(boolean food);
}


}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드: 상위 메소드를 하위 메소드에서 구현시 기능을 추가하는 것. 
 * 오버로딩: 이름이 같고 인자 목록이 다른 메소드 두 개를 만드는 것. 오버로드된 메소드는 다형성과는 전혀 관계가 없다. 

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

public class MonsterTestDrive {
     public static void main ( String [] args) {
          Monster [] ma = new Monster[3];
          ma[0] = new Vampire();
          ma[1] = new Dragon();
          ma[2] = new Monster();
          for ( int x = 0; x < 3 ; x ++) {
               ma[x].frighten(x);
          }
     }
}

class Monster{
     boolean frighten ( int d) {
          System.out.println("arrrgh");
          return true;
     }
}

class Vampire extends Monster {
     boolean frighten(int x) {
          System.out.println("a bite?");
          return false;
     }
}

class Dragon extends Monster {
     boolean frighten ( int degree) {
          System.out.println("breath fire");
          return true;
     }
}


}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스: 100% 추상 클래스
 * 다형성: 여러 형태
 * 추상 클래스: 인스턴스를 만스들 수 없는 클래스
 * 추상 메소드: 반드시 오버라이드 해야하는 메소드. 추상 메소드를 만들 때는 클래스도 반드시 추상 클래스로 만들어야 한다. 추상 클래스가 아닌 클래스에 추상 메소드를 집어넣을 수는 없다. 추상 메소드를 만드는 이유는 실제 메소드 코드를 잔혀 집어넣지 않았더라도 일련의 하위클래스를 위한 규약의 일부를 정의하기 위함. 
 * 다중 상속: multiple inheritance, 상위클래스를 두 개 사용하는 접근법에 발생하는 한 가지 문제점. 자바에서는 다중 상속 사용 불가. '죽음의 다이아몬드'라고 알려진 문제가 있기 때문.

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수: 객체가 저장되는 곳, 그 안에 인스턴스 변수 존재. 

 * 스택에서의 변수: 메소드가 저장되는 곳, 그 속에 지역변수가 존재

 * 생성자: 객체지향프로그래밍에서 쓰이는 객체 초기화 함수. 메모리 생성과 데이터의 초기화 

 * 널 레퍼런스: 레퍼런스 변수에 null값을 저장하여 아무것도 가리키지 않는 레퍼런스
 
*298p 집중토론* _요약_

 * 인스턴스 변수: 객체 내에 존재. 객체는 힙 안에 존재. 객체의 상태를 저장
 * 지역 변수: 인스턴스 변수에 비해 수명이 짧음.

*302p 5분 미스터리* _구현후 주석달기_

{{{

import java.util.*;
class V2Radiator {
     V2Radiator(ArrayLIst list) {
          for(int  x = 0; x < 5; x++) {
               list.add(new SimUnit("V2Radiator"));
          }
     }
}

class V3Radiator extends V2Radiator{
     V3Radiator (ArrayLIst lglist) {
          super(lglist);
          for(int g = 0; g < 10; g++) {
               lglist.add(new SimUnit("V3Radiator"));
          }
     }
} 

class RetentionBot {
     RetentionBot(ArrayList rlist) {
          rlist.add(new SimUnit("Retention"));
     }
}

public class TestLifeSupportSim{
     public static void main(String [] args) {
          ArrayList aList = new ArrayList();
          V2Radiator v2 = new V2Radiator(aList);
          V3Radiator v3 = new V3Radiator(aList);
          for(int z = 0; z > 20; z++) {
               RetentionBot ret = new RetentionBot(aList);
          }
     }
}

class SimUnit {
     String botType;
     SimUnit (String type){
          botType = type;
     }
     int powerUse() {
          if ("Retention".equals(botType)) {
               return 2;
          } else {
               return 4;
          }
     }
}

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드: 클래스의 인스턴스 없이 메소드를 실행할 수 있는 메소드.
 * 정적 메소드를 선언하는 방법: static
 * static final: static final로 선언된 변수는 상수이다. 초기화 후 변경이 불가능.
 * 널 레퍼런스: 레퍼런스 변수에 null을 저장함. 아무것도 가리키지 않음
 * 오토 박싱: 원시값과 래퍼객체 사이 변환을 자동으로 처리하는 기능
 * 정적 임포트: 

*339p Calendar* _구현후 주석달기_

{{{

import java.util.*;

public class Calender {

     public static void main(String[] args) {

          Calendar c = Calendar.getInstance();
          c.set(2004,0,7,15,40); //현재시각
            long day1 = c.getTimeInMillis(); //단위설정
            day1 += 1000*60*60;
                
          c.setTimeInMillis(day1); 
          System.out.println("new hour " + c.get(c.HOUR_OF_DAY));
                
          c.add(c.DATE, 35); 
          System.out.println("add 35 days " + c.getTime());
                
          c.roll(c.DATE, 35); 
          System.out.println("roll 35 days " + c.getTime());
                
          c.set(c.DATE, 1); 
     }
}

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수: 인스턴스내에 하나씩 존재.
 * 지역 변수: 클래스마다 하나씩 존재.

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

class StaticSuper{
 
     static {
          System.out.println("super static block");
     }

     StaticSuper{
          System.out.println("super constructor");
     }
}

public class StaticTests extends StaticSuper{
     static int rand;

     static {
          rand = (int) (Math.random() * 6);
          System.out.println("static block" + rand);
     }

     StaticTests() {
          System.out.println("constructor");
     }

     public static void main(String [] args) {
          System.out.println("in main");
          StaticTests st = new StaticTests();
     }
}

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

public void takeLisk() throws BadException{
     if(abandonAllHope){
          throw new BadException();
     }
}

public void crossFIngers(){
     try {
          anObject.takeRisk();
     } catch (BadException ex) {
          System.out.println("Aaargh!");
          ex.printStackTrace();
     }
}

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

import javax.sound.midi.*;

public class MiniMiniMusicApp {

     public static void main (Strin[] args) {
          MiniMiniMusicApp mini = new MiniMiniMusicApp();
          mini.play() {

     public void play() {

          try {
          
               Sequencer player = MidiSystem

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

import javax.sound.midi.*;

public class MiniMusicCmdLine {

     public static void main(String[] args) {
          MiniMusicCmdLine mini = new MiniMusicCmdLine();
          if (args.length < 2) {
               System.out.println("악기와 음 높이를 지정하는 인자를 입력하세요.");
          } else {
               int instrument = Integer.parseInt (args[0]);
               int note = Integer.parseInt(args[1]);
               mini.play(instrument, note);
          }
     }

     public void play(int instrument, int note) {
     
     try {

          Sequencer player = MidiSystem.getSequencer ();
          player.open();
          Sequence seq = new Sequence(Sequence.PPQ, 4);
          Track track = seq.createTrack();

          MidiEvent event = null;

          Short Message first = new ShortMessage();
          first.setMessage(192, 1, instument, 0);
          MidiEvent changeInstrument = new MidiEvent(first, 1);
          track.add(changeInstrument);

          ShortMessage a = new ShortMessage();
          a.setMessage(144, 1, note, 100);
          MidiEvent noteOn = new MideEvent (a, 1);
          track.add(noteOn);

          ShortMessage b = new ShortMessage();
          b.setMessage(128, 1, note, 100);
          MidiEvent noteOff = new MidiEvent(b, 16);
          track.add(noteOff);
          player.setSequence(seq);
          player.start();

          } catch (Exception ex) { ex.printStackTrace();}
     }
}

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

import javax.swing.*;

public class SimpleGuil {
     public static void main (String[] args) {

          JFrame frame = new JFrame();
          JButton button = new JButton("click me");

          frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

          frame.getContentPane().add(button);

          frame.setSize(300,300);

          frame.setVisible(true);
     }
}

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

import javax.swing.*;
import.java.awt.event.*;

public class SimpleGui1B implements ActionListener {
     JButton button;

     public static void main (String[] args) {
          SimpleGui1B gui = new SimpleGui1B();
          gui.go();
     }

public void go() {
     JFrame frame = new JFrame();
     button = new JButton("click me");

     button.addActionListener(this);

     frame.getContentPane().add(button);
     frame.setDeFaultCloseOperation(JFrame.EXIT_ON_CLOSE);
     frame.setSize(300,300);
     frame.setVisible(true);
}

public void actionPerformed(ActionEvent event) {
     button.setText("I've been clicked!");
}

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class SimpleGui3C implements ActionListener {

     JFrame frame;

     public static void main (String[] args) {
          SimpleGui3C gui = new SimpleGui3C();
          gui.go();
     }

     public void go() {
          frame = new JFrame();
          frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

          JButton button = new JButton("Change colors");
          button.addActionListener(this);

          MyDrawPanel drawPanel = new MyDrawPanel();

          frame.getContentPane().add(BorderLayout.SOUTH, button);
          frame.getContentPane().add(BorderLayout.CENTER, drawPanel);
          frame.setSize(300, 300);
          frame.setVisible(true);
     }

     public void actionPerformed(ActionEvent event) {
          frame.repaint();
     }
}

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

public class TwoButtons {

     JFrame frame;
     JLabel label;

     public static void main (String[] args) {
          TwoButtons gui = new TwoButtons ();
          gui.go();
     }

     public void go() {
          frame = new JFrame();
          frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

          JButton labelButton = new JButton("Change Lable");
          lableButton.addActionListener(new LableLIstener());

          JButton colorButton = new JButton("Change Circle");
          colorButton.addActionListener(new ColorListener());

          label = new JLabel("I'm a label");
          MyDrawPanel drawPanel = new MyDrawPanel();

          frame.getContentPane().add(BorderLayout.SOUTH, colorButton);
          frame.getContentPane().add(BorderLayout.CENTER, drawPanel);
          frame.getContentPane().add(BorderLayout.EAST, labelButton);
          frame.getContentPane().add(BorderLayout.WEST, label);

          frame.setSize(300, 300);
          frame.setVisible(true);
     }

     class LableListener implements ActionListener {
          public void actionPerformed(ActionEvent event) {
               label.setText("Ouch!");
          }
     }

     class ColorListener implements ActionListener {
          public void actionPerformed(ActionEvent event) {
               frame.repaint();
          }
     }
}


}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{


import javax.swing.*;
import java.awt.*;

public class SimpleAnimation {

     int x = 70;
     int y = 70;

     public static void main (String[] args) {
          SimpleAnimation gui = new SimpleAnimation ();
          gui.go();
     }

     public void go() {
          JFrame frame = new JFrame();
          frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

          MyDrawPanel drawPanel = new MyDrawPanel();

          frame.getContentPane().add(drawPanel);
          frame.setSize(300, 300);
          frame.setVisible(true);

          for (int i = 0; i < 130; i++) {

               x++;
               y++;

               drawPanel.repaint();

               try {
                    Thread.sleep(50);
               } catch(Exception ex) {   }
          }          
     }

     class MyDrawPanel extends JPanel {

          public void paintComponent(Graphics g) {
               g.setColor(Color.green);
               g.fillOval(x, y, 40, 40);
          }
     }
}

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

import javax.sound.midi.*;
import javax.swing.*;
import java.awt.*;

public class MiniMusicPlayer3 {

     static JFrame f = new JFrame("My First Music Video");
      static MyDrawPanel m1;

      public static void main(String [] args){

     MiniMusicPlayer3 mini = new MiniMusicPlayer3();
           mini.go();
      }

      public void setUpGui(){
            m1 = new MyDrawPanel();
              f.setContentPane(m1);
              f.setBounds(30, 30, 300, 300);
              f.setVisible(true);
       }

      public void go(){
           setUpGui();
             try{
                  Sequencer sequencer = MidiSystem.getSequencer();
                  sequencer.open();
                  sequencer.addControllerEventListener(m1, new int[] {127});
                  Sequence seq = new Sequence(Sequence.PPQ, 4);
                  Track track = seq.createTrack();

                  int r = 0; 
                  for(int i = 0; i < 60 ; i+=4){

                        r=(int)((Math.random()*50)+1);
                        track.add(makeEvent(144,1,r,100,i));
                        track.add(makeEvent(176,1,127,0,i));
                        track.add(makeEvent(128,1,r,100,i+2));
                  }

                      sequencer.setSequence(seq);
                  sequencer.start();
                  sequencer.setTempoInBPM(120);
          } 
                
          catch(Exception ex) {
                ex.printStackTrace();
          }
     }

      public MidiEvent makeEvent(int comd, int chan, int one, int two, int tick){

      MidiEvent event = null;
               
      try{
            ShortMessage a = new ShortMessage();
            a. setMessage(comd,chan,one,two);
            event = new MidiEvent(a, tick);
      } catch(Exception e){ }
                
      return event;

}

@SuppressWarnings("serial")

class MyDrawPanel extends JPanel implements ControllerEventListener{

      boolean msg = false;

      public void controlChange(ShortMessage event){
            msg = true;
            repaint();
       }

      public void paintComponent(Graphics g){

            if(msg){
                  @SuppressWarnings("unused")
                  Graphics2D g2= (Graphics2D)g;

                  int r = (int) (Math.random()*250);
                  int gr=(int) (Math.random()*250);
                  int b= (int) (Math.random()*250);

                  g.setColor(new Color(r,gr,b));

                  int ht=(int) ((Math.random()*120)+10);
                  int width=(int) ((Math.random()*120)+10);

                  int x=(int) ((Math.random()*40)+10);
                  int y=(int) ((Math.random()*40)+10);

                  g.fillRect(x, y, ht, width);
                  msg = false;
                  }
            }
      }
}


}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

import java.awt.*;
import javax.swing.*;
import javax.sound.midi.*;
import java.util.*;
import java.awt.event.*;

public class BeatBox {

     JPanel mainPanel;
     ArrayList<JCheckBox> checkboxList;
     Sequencer sequencer;
     Sequencer sequence;
     Track track;
     JFrame theFrame;
        
     String[] instrumentNames = {"Bass Drum", "Closed Hi-Hat","Open Hi-Hat","Acoustic Snare","Crash Cymbal","Hand Clap", "Cowbell","Vibraslap","Low-mid Tom","High Agogo","Open Hi Conga"};

     int[] instruments = {35,45,46,38,49,39,50,60,70,72,64,56,58,47,67,63};
        
     public static void main (String[] args) {
          new BeatBox().buildGUI();
     }
        
     public void buildGUI() {
          theFrame = new JFrame("Cyber BeatBox");
          theFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
          BorderLayout layout = new BorderLayout();
          JPanel background = new JPanel(layout);
          background.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));
                
          checkboxList = new ArrayList<JCheckBox>();
          Box buttonBox = new Box(BoxLayout.Y_AXIS);
                
          JButton start = new JButton("Start");
          start.addActionListener(new MyStartListener());
          buttonBox.add(start);
                
          JButton start = new JButton("Stop");
          stop.addActionListener(new MyStopListener());
          buttonBox.add(stop);
                
          JButton upTempo = new JButton("Tempo Up");
          upTempo.addActionListener(new MyUpTempoListener());
          buttonBox.add(upTempo);
                
          JButton downTempo = new JButton("Tempo Down");
          downTempo.addActionListener(new MyDownTempoListener());
          buttonBox.add(downTempo);
                
          Box nameBox = new Box(BoxLayout.Y_AXIS);
          for(int i = 0; i< 16; i++) {
               nameBox.add(new Label(instrumentNames[i]));
          }
                
          background.add(BorderLayout.EAST,buttonBox);
          background.add(BorderLayout.WEST,nameBox);
                
          theFrame.getContentPane().add(background);
                
          GridLayout grid = new GridLayout(16,16);
          grid.setVgap(1);
          grid.setHgap(2);
          mainPanel = new JPanel(grid);
          background.add(BorderLayout.CENTER,mainPanel);
                
          for(int i = 0; i < 256; i++) {
               JCheckBox c = new JCheckBox();
               c.setSelected(false);
               checkboxList.add(c);
               mainPanel.add(c);
          }
                
          setUpMidi();
                
          theFrame.setBounds(50,50,300,300);
          theFrame.pack();
          theFrame.setVisible(true);
     }
        
     public void setUpMidi() {

          try {
               sequencer = MidiSystem.getSequencer();
               sequencer.open();
               sequence = new Sequence(Sequence.PPQ,4);
               track = sequence.createTrack();
               sequencer.setTempoInBPM(120);
                        
          } catch(Exception e) {e.printStackTrace();}
     }
        
     public void buildTrackAndStart() {

          int[] trackList = null;
                
          sequence.deleteTrack(track);
          track = sequence.createTrack();
                
          for(int i = 0; i< 16; i++) {
               trackList = new int[16];
                        
               int key = instruments[i];
                        
                for(int j=0; j<16; j++) {

                     JCheckBox jc = checkboxList.get(j+(16*i));
                     if(jc.isSelected()) {
                          trackList[j] = key;
                     } else {
                          trackList[j] = 0;
                     }
                }
                        
                makeTracks(trackList);
                track.add(makeEvent(176,1,127,0,16));
          }
                
          track.add(makeEvent(192,9,1,0,15));
          try {
               sequencer.setSequence(sequence);
               sequencer.setLoopCount(sequencer.LOOP_CONTINUOUSLY);
               sequencer.start();
               sequencer.setTempoInBPM(120);
          } catch(Exception e) {e.printStackTrace();}
     }
        
     public class MyStartListener implements ActionListener {

          public void actionPerformed(ActionEvent a) {
               buildTrackAndStart();
          }
     }
        
     public class MyStopListener implements ActionListener {

          public void actionPerformed(ActionEvent a) {
               sequencer.stop();
          }
     }
        
     public class MyUpTempoListener implements ActionListener {

          public void actionPerformed(ActionEvent a) {

               float tempoFactor = sequencer.getTempoFactor();
               sequencer.setTempoFactor((factor)(tempoFactor * 1.03));
          }
     }
        
     public class MyDownTempoListener implements ActionListener {

          public void actionPerformed(ActionEvent a) {

               float tempoFactor = sequencer.getTempoFactor();
               sequencer.setTempoFactor((float)(tempoFactor*.97));
          }
     }
        
     public void makeTracks(int[] list) {

          for(int i=0; i<16; i++) {
               int key = list[i];
                        
                    if(key !=0) {
                         track.add(makeEvent(144,9,key,100,i));
                         track.add(makeEvent(128,9,key,100,i+1));
                    }
          }
     }
        
     public MidiEvent makeEvent(int comd,int chan,int one,int two, int tick) {

      MidiEvent event = null;
     try {
          ShortMessage a = new ShortMessage();
          a.setMessage(comd,chan,one,two);
          event = new MidiEvent(a,tick);
     } catch(Exception e) {e.printStackTrace();}
     return event;
     }
}

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

import java.awt.*;
import javax.swing.*;
import javax.sound.midi.*;
import java.util.*;
import java.awt.event.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

public class BeatBox{

     JPanel mainPanel;
     ArrayList<JCheckBox> checkboxList; 
      Sequencer sequencer;
     Sequence sequence;
     Track track;
     JFrame theFrame;

     String[] instrumentNames = {"Bass Drum", "Closed Hi-Hat", "Open Hi-Hat","Acoustic Snare", "Crash Cymbal", "Hand Clap", "High Tom", "Hi Bongo", "Maracas", "Whistle", "Low Conga", "Cowbell", "Vibraslap", "Low-mid Tom", "High Agogo", "Open Hi Conga"}; 
    
     int[] instruments ={35,42,46,38,49,39,50,60,70,72,64,56,58,47,67,63};             

     public static void main (String[] args) {
          new BeatBox().buildGUI();
     }
  
     public void buildGUI() {
          theFrame = new JFrame("Cyber BeatBox");
          theFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
          BorderLayout layout = new BorderLayout();
          JPanel background = new JPanel(layout);
          background.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));

          checkboxList = new ArrayList<JCheckBox>();
          Box buttonBox = new Box(BoxLayout.Y_AXIS);

          JButton start = new JButton("Start");
          start.addActionListener(new MyStartListener());
          buttonBox.add(start);         
          
          JButton stop = new JButton("Stop");
          stop.addActionListener(new MyStopListener());
          buttonBox.add(stop);

          JButton upTempo = new JButton("Tempo Up");
          upTempo.addActionListener(new MyUpTempoListener());
          buttonBox.add(upTempo);

          JButton downTempo = new JButton("Tempo Down");
          downTempo.addActionListener(new MyDownTempoListener());
          buttonBox.add(downTempo);
        
          JButton serial = new JButton("serializelt");
          serial.addActionListener(new MySendListener());
          buttonBox.add(serial);
        
          JButton restore = new JButton("restore");
          restore.addActionListener(new MyReadInListener());
          buttonBox.add(restore);
        
          Box nameBox = new Box(BoxLayout.Y_AXIS);
          
          for (int i = 0; i < 16; i++) {
               nameBox.add(new Label(instrumentNames[i]));
          }
        
          background.add(BorderLayout.EAST, buttonBox);
          background.add(BorderLayout.WEST, nameBox);

          theFrame.getContentPane().add(background);
          
          GridLayout grid = new GridLayout(16,16);
        
          grid.setVgap(1);
          grid.setHgap(2);
        
          mainPanel = new JPanel(grid);
          background.add(BorderLayout.CENTER, mainPanel);

          for (int i = 0; i < 256; i++) {                    
               JCheckBox c = new JCheckBox();
               c.setSelected(false);
               checkboxList.add(c);
               mainPanel.add(c);            
          } 
    
          setUpMidi();
          theFrame.setBounds(50,50,300,300);
          theFrame.pack();
          theFrame.setVisible(true);
     }
   
     public void setUpMidi(){
          try {
               sequencer = MidiSystem.getSequencer();
               sequencer.open();
               sequence = new Sequence(Sequence.PPQ,4);
               track = sequence.createTrack();
               sequencer.setTempoInBPM(120);
          } catch(Exception e) {
               e.printStackTrace();
          }
     } 

     public void buildTrackAndStart() {

          int[] trackList = null; 

           sequence.deleteTrack(track);
          track = sequence.createTrack();
        
          for (int i = 0; i < 16; i++) { 

                  trackList = new int[16];
         
               int key = instruments[i];
                  for (int j = 0; j < 16; j++ ) {         
                    JCheckBox jc = (JCheckBox) checkboxList.get(j + (16*i));
                     
                    if ( jc.isSelected()) { 
                         trackList[j] = key;
                    } else { 
                         trackList[j] = 0;
                    }   
               } 
                 
               makeTracks(trackList);                   
                  track.add(makeEvent(176,1,127,0,16));  
          }

          track.add(makeEvent(192,9,1,0,15));
               
            try {
               sequencer.setSequence(sequence); 
               sequencer.setLoopCount(sequencer.LOOP_CONTINUOUSLY); 
               sequencer.start();
               sequencer.setTempoInBPM(120);
          } catch(Exception e) {
               e.printStackTrace();
          } 
     }
 
     public class MySendListener implements ActionListener {

          @Override
          public void actionPerformed(ActionEvent e){

                boolean[] checkboxState = new boolean[256];
                   for(int i = 0; i < 256; i++) {
                     JCheckBox check = (JCheckBox) checkboxList.get(i);
                     if(check.isSelected()) {
                          checkboxState[i] = true;
                     }
                }
                
               try {
                    FileOutputStream fileStream = new FileOutputStream(new File("Checkbox.ser"));
                    ObjectOutputStream os = new ObjectOutputStream(fileStream);
                    os.writeObject(checkboxState);
               } catch(Exception ex) {
                    ex.printStackTrace();
               }

          }
     }

     public class MyReadInListener implements ActionListener{

          @Override
          public void actionPerformed(ActionEvent e){

               boolean[] checkboxState = null;
                
               try{
                    FileInputStream fileIn = new FileInputStream(new File("Checkbox.ser"));
                    ObjectInputStream is = new ObjectInputStream(fileIn);
                    checkboxState = (boolean[]) is.readObject();
               } catch(Exception ex) {
                    ex.printStackTrace();
               }
                
               for(int i = 0 ; i < 256; i ++){

                    JCheckBox check = (JCheckBox) checkboxList.get(i);
                    if(checkboxState[i])
                         check.setSelected(true);
                    else
                         check.setSelected(false);
                }
       
                   sequencer.stop();
                buildTrackAndStart();
          }
        
     }

            
           
     public class MyStartListener implements ActionListener {

          public void actionPerformed(ActionEvent a) {
               buildTrackAndStart();
          }
     }
   
     public class MyStopListener implements ActionListener {
          public void actionPerformed(ActionEvent a) {
               sequencer.stop();
          }
     } 

     public class MyUpTempoListener implements ActionListener {

         public void actionPerformed(ActionEvent a) {

              float tempoFactor = sequencer.getTempoFactor(); 
              sequencer.setTempoFactor((float)(tempoFactor * 1.03));
          }
     } 

     public class MyDownTempoListener implements ActionListener {

          public void actionPerformed(ActionEvent a){

               float tempoFactor = sequencer.getTempoFactor();
               sequencer.setTempoFactor((float)(tempoFactor * .97));
          }
     } 

     public void makeTracks(int[] list) {        
       
          for (int i = 0; i < 16; i++) {
               int key = list[i];

               if (key != 0) {
                    track.add(makeEvent(144,9,key, 100, i));
                    track.add(makeEvent(128,9,key, 100, i+1));
              }
          }
     }
        
     public  MidiEvent makeEvent(int comd, int chan, int one, int two, int tick) {

          MidiEvent event = null;
        
          try {
               ShortMessage a = new ShortMessage();
               a.setMessage(comd, chan, one, two);
               event = new MidiEvent(a, tick);
          } catch(Exception e) {
               e.printStackTrace(); 
          }
     
          return event;
     }

} 

}}}