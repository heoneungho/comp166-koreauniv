#summary 수업중 실습하는 내용을 올리게 되는 실습페이지입니다. 페이지의 내용은 각 학생에 의해서 관리됩니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{
public class BeerSong{
      public static void main(String[] args)  {
           int beerNum = 99;
           String word = "bottles";        //복수형

           while (beerNum > 0) {

                 if (beerNum == 1) {
                       word = "bottle";             //단수형(한 병인 경우)
                }

               System.out.println(beerNum + " " + word + " of beer on the wall");
               System.out.println(beerNum + " " + word + " of beer.");
               System.out.println("Take one down.");
               System.out.println("Pass it around.");
               beerNum = beerNum - 1;

               if (beerNum > 0 ) {
                     System.out.println(beerNum + " " + word + " of beer on the wall");
               } else {
                    System.out.println("No more bottles of beer on the wall");
               } // else 문 끝
          } // while 순환문 끝
     } // main 클래스 끝
} // 클래스 끝


}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{

public class PhraseOMatic{
     public static void main (String[] args) {

     // 세 종류의 단어목록을 만듭니다. 적당히 필요한 단어를 추가해도 됩니다. 
          String[] wordListOne = {"24/7", "multi-
Tier", "30,000 foot", "B-to-B", "win-win", "front-
end", "web-based", "pervasive", "smart"", "six-
sigma", "critical-path", "dynamic"};

     String[] wordListTwo = { "empowered", "stricky",
"valued-added", "oriented", "centric", "distributed", 
"clustered", "branded", "outside-the-box", "positioned",
"networked", "focused", "leveraged", "aligned",
"targeted", "shared", "cooperative", "accelerated"};

     String[] wordListThree = {"process", "tipping-
point", "solution", "architecture", "core competency",
"strategy", "mindshare", "portal", "space", "vision", 
"paradigm", "mission"};

     //각 목록에 단어가 몇 개씩 들어있는지 확인합니다.
     int oneLength = wordListOne.length;
     int twoLength = wordListTwo.length;
     int threeLength = wordListThree.length;

     //난수 세 개를 발생시킵니다.
     int rand1 = (int) (Math.random() * oneLength);
     int rand2 = (int) (Math.random() * twoLength);
     int rand3 = (int) (Math.random() * threeLength);

     //이제 구문을 만듭니다.
     String phase = wordListOne[rand1] + " " +
wordListTwo[rand2] + " " + wordLIstThree[rand3];

     System.out.println("What we need is a " + phase);
     }
}

}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 프로그램실행, 보안
 * 컴파일러: 파일전송, 문법확인, 바이트코드작성, 데이터유형위반사항검사사

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
class Exercise1b {
     public static void main(String [] args) {
          int x = 1;
          while ( x < 10 ) {
               x = x + 1;
               if ( x > 3 ) {
                    System.out.println("big x");
               }
          }
     }
}

class Foo{
     public static void main(String [] args) {
          int x = 5;
          while ( x > 1 ) {
               x = x - 1;
               if ( x < 3) {
                    System.out.println("small x");
               }
          }
     }
}

class Exercise1b {
     public static void main(String [] args) {
          int x = 5;
          while ( x > 1) {
               x = x - 1;
               if ( x < 3 ) {
                    System.out.println("small x");
               }
          }
     }
}


}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체에서 자신에 대해 아는 것. 객체의 상태(데이터). 객체를 부르는 다른 이름
 * 메소드: 객체에서 할 수 있는 일
 * 클래스: 객체를 만들기 위한 청사진
 * 테스트용 클래스:
 

*68p Television* _채워넣기_

 * 인스턴스 변수:
 * 메소드:TurnOn(), TurnOff(), VolumeUp(), VolumeDown(), 


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{

public class GuessGame






}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

class TapeDeck{
     boolean canRecord = false;
     void playTape() {
          System.out.println("tape playing");
     }
     void recordTape() {
          System.out.println("tape recording");
     }
}

class TapeDeckTestDrive{
     public static void main(String [] args) {
          TapeDeck += new TapeDeck();
          t.canRecord = true;
          t.playTape();

          if (t.canRecord == true) {
               t.recordTape();
          }
     }
} 

class DVDPlayer{
     boolean canRecord = false;
     void recordDVD() {
          System.out.println("DVD recordings");
     }
     void playDVD() {
          System.out.println("DVD recording");
     }
}

class DVDPlayerTestDrive {
     public static void main(String [] args) {
          DVDPlayer d = new DVDPlayer();
          d.canRecord = true;
          d.playDVD();
          if (d.canRecord == true) {
               d.recordDVD();
          }
     }
}



}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수:
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{

class Dog {
     String name;
     public static void main (String[] args) {
          // Dog 객체를 만들고 접근합니다.
          Dog dog 1 = new Dog();
          dog1.bark();
          dog1.name = "Bart";

          // 이번에는 Dog 배열을 만듭니다.
          Dog[] myDogs = new Dog[3];
          // 그리고 개를 몇 마리 집어넣습니다.
          myDogs[0] = new Dog();
          myDogs[1] = new Dog();
          myDogs[2] = dog1;

          // 배열 레퍼런스를 써서 Dog 객체에 접근합니다.
          myDogs[0].name = "Fred";
          myDogs[1].name = "Marge";

          // myDogs[2]의 이름이 뭐였지?
          System.out.print("마지막 개의 이름: ");
          System.out.println(myDogs[2].name);

          //이제 순환문을 사용하여 배열에 속해있는 모든 개가 짖도록 합시다.
          int x = 0;
          while(x < myDogs.length) {
               myDogs[x].bark();
               x = x + 1;
          }
     }

     public void bark() {
          System.out.println(name + "이(가) 왈! 하고 짖습니다.");
     }
     public void eat() {  }
     public void chaseCat() {  }
}



}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

class Books {
     String title;
     String author;
}

class BooksTestDrive {
     public static void main(String [] args) {
          Books [] myBooks = new Books[3];
          int x = 0;
          myBooks[0] = new Books();
          myBooks[1] = new Books();
          myBooks[2] = new Books();
          myBooks[0].title = "The Grapes of Java";
          myBooks[1].title = "The Java Gatsby";
          myBooks[2].title = "The Java Cookbook";
          myBooks[0].author = "bob";
          myBooks[1].author = "sue";
          myBooks[2].author = "ian";
          while ( x < 3) {
               System.out.print(myBooks[x].title);
               System.out.print(" by ");
               System.out.println(myBooks[x].author);
               x = x + 1;
          }
     }
}

class Habbits{
     String name;
     public static void main (String [] args) {
           Hobbits [] h = new Hobbits[3];
               int z = -1;
               while( z < 2) {
               z = z + 1;
               h[z] = new Hobbits();
               h[z].name = "bilbo";
               if ( z == 1) {
                    h[z].name = "frodo";
               }
               if ( z == 2) {
                    h[z].name = "sam";
               }
               System.out.print(h[z].name + " is a ");
               System.out.println("good Hobbit name");
          }
     }
} 


}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?:
 * 문제가 된 부분은 어딘가요?:

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:
 * 게터와 세터:
 * 인스턴스 변수 vs 지역 변수:
 
*107p Dog* _실행_

{{{

class Dog {
     int size;
     String name;
 
     void bark() {
          if (size > 60) {
               System.out.println("Wooof!  Wooof!");
          } else if (size > 14) {
                 System.out.println("Ruff!  Ruff!");
          }  else {
                 System.out.println("Yip!  Yip!");
          }
     }
}

class DogTestDrive{

     public static void main (String[] args) {
          Dog one = new Dog();
          one.size = 70;
          Dog two = new Dog();
          two.size = 8;
          Dog three = new Dog();
          three.size = 35;

          one.bark();
          two.bark();
          three.bark();
     }
}

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:
 * 다형성:

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}