#summary 이영기의 실습 페이지입니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{
    public class Beersong{
         public static void main (String[] args){
            int beerNum = 99;
            String word = "bottles";  //복수형

            while  (beerNum > 0) {
   
            if (beerNum == 1){
               word = "bottle";        //단수형(한 병인 경우)

             }

            System.out.println(beerNum + " " + word + " of beer on the wall");
            System.out.println(beerNum + " " + word + " of beer.");
            System.out.println("Take one down.");
            System.out.println("Pass it around.");
            beerNum = beerNum -1;

            if (beerNum > 0){
                if(beerNum ==1)
                             word = "bottle";
                System.out.println(beerNum + " " + word + " of beer on the wall");
             } else {
                 System.out.println ("No more bottles of beer on the wall");
             } //else 문 끝
         } //while 순환문 끝
      } //main 클래스 끝
  }//클래스 끝
}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{ 
 public class PhraseOMatic {
      public static void main (String[] args) {
         String[] wordListOne = {"dog","cat","elephant","pig","bird","tiger","lion","bear","eagle","cow","fish","goat"};

         String[] wordListTwo = {"Rooney","Torress","Gerrard","Son Heug min","Modrich","Ronaldo","Xavi","Alonso","Messi","J.Cole","Park Ji sung"};

         String[] wordListThree = {"Seoul","Paris","Busan","Daejeun","Incheon","Masan","New York","Chicago","LA","Wasington","Roma","Milan","Madrid"};

         int oneLength = wordListOne.length;
         int twoLength = wordListTwo.length;
         int threeLength = wordListThree.length;
 
         int rand1 = (int) (Math.random() * oneLength);
         int rand2 = (int) (Math.random() * twoLength);
         int rand3 = (int) (Math.random() * threeLength);


         String phrase = wordListOne [rand1] + " "+ wordListTwo[rand2]+" "+wordListThree[rand3];


          System.out.println("What we need is a "+phrase);

       }
     }


}}}

*52p 집중토론* _요약_

 * 자바 가상 머신:
 * 컴파일러:

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A

public class Exercise1b {
        public static void main (String[] args) {
                int x;
                while(x<10)
                {
                        if(x>3)
                                System.out.println("big x");
                        x++;     //x를 증가시켜서 무한루프 방지
                }
        }
}

B

public class Exercise1b {     /*클래스 선언이 필요하다*/ 
        public static void main (String[] args) {
                int x = 5;
                while(x>1)
                {
                        x = x-1;
                        if(x<3)
                        {
                                System.out.println("small x");
                        }       
                }
        }
}
                        
C

public class Exercise1b {
        public static void main (String[] args) {     /*메인 메소드 선언이 필요하다.*/
                int x = 5;
                while(x>1)
                {
                        x = x-1;
                        if(x<3)
                        {
                                System.out.println("small x");
                        }       
                }
        }
}

}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수:객체에서 자신에 대해 아는것
 * 메소드:객체에서 자신이 하는 것
 * 클래스:객체를 만들기 위한 용도, 청사진
 * 테스트용 클래스:새로운 클래스를 테스트하기 위한 클래스
 

*68p Television* _채워넣기_

 * 인스턴스 변수: 전원, 채널, Sound
 * 메소드: Poweron(), setchannel(), 
Soundchange(),  channelchange()



*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{

public class GuessGame {
		Player p1;
		Player p2;
		Player p3;
		Player p4;
	
		public void startGame(){
			p1 = new Player();
			p2 = new Player();
			p3 = new Player();
			p4 = new Player();

			int guessp1 = 0;
			int guessp2 = 0;
			int guessp3 = 0;
			int guessp4 = 0;

			boolean p1isRight = false;
			boolean p2isRight = false;
			boolean p3isRight = false;
			boolean p4isRight = false;

			int targetNumber = (int) (Math.random() *10);
			System.out.println("0 over 9 under");
			
			while(true){
				System.out.println("right number " + targetNumber + ".");

			p1.guess();
			p2.guess();
			p3.guess();
			p4.guess();

			guessp1 = p1.number;
			System.out.println("player 1 picked: "+guessp1);
			
			
			guessp2 = p2.number;
			System.out.println("player 2 picked: "+guessp2);

			guessp3 = p3.number;
			System.out.println("player 3 picked: "+guessp3);


			guessp4 = p4.number;
			System.out.println("player 4 picked: "+guessp4);


			if (guessp1 == targetNumber){
				p1isRight = true;
			}

			if (guessp2 == targetNumber){
				p2isRight = true;
			}

			if (guessp3 == targetNumber){
				p3isRight = true;
			}

			if (guessp4 == targetNumber){
				p4isRight = true;
			}

			if (p1isRight || p2isRight || p3isRight || p4isRight) {

				System.out.println("Right number!");
				System.out.println("player 1 : "+ p1isRight);
				System.out.println("player 2 : "+ p2isRight);
				System.out.println("player 3 : "+ p3isRight);
				System.out.println("player 4 : "+ p4isRight);
				System.out.println("Game set.");

				break;

			} else {
		
				System.out.println(" Try again ");
			 }
			}
		     }
		}

pubilc class Player{
	int number = 0;

	public void guess() {
		number = (int) (Math.random() *10);
		System.out.println("Selected number: "+number);
	}
      }

public class GameLauncher {
	public static void main (String[] args) {
		GuessGame game = new GuessGame();
		game.startGame();
	}
      }			



			

}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
class TapeDeck {

    boolean canRecord = false; 

    void playTape() // tape play {

        System.out.println("tape playing"); // Printing tape playing 

    } 

    void recoredTape() // tape record {

        System.out.println("tape recording"); //Printing tape recording  

    { 

}

class TapeDeckTestDrive {

    public static void main(String args) {

        TapeDeck t = new TapeDeck?(); //making tape class t.canrecord = true; // record t.playTape(); // play 

    if(t.canRecord == true) // don't play-> record

        t.recordTape(); 

    } 

}

class DVDPlayer {

    boolean canRecord = false; 

    void playDVD() {

        System.out.println("DVD playing"); 

    } 

    void recordDVD() {

        System.out.println("DVD recording"); 

    } 

}

class DVDPlayerTestDrive {

    public static void main(String args) {

        DVDPlayer d = new DVDPlayer(); // Making DVD class
 d.canRecord = true; d.playDVD(); 

    if(d.canRecord == true)

        d.recordDVD(); // Don't play->record 

    } 

} 

}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수: 원시 변수에는 정수,부울,부동소수점 수와 같은 기초적인 값(단순한 비트 패턴으로 나타낼 수 있는 값)이 들어갑니다. 레퍼런스변수는 힙에 들어있는 객체를 건드릴 수 있는 방법을 나타내는 비트입니다.
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{    
        class Dog {
	String name;
	public static void main (String[] args){
		// Dog 객체를 만들고 접근합니다.
	Dog dog1 = new Dog();
	dog1.bark();
	dog1.name = "Bart";

	//이번에는 Dog 배열을 만듭니다;
	Dog[] myDogs = new Dog[4];
	//그리고 개를 몇 마리 집어넣습니다;
	myDogs[0] = new Dog();
	myDogs[1] = new Dog();
	myDogs[2] = new Dog();
	myDogs[3] = dog1;

	//배열 레퍼런스를 써서 Dog 객체에 접근합니다.
	myDogs[0].name = "Fred";
	myDogs[1].name = "Marge";
	myDogs[2].name = "BaBo";

	//myDogs[3]의 이름이 뭐였지?
	System.out.print("마지막 개의 이름:");
	System.out.println("myDogs[3].name");
	
	int x =0;
	while(x <myDogs.length){
		myDogs[x].bark();
		x = x+1;
		}
	}

	pubilc void bark() {
		System.out.println(name + "이(가) 왈!하고 짖습니다.");
	}
	public void eat(){}
	public void chaseCat(){}
	}

}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
public class Books {

        String title;
        String author;
}


public class BooksTestDrive {

        public static void main(String [] args){

                Books [] myBooks = new Books[3]; 

                for(int i=0;i<3;i++)
                {
                        myBooks[i]=new Books();
                } // 배열을 선언함
                
		int x = 0;
                myBooks[0].title="The Grapes of Java";
                myBooks[1].title="The Java Gatsby";
                myBooks[2].title="The Java Cookbook";
                myBooks[0].author = "bob";
                myBooks[1].author = "sue";
                myBooks[2].author = "ian";

                
                while(x<3)
                {
                        System.out.print(myBooks[x].title);
                        System.out.print(" by ");
                        System.out.println(myBooks[x].author);
                        x = x +1;
                }
                
        }
}
----------------------------------------------------------------------------------------------
class Hobbits {

	String name;

	public static void main( String [] args) {

	Hobbits [] h = new Hobbits[3];
	int z = 1;

	while (z<2)  // 배열은 0부터 시작하게함
{
	z = z+1;
	h[z] = new Hobbits();
	h[z].name = "bilbo";
	if( z==1) 
	{
		h[z].name = "frodo";
	}
	if( z==2)
	{
		h[z].name = "sam";
	}
	System.out.print(h[z].name + " is a ");
	System.out.println("good Hobbit name");
}
}
}
		
}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?:  밥
 * 문제가 된 부분은 어딘가요?:    
    토니가 만든 매소드에서 Contact 객체에서 마지막 것을 빼고는 나머지는 접근할 수 없습니다. 순환문을 한바퀴 돌때 마다 새로운 객체를 레퍼런스 변수 하나에 대입했기 때문에 전에 참조하고 있던 객체는 없어지는 꼴이 되버린것입니다. 



= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:  인스턴트 변수 주변에 방어막 같은 것 따위를 만들어 다른 사람이 인스턴스 변수를 부적절한 값으로 설정하지 못하게 합니다.
 * 게터와 세터: 게터는 그 게터가 가져오기로 되어있는 값을 리턴값 형태로 받아오는 용도로 쓰이고, 세터는 그 세터가 설정할 값을 인자로 받아서 인스턴스 변수를 그 값으로 설정하는 용도로 쓰입니다.
 * 인스턴스 변수 vs 지역 변수: 인스턴스 변수는 클래스 내에서 선언되는데 인스턴스 변수에는 항상 임의의 기본값이 들어갑니다. 지역 변수는 메소드 내에서 선언되는데 사용하기 전에 반드시 초기화 해야 한다. 
 
 
*107p Dog* _실행_

{{{
class Dog {
	int size;
	String name;

	void bark() {
		if (size >60 ){
			System.out.println("Wooof! Wooof!");
		} else if ( size > 14) {
			System.out.println("Ruff! Ruff!");
		} else {
			System.out.println("Yip! Yip!");
		}
	}
}

------------------------------------------------------------------------------------

class DogTestDrive {

	public static void main (String[] args) {
		Dog one  = new Dog();
		one.size = 70;
		DOg two = new Dog();
		two.size = 8;
		DOg three = new Dog();
		three.size = 35;

		one.bark();
		two.bark();
		three.bark();
	}
}

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:
 * 다형성:

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}