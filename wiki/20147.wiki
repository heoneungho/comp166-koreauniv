#summary 권예림

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{
public class BeerSong  //어디에서든 접근가능한 
BeerSong 클래스 선언{        
public static void main(String[] args) 
//리턴값이 없는 'args'라는 이름의 String형 배열을 인자값으로 받는 main 메소드선언        
{ int beerNum = 99;//beerNum이라는 int형 변수 선언과 99값 대입  
              String word = "bottles";      // 복수형                
while (beerNum>0)                
{                if (beerNum ==1) //change String "word" right after changing "beerNum"                        {                                
word = "bottle";)                        }                                                System.out.println(beerNum + " " + word + " of beer on the wall");  //출력하고 줄바꿈                    
    System.out.println(beerNum + " " + word + " of beer.");
System.out.println("Take one down."); 
System.out.println("Pass it around");
beerNum = beerNum - 1;           
beerNum에 저장된 값에서 1을 뺀 값을 beerNum에대입
                                                
if(beerNum >0)                        
{System.out.println(beerNum + " " + word + " of beer on the wall\n");} 
/*이 if문은 while문의 조건인 'beerNum>0'과 겹친다. if문의 조건을 'beerNum<1'로 수정한다.*/            
if(beerNum<1)                         {                                System.out.println("No more bottles of beer on the wall"); 
//출력하고 줄바꿈               
         }             
        }      // while 순환문 끝   
     }      // main 클래스 끝}      // 클래스 끝
}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{
public class PhraseOMatic 
{    
public static void main(String[] args) 
{        
String[] wordListOne = {"Chicken", "Cow", "Pig", "Dog","Cat", "Monkey", "Elephant", "Eagle", "Tiger", "Turtle","critical-path", "dynamic"};        

String[] wordListTwo = {"eat", "do", "bother", "hit", "get","take", "catch", "bring", "need", "ride", "touch", "meet", "kick", "throw", "learn", "teach", "look", "resemble"};        
String[] wordListThree ={"monster", "man", "woman", "car", "building",  "stone", "sand", "paper", "table", "chair", "pencil", "ice"};        
int oneLength = wordListOne.length;       
int twoLength = wordListTwo.length;        
int threeLength = wordListThree.length;        
int rand1 = (int) (Math.random() * oneLength);        
int rand2 = (int) (Math.random() * twoLength);        
int rand3 = (int) (Math.random() * threeLength);                
String phrase = wordListOne[rand1] + " " + wordListTwo[rand2] + " " + wordListThree[rand3];        
System.out.println(phrase);    }}
}}}

*52p 집중토론* _요약_

•자바 가상 머신: 프로그램을 실행 시킨다. 다른 유형의 값이 들어갈 때에 ClassCast? Exceptiond을 발생시킨다. 바이트코드가 생성된 후 바이트코트가 실행되기 전까지 다란 사람이 건드렸는지 확인한다. 
•컴파일러: 파일을 만들어 준다. 문법이 틀린 부분을 찾아준다. 변수에 다른 유형을 저장 하는 것을 막아준다. 데이터 유형 위반을 막아준다. 비공개 메소드나 고치면 안되는 메소드를 변경하는 것을 막아준다. 클래스의 핵심적인 코드를 건드리는 것을 방지 해준다. 발생 할 수 있는 문제점의 대부분을 잡아준다. 

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
public class Exercis1b {        
public static void main(String [] args){                
int x =1;                
while(x < 10){                        
if ( x > 3){                                
System.out.println("big x");                        }                        
x+=1; // 무한루프               }        }}

public class Exercise1b // 클래스로 감싸줘야한다.
{        public static void main(String [] args)
{                int x =5;                
while(x>1){                        
x=x-1;                        
if(x<3){                                
System.out.println("small x");                        
}                
}        
}}
public class Exercise1b 
{        
public static void main(String [] args) // class 안에 당연히 메소드도 있어야한다.
{        
int x = 5;        
while(x>1){               
 x = x-1;               
 if ( x<3){                       
 System.out.println("small x");                       
 }               
 }       
 }}
}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =





68p Television 채워넣기 

*68p~ 클래스* _요약_
•인스턴스 변수: 클래스 내에서 쓰이는 변수, 객체가 알고 있는 것 
•메소드: 절차적언어에서 함수의 개념, 클래스 내에서 쓰이는 함수, 객체가 직접 하는 것. 
•클래스: 비슷한 요소를 가진 각각의 객체를 만들기 위한 설계도 
•테스트용 클래스: 클래스가 잘 돌아가는지 테스트하는 클래스이다. main이 들어 가있다. 




*68p Television* _채워넣기_

* 인스턴스 변수: 전원변수, 채널변수, 볼륨변수등 
* 메소드: 전원켜기, 채널 바꾸기, 볼륨 바꾸기 등등 


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{
public class GuessGame
 {    
   Player p1; 
   Player p2;
    Player p3;
    Player p4;
    public void startGame() 
{        p1 = new Player();
        p2 = new Player();
        p3 = new Player();
        p4 = new Player();
        int guessp1 = 0;
        int guessp2 = 0; 
       int guessp3 = 0;  
      int guessp4 = 0; 
       boolean p1isRight = false; 
       boolean p2isRight = false; 
       boolean p3isRight = false; 
       boolean p4isRight = false; 
       int targetNumber = (int) 
(Math.random() * 10);  
      System.out.println("0 이상 9 이하의 숫자를 맞춰보세요.");
        while(true)
 {            System.out.println("맞춰야 할 숫자는 " + targetNumber + "입니다.");
            p1.guess();    
        p2.guess();     
       p3.guess();   
         p4.guess();    
        guessp1 = p1.number;  
          
System.out.println("1번 선수가 찍은 숫자: " + guessp1); 
           guessp2 = p2.number; 
           
System.out.println("2번 선수가 찍은 숫자: " + guessp2);    
        guessp3 = p3.number;            
System.out.println("3번 선수가 찍은 숫자: " + guessp3);   
         guessp4 = p4.number;            
System.out.println("4번 선수가 찍은 숫자: " + guessp4);   
         if (guessp1 == targetNumber) 
{                p1isRight = true;            }               
if (guessp2 == targetNumber) 
{                p2isRight = true;            }           
 if (guessp3 == targetNumber)

 {                p3isRight = true;            } 
           if (guessp4 == targetNumber) 
{                p4isRight = true;            }  
          if (p1isRight || p2isRight || p3isRight || p4isRight) {                
System.out.println("맞춘 선수가 있습니다.");                System.out.println("1번 선수: "    + p1isRight);                System.out.println("2번 선수: "    + p2isRight);                System.out.println("3번 선수: "    + p3isRight);                System.out.println("4번 선수: "    + p4isRight);                System.out.println("게임 끝.");                break;              } else 
{               
 
System.out.println("다시 시도해야 합니다.");         
   }        }    }   }
}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

public class TapeDeck 
{ 
               boolean canRecord = false; // 녹음 할 수 없는 테이프
                void playTape()
{
                System.out.println("tape playing"); // 테이프 재생        
}
                void recordTape()
{                
System.out.println("tape recording"); // 테이프 녹음        
}
}
public class TapeDeckTestDrive
 {      
  public static void main(String [] args)
{                
TapeDeck t = new TapeDeck(); // 테이프 객체 만듦                                t.canRecord = true; // 테이프 녹음 가능 지정
                t.playTape(); // 테이프 재생
                                if(t.canRecord == true){   
                     t.recordTape();
                } 
// 테이프 녹음 가능하면 녹음        }}
public class DVDPlayer 
{                boolean canRecord = false; // DVD 기록 불가                void playDVD()
{                System.out.println("DVD playing");        } 
// DVD 재생 
               void recordDVD()
{                System.out.println("DVD recording");        } 
// DVD 녹음}
public class DVDPlayerTestDrive 
{        public static void main(String [] args)
{                DVDPlayer d = new DVDPlayer(); 
// DVD 객체 생성 
                               d.canRecord = true; // DVD 기록 가능 지정  
              d.playDVD(); // DVD 재생
                                if(d.canRecord == true){             
           d.recordDVD();  
              } // DVD 기록 가능하면 기록        }}
}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수:
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{


public class Dog 
{    
String name;
    public static void main(String[] args)
 {        Dog dog1 = new Dog();
        dog1.bark();
        dog1.name = "Bart"; 
               Dog[] myDogs = new Dog[3];
        myDogs[0] = new Dog(); 
       myDogs[1] = new Dog();
        myDogs[2] = dog1; 
               myDogs[0].name = "Fred"; 
       myDogs[1].name = "Marge";  
              System.out.print("last dog's name is "); 
       System.out.println(myDogs[2].name); 
               int x = 0; 
       while (x < myDogs.length) 
{            myDogs[x].bark();
            x = x+1;        }    } 
   public void bark() 
{        System.out.println(name + " says Ruff!");    }
        public void eat() { }
        public void chaseCat() { }}
}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

*101p 레퍼런스 도용사건* _요약_


•누가 이겼나요?: 밥이 이겼습니다. 

•문제가 된 부분은 어딘가요?: 켄트의 코드로는 1개의 객체레퍼런스가 있으면 되지만 그 객체레퍼런스는 결국 마지막 객체하고만 연결이 되있기 때문에 이전에 만든 9개의 객체는 접근 할 수도 없는데 heap공간을 차지하게 된다. 





= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

•캡슐화: 데이터와 자신이 구현한 코드를 보호하고 수정 할 권한을 정하는 것이다.
 
•게터와 세터: 게터는 인스턴트 변수의 값을 알아내기 위한 메소드로 일반적으로 인스턴스변수값을 리턴 한다. ex) getNum(), getBrand(). 세터는 인스턴스 변수의 값을 설정하기 위한 메소드 전달된 값을 확인하고 인스턴수 변수의 값을 설정합니다. ex) setNum(), setBrand(). 

•인스턴스 변수 vs 지역 변수: 인스턴스 변수는 초기 값을 지정하지 않아도 항상 기본값이 들어가고 클래스 내에서 선언됩니다. C에서의 전역변수와 비슷합니다. 지역변수는 메소드 내에서 선언 되고 사용하기전에 반드시 초기화 하고 사용해야 합니다. 


:
 
*107p Dog* _실행_

{{{

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:
 * 다형성:

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}