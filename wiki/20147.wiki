#summary 권예림

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{
public class BeerSong  //어디에서든 접근가능한 BeerSong 클래스 선언{        public static void main(String[] args) //리턴값이 없는 'args'라는 이름의 String형 배열을 인자값으로 받는 main 메소드선언        {                int beerNum = 99;//beerNum이라는 int형 변수 선언과 99값 대입                String word = "bottles";      // 복수형                while (beerNum>0)                {                if (beerNum ==1) //change String "word" right after changing "beerNum"                        {                                word = "bottle";      // 단수형(한 병인 경우)                        }                                                System.out.println(beerNum + " " + word + " of beer on the wall");  //출력하고 줄바꿈                        System.out.println(beerNum + " " + word + " of beer.");  //출력하고 줄바꿈                        System.out.println("Take one down."); //출력하고 줄바꿈                        System.out.println("Pass it around");//출력하고 줄바꿈                                                beerNum = beerNum - 1;             //변수 beerNum에 저장된 값에서 1을 뺀 값을 beerNum에 대입                                                /*if(beerNum >0)                        {                                System.out.println(beerNum + " " + word + " of beer on the wall\n");                         } 이 if문은 while문의 조건인 'beerNum>0'과 겹친다. if문의 조건을 'beerNum<1'로 수정한다.*/             if(beerNum<1)                         {                                System.out.println("No more bottles of beer on the wall"); //출력하고 줄바꿈                        }                     }      // while 순환문 끝        }      // main 클래스 끝}      // 클래스 끝
}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{
public class PhraseOMatic {    public static void main(String[] args) {        String[] wordListOne = {"Chicken", "Cow", "Pig", "Dog",                "Cat", "Monkey", "Elephant", "Eagle", "Tiger", "Turtle",                "critical-path", "dynamic"};        String[] wordListTwo = {"eat", "do", "bother", "hit", "get",                 "take", "catch", "bring", "need", "ride", "touch",                 "meet", "kick", "throw", "learn", "teach", "look", "resemble"};        String[] wordListThree = {"monster", "man", "woman", "car", "building",                "stone", "sand", "paper", "table", "chair", "pencil", "ice"};        int oneLength = wordListOne.length;        int twoLength = wordListTwo.length;        int threeLength = wordListThree.length;        int rand1 = (int) (Math.random() * oneLength);        int rand2 = (int) (Math.random() * twoLength);        int rand3 = (int) (Math.random() * threeLength);                String phrase = wordListOne[rand1] + " " + wordListTwo[rand2] + " " + wordListThree[rand3];        System.out.println(phrase);    }}
}}}

*52p 집중토론* _요약_

 * 자바 가상 머신:
 * 컴파일러:

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수:
 * 메소드:
 * 클래스:
 * 테스트용 클래스:
 

*68p Television* _채워넣기_

 * 인스턴스 변수:
 * 메소드:


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{

}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수:
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{

}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?:
 * 문제가 된 부분은 어딘가요?:

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:
 * 게터와 세터:
 * 인스턴스 변수 vs 지역 변수:
 
*107p Dog* _실행_

{{{

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:
 * 다형성:

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}