#summary 수업중 실습하는 내용을 올리게 되는 실습페이지입니다. 페이지의 내용은 각 학생에 의해서 관리됩니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{
문제 : 48p의 코드를 실행시켜 보면 1bottle일때 1bottles 라고 나오는데, if의 위치를 바꿔 주면 해결할수 있다.



public class Beersong {
		public static void main(String[] args){
				int beerNum = 99;
				String word = "bottles";//복수형
				
				while(beerNum > 0)//beerNum이 0보다 크면 실행
				{
					System.out.println(beerNum + " " + word + " of beer on the wall");
//beerNum이라는 문자열과 " "(띄어쓰기) 를 붙이는 "+" 를 사용
					System.out.println(beerNum + " " + word + " of beer");
					System.out.println("Take one down.");
					System.out.println("pass it around.");
					beerNum = beerNum-1;
					if(beerNum==1)//beerNum이1이면 실행, 단수형(한 병인 경우)
					{
						word = "bottle";
					}
					if(beerNum>0)//beerNum이 0보다크면 실행
					{
						System.out.println(beerNum + " " + word + " of beer on the wall");
					}else//beerNum이 0보다 크지않으면 실행
					{
						System.out.println("No more bottles of beer on the wall");
					}//else문 끝
				}//while문 끝
		}//main클래스 끝
}//클래스 끝
}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{
public class PhraseOMatic {
        public static void main (String[] args) {

                String[] wordListOne = {"dynamic", "beautiful", "wonderful", "nice", "good",
                                        "hot", "rainy", "crowded"};

                String[] wordListTwo = {"Paris", "Tokyo", "Beijing", "Seoul", "Newyork",
                                        "Hongkong", "London", "Sydney"};

                String[] wordListThree = {"with family", "with friends", "with girl friend",
                                        "with boy friend", "with sister", "with brother", "alone" };

//
                int oneLength = wordListOne.length;
                int twoLength = wordListTwo.length;
                int threeLength = wordListThree.length;

                int rand1 = (int) (Math.random() * oneLength);
                int rand2 = (int) (Math.random() * twoLength);
                int rand3 = (int) (Math.random() * threeLength);

                String phrase = wordListOne[rand1] + " " + wordListTwo[rand2] + " " + wordListThree[rand3];

                System.out.println("I will go to " + phrase);
                }
        }
~                                                                                                              
~                   
}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 보안 관련 작업을 한다. 바이트코드가 만들어진 다음 바이트코드가 실행되기 전까지 다른 누군가가 건드리지 않았는지 확인하는 작업도 한다.
 * 컴파일러: 프로그래밍언어를 바이트코드로 바꿔준다. 자바가 순수한 인터프리터 언어라면 가상 머신에서 텍스트 편집기로 만든 소스 코드를 해석해야 될 테고, 그러면 자바 프로그램 실행속도는 느려지게 된다. 세미콜론을 체크 한다. 자바는 유형을 지키는 언어이기 때문에, 변수에 이상한 유형의 데티러를 저장할수 없게 하는 일을 한다. 비공개(private) 메소드를 호출하려고 한다거나 절대 바꿔서는 안 되는 메소드를 변경하려는 것을 방지한다. 

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

A

class Exercise1b{
        public static void main(String[] args) {
                int x = 1;
                while( x < 10 ) { //x가 10보다 작기 때문에 while문 안으로 들어감
                        if ( x > 3 ) { //x가 3보다는 작기 때문에 실행되지 않음
                                System.out.println("big x");
                        }
                } // while 문에서 갇혀버리게 된다. x가 증가하지 않고 그대로 x=1에 머물러 있기 때문에 컴파일은 되고 실행도 되지만 아무일도 일어나지 않고 프로그램이 계속 돌아가게 된다.
        }
}
}}}
{{{

B
// 맨 첫줄에 class가 정의되어 있지 않기 때문에 컴파일이 되지 않는다.
public static void main(String[] args){
        int x= 5;
        while (x>1) { // x가 1보다 크기 때문에 while문으로 들어온다
                x = x - 1; // while문이 한번 돌때마다 1씩 줄어든다.
                if ( x < 3 ) { // 맨 처음에 4, 그리고 다음번째에는 3이 된다. 
                        System.out.println("small x"); // x가 4일때에만 한번 if문이 실행되므로 small x 라는 문장이 1회 출력된다.
                }
        }
}

}}}
{{{

C
// class는 존재하지만 main함수가 없기 때문에 컴파일이 되지 않는다.
class Exercise1b{
        int x = 5;  
        while ( x >1 ) { // x가 5이기 때문에 처음에 while문이 실행된다.
                x = x - 1; // x가 1씩 줄어든다.
                if ( x < 3 ) { // 위와 같이 맨처음엔 4, 다음엔 3
                        System.out.println("small x"); // x가 4일때만 한번 if문이 실행
                }
        }
}   

}}}
= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체에서 아는 것
 * 메소드: 객체에서 하는 것
 * 클래스: 객체에 해당하는 클래스
 * 테스트용 클래스: 새로운 클래스를 테스트하기 위한 클래스이며, 테스트용 클래스에는 main() 메소드가 들어가며 그 main() 메소드에서 테스트할 클래스 유형의 객체를 만들어서 접근한다.
 

*68p Television* _채워넣기_

 * 인스턴스 변수: channels
 * 메소드: turnOff(), turnOn(), changeChannel(), volumeUp(), volumeDown()


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{

public class GuessGame{
        Player p1;
        Player p2;
        Player p3;
        Player p4;
        // Player 객체 4개를 저장하기위한 인스턴트 변수 네개

        public void startGame(){
                p1 = new Player();
                p2 = new Player();
                p3 = new Player();
                p4 = new Player(); // player 객체 네 개를 생성하고 각각을 player 인스턴스 변수 네 개에 대입

                int guessp1 = 0;
                int guessp2 = 0;
                int guessp3 = 0;
                int guessp4 = 0; // player 객체 네 개에서 찍은 숫자를 저장하기 위해 변수 네 개를 선언.

                boolean p1isRight = false;
                boolean p2isRight = false;
                boolean p3isRight = false;
                boolean p4isRight = false;

                int targetNumber = (int) (Math.random() * 10);
                System.out.println("0 이상 9 이하의 숫자를 맞춰보세요.");

                while(true){
                        System.out.println("맞춰야 할 숫자는" + targetNumber + "입니다.");

                        p1.guess();
                        p2.guess();
                        p3.guess();
                        p4.guess();

                        guessp1 = p1.number;
                        System.out.println("1번 선수가 찍은 숫자: " + guessp1);

                        guessp2 = p2.number;
                        System.out.println("2번 선수가 찍은 숫자: " + guessp2);

                        guessp3 = p3.number;
                        System.out.println("3번 선수가 찍은 숫자: " + guessp3);

                        guessp4 = p4.number;
                        System.out.println("4번 선수가 찍은 숫자: " + guessp4);

                        if (guessp1 == targetNumber) {
                                p1isRight = true;
                        }

                        if (guessp2 == targetNumber) {
                                p2isRight = true;
                        }

                        if (guessp3 == targetNumber) {
                                p3isRight = true;
                        }

                        if (guessp4 == targetNumber) {
                                p4isRight = true;
                        }

                        if (p1isRight || p2isRight || p3isRight || p4isRight) {

                                System.out.println("맞춘 선수가 있습니다.");
                                System.out.println("1번 선수: "+ p1isRight);
                                System.out.println("2번 선수: "+ p2isRight);
                                System.out.println("3번 선수: "+ p3isRight);
                                System.out.println("4번 선수: "+ p4isRight);
                                System.out.println("게임 끝.");
                                break;
                        } else{
                                System.out.println("다시 시도해야 합니다.");
                        }
                }
        }
}

}}}

{{{

public class Player{
        int number = 0;

        public void guess() {
                number = (int) (Math.random() * 10);
        }
}

}}}

{{{          
public class GameLauncher {
        public static void main (String[] args) {
                GuessGame game = new GuessGame();
                game.startGame();
        }
}



}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

class TapeDeck{

        boolean canRecord = false;

        void playTape() {
                System.out.println("tape playing");
        }

        void recordTape() {
                System.out.println("tape recording");
        }
}

}}}

{{{

class TapeDeckTestDrive {
        public static void main(String [] args) {

                t.canRecord = true;
                t.playTape();

                if (t.canRecord == true) {
                        t.recordTape();
                }
        }
}

}}}

{{{
class DVDPlayer {

        boolean canRecord = false;

        void recordDVD() {
                System.out.println("DVD recording");
        }
}
}}}


= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수:
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{

class Dog{
        String name;
        public static void main(String[] args){
                Dog dog1 = new Dog();
                dog1.bark();
                dog1.name = "Bart";
                Dog[] myDogs = new Dog[3];
                myDogs[0] = new Dog();
                myDogs[1] = new Dog();
                myDogs[2] = dog1;

                myDogs[0].name = "Fred";
                myDogs[1].name = "Marge";

                System.out.print("마지막 개의 이름: ");
                System.out.println(myDogs[2].name);

                int x = 0;
                while(x<myDogs.length){
                        myDogs[x].bark();
                        x=x+1;
                }
        }
        public void bark(){
                System.out.println(name+ "이(가) 왈!하고 짖습니다.");
        }
        public void eat(){  }
        public void chaseCat() {  }
}


}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?:
 * 문제가 된 부분은 어딘가요?:

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:
 * 게터와 세터:
 * 인스턴스 변수 vs 지역 변수:
 
*107p Dog* _실행_

{{{

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란? 
 최근의 소프트웨어 개발 방법론 분야로 
조금씩/자주 발표,사이클을 반복해서 돌리면서 개발,스펙에 없는 것은 집어넣지않기,테스트 코드를 먼저 만들기 등과 같은 규칙이 있다.


 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{


public class SimpleDotCom{
  
  int[] locationCells;
  int numOfHits = 0;

  public void setLocationCells(int[] locs){
    locationCells = locs;
  }

  public String checkYourself(String stringGuess){
    int guess = Integer.parseInt(stringGuess);
    String result = "miss";
    for(int i = 0; i < locationCells.length; i++){
      if(guess == locationCells[i]){
        result = "hit";
        numOfHits++;
        break;
      }
    }

    if (numOfHits == locationCells.length){
      result = "kill";
    }
    System.out.println(result);
      return result;
  }
}



public class SimpleDotCom{
  
  int[] locationCells;
  int numOfHits = 0;

  public void setLocationCells(int[] locs){
    locationCells = locs;
  }

  public String checkYourself(String stringGuess){
    int guess = Integer.parseInt(stringGuess);
    String result = "miss";
    for(int i = 0; i < locationCells.length; i++){
      if(guess == locationCells[i]){
        result = "hit";
        numOfHits++;
        break;
      }
    }

    if (numOfHits == locationCells.length){
      result = "kill";
    }
    System.out.println(result);
      return result;
  }
}



import java.io.*;
public class GameHelper{
  public String getUserInput(String prompt){
    String inputLine = null;
    System.out.print(prompt + " ");
    try{
      BufferedReader is = new BufferedReader(
      new InputStreamReader(System.in));
    inputLine = is.readLine();
    if(inputLine.length() == 0) return null;
    }catch(IOException e){
      System.out.println("IOException: "+ e);
    }
    return inputLine;
  }
}


}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{



}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:
 * 다형성:

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}