#summary [2012190723 유영훈] 독서실 좌석 현황과 요금을 계산해주고 관리하는 프로그램입니다.
#labels 2012190723유영훈

= Introduction =

독서실의 빈 좌석과 이용 중인 좌석을 보여주고, 
이용 중인 좌석의 요금을 계산해주는 *독서실 좌석 관리 프로그램*입니다.


= Background & Details & Outline =

*1) Background(배경)*



http://comp166-koreauniv.googlecode.com/files/Reading1.JPG



 고등학생 시절, 야간 자율 학습을 마치고 곧 바로 집 앞 독서실에 들러 추가로 공부를 하곤했었는데, 

 그 당시 독서실 주인 아주머니께서는 독서실 회원들을 컴퓨터를 이용하여 관리하셨었습니다.

 자바를 공부하는 지금, 독서실 관리를 좀 더 효율적으로 할 수 있는 프로그램을 만들어보자는 취지로

 "독서실 좌석 관리 프로그램"을 기획했습니다.
 
 PC방과 당구장에서 사람들이 있는 자리를 체크하고 시간과 요금을 측정하는 것에착안하여, 

 독서실의 빈 좌석과 이용 중인 좌석을 보여주고 요금을 계산하는 *『독서실 좌석 관리 프로그램』*을 만들 것입니다.


*2) Requirement(요구사항)*

  * 독서실의 *빈 좌석*과 *이용 중 좌석*을 나타냅니다.
- 독서실의 현재 상황을 한눈에 볼 수 있도록 제작되어야합니다.

  * 이용 중 좌석 중 기간제 좌석과 시간별 좌석의 *요금*을 나타냅니다.
- 요금의 계산은 기간제, 시간제 좌석을 구분하여 계산합니다.

  * 기록 및 관리
- 사용 여부 내역을 저장 및 열람이 가능해야합니다.

- 요금 합계 및 통계 기능이 가능해야합니다.

  * 독서실에 온 학생의 *ID카드 넘버*와 *이름*을 각 좌석에 표시해줍니다.

  * 좌석 표시 화면에는 현재 시간, 좌석 관리, 통계, 요금 설정 등의 기능이 있어야합니다.


*3) Program Structure(프로그램 구조)*

*[도식화]*

|| *독서실 관리자* || ↔ || *프로그램* || ↔ || *입실, 퇴실, 이용 내역* || ↔ || *파일* || 


http://comp166-koreauniv.googlecode.com/files/ReadingPro.jpg


*4) UI구상*

- 프로그램은 총 4개의 화면으로 구성됩니다.

- 메인화면, 요금 설정 화면, 입실 및 퇴실 화면, 이용내역 화면

*①메인화면*

- 자리가 비어있으면 자리 번호로 표시됩니다.

- 입실자가 자리를 사용 중인 경우 개인 ID가 붉은 색으로 표시됩니다.

- 자리 번호 클릭시 입실 화면으로 넘어갑니다. 

- 입실자 ID 클릭시 퇴실 화면으로 넘어갑니다.

- 메인화면 아래에 텍스트 박스를 설정해 입실, 퇴실 내역을 보여줍니다.

*②요금 설정화면*

- 기간제, 시간제 회원별 요금 설정이 가능합니다.

*③입실, 퇴실화면*

- 입실 화면에서는 기간제, 시간제 회원을 선택하고 회원 ID를 적은 후 확인 버튼을 누르면 입실 처리됩니다.

- 퇴실 화면에서는 자동으로 사용 요금이 계산되며, 확인 버튼을 누르면 퇴실 처리됩니다.

*④이용내역화면*

- 현재까지 기록을 보여주며 회원 ID, 날짜별로 검색이 가능합니다.

*5)클래스/인터페이스 설정*

*1. 메인 클래스(mainYoungHoon)*
{{{
public class mainYoungHoon{

public static void main(String[] args) {

		mainWindow cl = new mainWindow();// 메인윈도우 객체 생성

	}

}

}}}
- mainWindow클래스를 실행
{{{
mainWindow cl = new mainWindow();// 메인윈도우 객체 생성
}}}

*2. 메인 화면 클래스(mainWindow)*
{{{
class mainWindow extends JFrame {

	JTextField blank; // 상단의 시계표시를 위해 공백을 만드는 텍스트필드

	int jariNumber; // 자리번호

	public mainWindow() {
	}

	public void actionPerformed() {
	}

	// 버튼을 생성하는 메소드
	public void gridInit() {
	}

	// 상단 판넬
	public void pan1() {
	}

	// 중앙 버튼 부분 판넬
	public void pan2() {	
	}

	// 하단 상황판 부분 판넬
	public void pan3() {
	}

	// 스레드 실행 부분
	public void run() {	
	}

}

}}}
*[메소드 설명]*

- mainWindow() : 생성자, 기본적인 틀을 만듭니다.
{{{
setTitle("독서실 관리 프로그램");// 제목표시줄

setSize();// 사이즈 설정

pan1();// 메소드 호출

pan2();// 메소드 호출

pan3();// 메소드 호출

gridInit();// 메소드 호출

setVisible(true);// 창을 보여줌

}}}

- pan1() : 상단의 판넬 생성
{{{
pan1 = new JPanel();// 판넬1 생성

pan1.add(blank = new JTextField());// 상단의 시계표시를 위해 공백을 만드는 텍스트필드
}}}
- pan2() : 독서실 화면 부분의 판넬 생성
{{{
pan2 = new JPanel();// 패널 생성
}}}
- pan3() : 상황판 등 하단의 판넬 생성
{{{
pan3 = new JPanel();// 패널 생성

pan3.add(condition = new JTextArea());// 상황판을 생성

pan3.add(history = new JButton("내역보기"));// 버튼 부착

pan3.add(configBtn = new JButton("요금설정"));// 버튼 부착
}}}
- gridInit() : 독서실 부분에 버튼을 부착

- run() : 상단에 시계를 표시하기 위해 쓰레드를 실행
{{{
Date d = new Date();// 날짜 객체 생성
}}}

- actionPerformed() : 버튼이벤트 설정
{{{
jariNumber = Integer.parseInt();// 자리번호 변수에 저장하고

new enterWindow(jariNumber);// 그것을 매개변수로 입실 창 띄우기
}}}

*3. 입실 화면 클래스(enterWindow)*
{{{
class enterWindow{

enterWindow() {} // 생성자, 기본적인 틀을 만듬

pan1(){} // 판넬 생성 및 윈도우 구성

layout(){} // 그리드백 레이아웃에 객체 부착

actionPerformed(){} // 버튼 이벤트 설정

itemStateChanged(){} // 기간제, 시간제 선택 설정

}

}}}
*[메소드 설명]*

- enterWindow() :　생성자, 기본적인 틀을 만듬
{{{
setTitle("입실");// 제목표시줄
}}}

- pan1() : 판넬을 생성하고 윈도우를 구성

- layout() : 그리드백 레이아웃에 객체를 부착하는 메소드

- actionPerformed() : 버튼이벤트 설정
{{{
IDNumber = tf1.getText();// 손님 ID 번호를 텍스트박스에서 받음

jariNumber = tf2.getText();// 자리 번호를 텍스트박스에서 받음
}}}
- itemStateChanged() : 체크박스 이벤트 설정(기간제, 시간제 선택)


*4. 퇴실 화면 클래스(leaveWindow)*
{{{
public class leaveWindow extends JFrame{

leaveWindow() {} // 생성자,기본적인 틀을 만듬

pan1(){} // 판넬, 윈도우 구성

layout(){} // 레이아웃에 객체 부착

intime(){} // 좌석 이용 시간 계산

charge(){} // 독서실 이용 요금 계산

actionPerformed(){} // 버튼 작동 설정

}

}}}
*[메소드 설명]*

- leaveWindow() : 생성자,기본적인 틀을 만듬

- pan1() : 판넬을 생성하고 윈도우를 구성

- layout() : 그리드백 레이아웃에 객체를 부착하는 메소드

- intime() : 좌석 이용 시간을 계산하는 메소드

- charge() : 독서실 이용 요금을 계산하는 메소드

- actionPerformed() : 버튼이벤트 설정



*5. 내역 화면 클래스(logWindow)*
{{{
public class logWindow{

logWindow() {} // 생성자

pan1(){} // 상단 판넬

pan3(){} // 하단 검색 판넬

defaultTable(){} // 기본 테이블

IDNumberSearch(){} // 사용자 ID 번호로 검색

dataSearch(){} // 날짜로 검색

remove table(){} // 테이블 내용 삭제

total(){} // 통계 계산

actionPerformed(){} // 버튼 설정

}

}}}
*[메소드 설명]*

- logWindow() : 생성자

- pan1() : 상단의 테이블부분 판넬 생성

- pan3() : 하단의 검색부분 판넬 생성

- defaultTable() : 기본 테이블을 불러오는 메소드

- IDNumberSearch() : 사용자 ID번호로 검색하는 메소드

- dateSearch() : 날짜로 검색하는 메소드

- remove table() : 테이블의 내용을 지우는 메소드

- total() : 통계부분을 계산하는 메소드

- actionPerformed() : 버튼이벤트 설정


*6. 환경 설정 클래스(config)*
{{{
public class config{

config() {} // 생성자

pan1() {} // 판넬 생성

layout() {} // 객체 부착

actionPerformed() {} // 버튼 설정

}

}}}
*[메소드 설명]*

- config() : 생성자

- pan1() : 판넬을 생성하고 윈도우를 구성

- layout() : 그리드백 레이아웃에 객체를 부착하는 메소드

- actionPerformed() : 버튼이벤트 설정


*7. 데이터를 파일로부터 읽는 클래스(readFile)*
{{{
public class readFile{

readFile(){} // 생성자

readconfig(){} // 설정된 요금을 읽어옴

readdata(){}// 독서실의 상황 및 내역을 읽어옴

}

}}}
*[메소드 설명]*

- readFile() : 생성자

- readconfig() : 설정된 요금을 읽어옴

- readdata() : 독서실의 상황과 현재까지의 내역을 읽어옴


*8. 데이터를 파일에 저장하는 클래스(writeFile)*
{{{
public class writeFile {

write() {} // 생성자

writeFile() {} // 파일에 독서실의 상황 및 내역을 써 넣음

}

}}}
*[메소드 설명]*

- write() : 생성자

- writeFile() : 파일에 독서실의 상황 및 내역을 써 넣음


*9. 현재까지 기록을 읽는 클래스(readLog)*
{{{
public class readLog {

readLog(){} // 생성자

}

}}}
*[메소드 설명]*

- readLog() : 생성자


*10. 상황을 출력하는 클래스(message)*
{{{
public class message{

message() {} 

}

}}}
*[메소드 설명]*

- message() : 

2개의 생성자를 가지고 있음. 

매개변수가 4개가 들어오면 입실, 

7개가 들어오면 퇴실에 메세지를 저장


*11. 시스템 시간을 저장하는 인터페이스*
{{{

import java.util.Calendar;

//시스템으로 부터 시간을 받아와 저장하는 인터페이스
public interface time {

	Calendar present = Calendar.getInstance();

	int day = present.get(Calendar.DATE);

	int hour = present.get(Calendar.HOUR_OF_DAY);

	int min = present.get(Calendar.MINUTE);

	int month = present.get(Calendar.MONTH) + 1;

	int sec = present.get(Calendar.SECOND);

	int year = present.get(Calendar.YEAR);

}

}}}

- day, hour, min, month, present, sec, year

= Project Start =
{{{
/* 독서실을 관리하는 프로그램인 ReadingRoomManager입니다. */

// mainYoungHoon 클래스입니다.
public class mainYoungHoon {

	public static void main(String[] args) {
		mainWindow cl = new mainWindow();// 메인 윈도우 객체를 생성합니다.
		Thread th = new Thread(cl);// 객체를 스레드로 생성합니다.
		th.start();// 스레드를 실행합니다.
	}
}
=================================================================================
/* mainWindow 클래스입니다. 여기가 메인 창입니다. */
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import java.text.SimpleDateFormat;

@SuppressWarnings("serial")
class mainWindow extends JFrame implements Runnable, ActionListener {
	JTextField blank;// 상단의 시계표시를 위해 공백을 만드는 텍스트필드입니다.
	public JButton Btn[] = new JButton[150];// 자리 버튼입니다. 
	JTextArea condition;// 상황판의 텍스트 영역입니다.
	JButton configBtn;// 요금 설정 버튼입니다.
	String currentDate = "";// 현재 날짜를 저장
	String currentTime = "";// 현재 시간을 저장
	JButton history;// 내역보기 버튼입니다.
	int jariNumber;// 자리번호입니다.
	JButton notUseBtn[] = new JButton[100];// 사용하지 않는 버튼(자리 사이 사이의 버튼)
	readFile obj = new readFile();// 파일을 읽어들입니다.
	JPanel pan1;// 판넬1
	JPanel pan2;// 판넬2
	JPanel pan3;// 판넬3

	// 생성자
	public mainWindow() {
		setTitle("[독서실 관리 프로그램(ReadingRoomManager)]");// 제목 표시줄입니다.
		setSize(1000, 700); // 사이즈를 설정합니다.
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 종료 버튼 클릭시 종료합니다.
		pan1();// 메소드 호출
		pan2();// 메소드 호출
		pan3();// 메소드 호출
		gridInit();// 메소드 호출
		setVisible(true);// 창을 보여줌
		setResizable(false);// 크기변경 불가
	}
}}}