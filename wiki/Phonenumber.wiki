#summary 전화번호관리프로그램
#labels 2012190706허능호
= Introduction =

전화번호와 메모를 저장하고 찾아볼수 있는 전화번호관리 프로그램입니다.

= Details =

Add your content here.  Format your content with:

 어느날 친구와 전화하다가 액정에 생일이 뜬 덕분에 미리 생일 축하한다고 말 했던 경험에서 착안해 전화번호와 상대의 중요한 기념일을 기록할 수 있는 프로그램을 만들 것입니다. 누구나 친한 친구나, 가족들의 생일을 깜빡해서 당황스러웠던 기억들이 있었을 것입니다. 이 프로그램은 그러한 상황을 방지 해주는데 효과적인 프로그램이 될것입니다. 또 이 프로그램은 일반 사람들 뿐만 아니라 서비스업종에 종사하는 분들께 더 유용할 수 있는데 고객의 생일과 같은 기념일을 저장할 수 있기 때문입니다. 고객과의 유대와 친밀성이 생명인 서비스업 종사자들에게는 필수적인 프로그램이 될것입니다. 또 이름 검색을 통해 정보를 찾을 수 있어 정보 접근을 용이하게 하였습니다.


◎ 상대정보(전화번호 등)을 저장 가능

◎ 전화번호,메모 등의 수정 가능

◎ 이름을 통한 전화번호 검색 기능

◎ 메모를 통해 부가적인 추가사항 기재 가능

◎ 전화번호부 작성 후 저장 기능




= Code =

Element클래스입니다. 
{{{


//이름과 전화번호, 메모를 나타내는 클래스.
public class Element {
	private String name;
	private String number;
	private String memo;
	
	// 이름과 전화번호, 메모를 입력하는 메소드 

	public Element(String name, String number, String memo) {
		this.name = name;
		this.number = number;
		this.memo = memo;
	}

	// 이름을 불러들이는 메소드
	public String getName() {
		return name;
	}

	// 전화번호를 불러들이는 메소드
	public String getNumber() {
		return number;
	}

	// 메모를 불러들이는 메소드
	public String getMemo() {
		return memo;
	}
	
	// 전화번호를 수정하는 메소드 
	public void changeNumber(String number) {
		this.number = number;
	}
	
	//메모를 수정하는 메소드
	public void changeMemo(String memo) {
		this.memo = memo;
	}
}
}}}

GUI 클래스입니다.
{{{

import javax.swing.JOptionPane;


// GUI를 제공하는 클래스.

public class GUI {
	private Function theDirectory = null;

	// GUI를 표시하고, 전화번호부 기능을 수행하는 함수 
	public void processCommands(Function theFunction) {
		String[] commands = { "Add/Change PhoneNumber \nand Add memo", "Find PhoneNumber",
				"Delete PhoneNumber", "Save Directory", "Exit" };
		theDirectory = theFunction; // 매개변수로 받아온 기능 수행 클래스를
									     	  // 등록
		int choice;

		do {
			choice = JOptionPane.showOptionDialog(null, "Select a Command!",
					"2012190706 This is NeungHo's PhoneBook.", JOptionPane.YES_NO_CANCEL_OPTION,
					JOptionPane.QUESTION_MESSAGE, null, commands,
					commands[commands.length - 1]);
			
			if(choice == JOptionPane.CLOSED_OPTION) {
				JOptionPane.showMessageDialog(null,"Until now, the phonebook have been run with NeungHo!\nClick \"Exit\" , please!!");
			}

			// 다이얼로그 GUI를 정의. 옵션 버튼의 인덱스를 반환한다.

			switch (choice) { // 옵션 버튼의 인덱스에 따라 수행
			case 0:
				doAddChangeEntry();
				break;
			case 1:
				doLookupEntry();
				break;
			case 2:
				doRemoveEntry();
				break;
			case 3:
				doSave();
				break;
			case 4:
				doSave();
				break;
			}
		} while (choice <commands.length - 1);
		System.exit(0);
	}

	// 연락처를 추가하거나 수정하는 함수 
	private void doAddChangeEntry() {
		String newName = JOptionPane.showInputDialog("Enter name");
		// 간단한 input 다이얼로그를 생성
		if (newName == null) {
			return; // Dialog was cancelled.(입력되지 않으면 input 다이얼로그 파괴)
		}
		String newNumber = JOptionPane.showInputDialog("Enter number");
		if (newNumber == null) {
			return; // Dialog was cancelled.
		}
		String newMemo = JOptionPane.showInputDialog("Enter memo");
		if (newMemo == null) {
			return;
		}
		
		String oldNumber = theDirectory.addOrChangeEntry(newName, newNumber, newMemo);
		String message = null;
		if (oldNumber == null) { // New entry.
			message = newName + " was added to the directory"
					+ "\nNew number : " + newNumber + "\nMemo : " + newMemo;
		} else { // Changed entry.
			message = "Number for " + newName + " was changed "
					+ "\nOld number: " + oldNumber + "\nNew number: "
					+ newNumber + "\nmemo : " + newMemo;
		
		}
		JOptionPane.showMessageDialog(null, message);
	}

	// 저장된 연락처를 보여주는 함수
	private void doLookupEntry() {
		// Request the name.
		String theName = JOptionPane.showInputDialog("Enter name");
		if (theName == null) {
			return; // Dialog was cancelled.
		}
		String theNumber = theDirectory.lookupEntry(theName);
		String theMemo = theDirectory.lookupEntry1(theName);
		
		String message = null;
		if (theNumber != null) { // Name was found.
			message = "The number for " + theName + " is " + theNumber + "\nMemo is " + theMemo ;
		} else { // Name was not found.
			message = theName + " is not listed in the directory";
		}
		JOptionPane.showMessageDialog(null, message);
	}


	
	// 저장된 연락처를 삭제하는 함수 
	private void doRemoveEntry() {

		String theName = JOptionPane.showInputDialog("Enter name");
		if(theName == null){
			return;
		}
		String theNumber = theDirectory.lookupEntry(theName); //lookupEntry 를 이용해 전화번호를 가져옵니다.
		String theMemo = theDirectory.lookupEntry1(theName); //lookupEntry 를 이용해 메모를 가져옵니다.
		String message = null;
		if(theNumber != null){
			message = theName + ", " + theNumber + " and "+theMemo +
					" was deleted in the directory";
			theDirectory.removeEntry(theName); // 삭제
		} else {
			message = theNumber + " is not listed in the directory";
		}
		JOptionPane.showMessageDialog(null, message);
	}

	// 저장하는 함수
	private void doSave() {
		theDirectory.save();
	}
}
}}}

Function 클래스입니다.
{{{

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;


// 전화번호부 기능을 수행하는 클래스.
// 보기, 추가 , 삭제, 저장기능을 수행한다.

public class Function {
	private static final int INITIAL_CAPACITY = 100; // 최대 저장 갯수
	private int capacity = INITIAL_CAPACITY; // 최대 저장 갯수 설정
	private int size = 0; // 현재 저장 갯수
	private Element[] theDirectory = 
			new Element[capacity]; // 전화번호부를 생성
	private String sourceName = null; // 전화번호부 파일
	private boolean modified = false; // 전화번호부 수정 여부

	// 파일에 기록된 전화번호부를 읽어오는 함수
	public void loadData(String sourceName) throws IOException {
		this.sourceName = sourceName;
		try {
			BufferedReader in = 
					new BufferedReader(new FileReader(sourceName));
			// 'sourceName' 파일로부터 데이터를 읽어 버퍼(in)에 저장한다.

			String name, number,memo;
			while ((name = in.readLine()) != null) { // 끝까지 읽는다.
				if ((number = in.readLine()) == null) { // 전화번호 값이 null이면 
					break; // 중지
				} else { 
					memo=in.readLine();
				}
				add(name, number,memo); // 연락처를 추가한다.
			}
			in.close();
		} catch (FileNotFoundException ex) {
			return;
		}
	}


	
	// 연락처를 추가하거나 수정하는 함수
	public String addOrChangeEntry(String name, String number,String memo) {
		String oldNumber = null;
		int index = find(name); // 이름으로 저장된 연락처를 찾는다.

		if (index >-1) { // 해당 이름을 찾았으면
			oldNumber = theDirectory[index].getNumber(); // 기존 전화번호를 임시 변수에 저장하고
			theDirectory[index].changeNumber(number); // 새로운 전화번호를 저장한다.
			theDirectory[index].changeMemo(memo); // 새로운 메모를 저장한다.
			
			
		} else { // 해당 이름을 못 찾았으면
			add(name, number,memo); // 새로 추가한다.
		}
		modified = true; // 수정여부를 true 로 고침.

		return oldNumber; // 기존 전화번호를 반환한다.
	}

	// 저장된 전화번호를 보여주는 함수
	public String lookupEntry(String name) {
		int index = find(name); // 'name'으로 검색한다.
		if (index >-1) { // 찾았으면
			return theDirectory[index].getNumber(); // 전화번호를 반환한다.
		} else {
			return null;
		}
	}
	
	// 저장된 메모를 보여주는 함수
	public String lookupEntry1(String name) {
		int index = find(name);
		if(index >-1) {
			return theDirectory[index].getMemo();
		} else{
			return null;
		}
	}

	// 수정(추가, 삭제)된 전화번호부를 저장하는 함수 
	public void save() {
		if (modified) { // 변경사항이 있다면
			try {
				PrintWriter out = 
						new PrintWriter(new FileWriter(sourceName));
				// 파일을 열어 스트림을 생성

				for (int i = 0; i <size; i++) {
					if(theDirectory[i].getNumber() == null)
						continue;
					out.println(theDirectory[i].getName()); // 파일에 이름을 기록합니다.
					out.println(theDirectory[i].getNumber()); // 파일에 번호를 기록합니다.
					out.println(theDirectory[i].getMemo()); // 파일에 메모를 기록합니다.
				} 

				out.close(); // 스트림을 닫는다.
				modified = false; // 수정여부를 false로
			} catch (Exception ex) {
				System.err.println("Save of directory failed");
				ex.printStackTrace();
				System.exit(1);
			}
		}
	}

	// 매개변수 name으로 저장된 연락처를 찾는 함수 
	private int find(String name) {
		for (int i = 0; i <size; i++) { 
			if (theDirectory[i].getName().equals(name)) {
				return i; // 찾으면 i를 반환(i는 순서를 의미한다.)
			}
		}
		return -1; // Name not found.(이름을 못 찾으면 -1을 반환)
	}

	// 이름과 전화번호,메모를 추가하는 함수
	private void add(String name, String number, String memo) {
		if (size >= capacity) { // 현재 저장되어 있는 개수가 최대 저장 개수보다 크면
			reallocate(); // 저장 용량을 할당한다.(용량 증가)
		}
		theDirectory[size] = new Element(name, number,memo); // 추가
		size++; // 현재 저장 개수 증가
	}

	// 용량이 가득찼을 경우 용량을 더 할당해주는 함수 
	private void reallocate() {
		capacity *= 2; // 최대 용량을 두배로 늘린다.
		Element[] newDirectory = new Element[capacity];
		// 임시 전화번호부 배열을 생성한다.
		System.arraycopy(theDirectory, 0, newDirectory, 0, theDirectory.length);
		// 기존 전화번호부 배열의 내용을 임시 전화번호부 배열에 복사한다.
		theDirectory = newDirectory;
		// 참조 변수(전화번호부 배열)에 용량이 증가된 임시 전화번호부 배열을 연결한다.
	}

	// 연락처를 삭제하는 함수 
	public void removeEntry(String name) {

		int index = find(name);

		if (index >-1) {
			theDirectory[index].changeNumber(null); // 전화번호가 null이 되게 만들어 연락처를 삭제한다.
			modified = true;
		}
	}
}
}}}

Application 클래스입니다
{{{

import java.io.IOException;


	public class Application {

		public static void main(String[] args) {

			Function Function = new Function();
			// 전화번호부 기능을 수행할 클래스 생성.
			
			try {
					Function.loadData("pd.txt"); 
					// 파일로부터 저장된 연락처들을 읽어들인다.
			} catch (IOException e) {
				e.printStackTrace();
			}

			GUI FunctionInterface = new GUI(); // GUI 생성
			FunctionInterface.processCommands(Function);
			// 전화번호부 기능을 활성화
		}
}
}}}