#summary 출석관리 어플리케이션
#labels 2013190713

= Introduction =

출석체크를 핸드폰에 하여 휴대성을 용이하게 함


매번 명단을 들고 다녀야 해서 불편한 출석체크를 위해!

* 학생명단 추가 기능
* 날짜 


- 맨처음 어느 그룹의 출석체크를 할 것인지 선택하는 항목을 넣음
  (ex. 선형대수, 컴퓨터프로그래밍 ...)

- 선택시 다이어리가 뜸. 기본적으로 오늘의 날짜가 설정되어 있으며 변경가능.

- 다이어리에서 날짜를 선택하면 학생들의 명단이 뜸. 

# 출석/지각/결석 으로 표기.

- 마지막에 통계 기능도 추가. 지각, 결석 등의 현황을 그래프로도 보여주고 
  score = 100 + 결석횟수*(-3) * (int)지각횟수/3*(-3) ;
  이런식으로 출석점수도 환산 가능.
  정보가 전산화되어 있기 때문에 바로 인터넷에 공유하기도 쉽다!





= Details =

<font size='5'><b>Attendance book</b></font>


== class ==

http://comp166-koreauniv.googlecode.com/files/상미클래스.png

* LectureList.java

{{{

package com.example.attendancebook;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Map.Entry;

import android.os.Environment;

public class LectureList {
	public static LectureStatus curLectureStatus = null;
	// public static DailyAttendance curDailyAttendance = null;

	public static Hashtable<String, LectureStatus> list = new Hashtable<String, LectureStatus>();

	public static String dataDir; //디렉토리의 경로를 써준다

	public static void InitDirectory() {
		File path = Environment.getExternalStorageDirectory(); //
		dataDir = path.getAbsolutePath() + "/AttendanceBook/"; 
		File file = new File(dataDir);
		if (!file.exists()) // 원하는 경로에 폴더가 있는지 확인
			file.mkdirs(); //없으면 새로 생성
	}

	public static void LoadLecture() throws IOException {
		list.clear();

		BufferedReader br = new BufferedReader(new FileReader(dataDir
				+ "lecture.txt"));// 지정해준 디렉토리에 lecture.txt 파일을 만든다

		String readLine = "";
		while ((readLine = br.readLine()) != null) {
			String[] items = readLine.split("\t"); //\t을 경계로 아이템들을 읽어낸다

			curLectureStatus = new LectureStatus();
			curLectureStatus.title = items[0];
			list.put(items[0], curLectureStatus);
		}

		br.close();

	}

	public static void LoadStudent() throws Exception {

		BufferedReader br = new BufferedReader(new FileReader(dataDir
				+ "student.txt")); // 해당 경로에 있는 디렉토리에 student.txt를 만듦

		String lec = "";
		String std = "";

		String readLine = "";

		while ((readLine = br.readLine()) != null) {
			String[] items = readLine.split("\t");

			lec = items[0];
			std = items[1];

			if (list.containsKey(lec)) {
				curLectureStatus = list.get(lec); //과목 받고 \t 뛴 후
			} else {
				continue;
			}
			curLectureStatus.studentList.add(std); //학생이름 받는다
		}

		br.close();

	}

	public static void LoadAttendance() throws Exception {
		// 파일로 부터 읽기

		BufferedReader br = new BufferedReader(new FileReader(dataDir
				+ "attendance.txt")); // 해당 경로에 attendance.txt 만듦. 학생들의 출결을 관리

		DailyAttendance curDailyAttendance = null;

		String lec = "";
		String date = "";
		String std = "";
		String status = "";

		String readLine = "";
		while ((readLine = br.readLine()) != null) {
			String[] items = readLine.split("\t");
			if (items.length < 3)
				continue;

			lec = items[0];
			date = items[1];
			std = items[2];
			status = items[3];

			if (list.containsKey(lec)) {
				curLectureStatus = list.get(lec);
			} else {
				continue;
			}

			if (curLectureStatus.dailyAttendanceList.containsKey(date)) {
				//현재 과목에서 해당 date의 출석부가 있으면 그 출석부를 가져온다.
				curDailyAttendance = curLectureStatus.dailyAttendanceList
						.get(date);
			} else {
				// 없다면 새로 생성한다.
				curDailyAttendance = new DailyAttendance();
				curLectureStatus.dailyAttendanceList.put(date,
						curDailyAttendance);
			}

			curDailyAttendance.studentList.add(new DailyAttendanceStudent(std,
					status));//학생 리스트에 학생이름과 상태를 추가한다
		}
	}

	public static void LoadAssignment() throws IOException {

		BufferedReader br = new BufferedReader(new FileReader(dataDir
				+ "assignment.txt")); // 해당 경로에 assignment.txt 를 생성
		String lec = "";
		String ass = "";

		String readLine = "";
		while ((readLine = br.readLine()) != null) {
			String[] items = readLine.split("\t");

			lec = items[0];
			ass = items[1];

			if (list.containsKey(lec)) {
				curLectureStatus = list.get(lec); 
			} else {
				continue;
			}

			curLectureStatus.dailyAssignmentList.put(ass, new DailyAssignment(
					ass));
		}
	}

	public static void SaveStudent() throws IOException {
		
		BufferedWriter writer = new BufferedWriter(new FileWriter(dataDir
				+ "student.txt")); // studenet.txt에 쓸 것

		for (Entry<String, LectureStatus> entry : LectureList.list.entrySet()) {
// 
			String lec = entry.getKey();
			for (String std : entry.getValue().studentList) {
				// 인자를 받아서 "과목명 	학생이름\n" 이런식으로 입력함
				// for문을 돌면서 모든 학생들의 list를 받아옴
				writer.write(lec+"\t"+std+ "\n"); 
			}
		}
		writer.close();

	}

	public static void SaveLecture() throws IOException {

		BufferedWriter writer = new BufferedWriter(new FileWriter(dataDir
				+ "lecture.txt"));
		//lecture.txt에 씀

		for (Entry<String, LectureStatus> entry : LectureList.list.entrySet()) {
			writer.write(entry.getKey() + "\n");
			//list의 항목들을 \n으로 끊으면서 받는다
		}
		writer.close();
	}

	public static void SaveAttendance() {
/*		BufferedWriter writer = new BufferedWriter(new FileWriter(dataDir
				+ "attendance.txt"));


			for (Entry<String, LectureStatus> entry : LectureList.list.entrySet()) {
				
			String lec = entry.getKey();
			for (String std : entry.getValue().studentList) {
				writer.write(lec+"\t"+Student.curDate+"\t"+std++ "\n");
			}
		}
			writer.close();	
*/

	}

	public static void SaveAssignment(BufferedReader bufferReader) {
/*
		BufferedWriter writer = new BufferedWriter(new FileWriter(dataDir
				+ "assignment.txt")); // 해당 경로에 assignment.txt 를 생성

		for (Entry<String, LectureStatus> entry : LectureList.list.entrySet()) {
			
		String lec = entry.getKey();
		for(Entry<String, DailyAssignment > : LectureList.curLectureStatus.dailyAssignmentList.entrySet()){
			writer.write(lec+"\t"+entry.getKey() + "\n");
			//list의 항목들을 \n으로 끊으면서 받는다
			
		}
		}		
	
	writer.close();
*/
}

}

class LectureStatus {
	public String title;
	public ArrayList<String> studentList = new ArrayList<String>();
	public Hashtable<String, DailyAttendance> dailyAttendanceList = new Hashtable<String, DailyAttendance>();
	public Hashtable<String, DailyAssignment> dailyAssignmentList = new Hashtable<String, DailyAssignment>();
	
	//Load나 Save등을 할 때 기존의 리스트에서 Hashtable로 과목별로 분류할 때 쓰인다.
}

class DailyAttendance {
	public ArrayList<DailyAttendanceStudent> studentList = new ArrayList<DailyAttendanceStudent>();
}

class DailyAttendanceStudent {
	public String name;
	public String status;

	public DailyAttendanceStudent() {
	}

	public DailyAttendanceStudent(String n, String s) {
		this.name = n;
		this.status = s;
	}
}

class DailyAssignment {
	public String assignmentTitle;

	// public ArrayList<DailyAssignmentStudent> studentList = new
	// ArrayList<DailyAssignmentStudent>();

	public DailyAssignment() {
	}

	public DailyAssignment(String n) {
		this.assignmentTitle = n;
	}
}
/*
class DailyAssignmentStudent {
	public String name;
	public String status;
}
*/


}}}

* MainActiviy.java

{{{

package com.example.attendancebook;

import java.io.BufferedReader;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Map.Entry;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;

public class MainActivity extends Activity {

	ArrayList<String> list;
	ArrayAdapter<String> adapter;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		InputStream isStation;
		BufferedReader reader;

		try {
// 프로그램을 실행하자마자 다음 함수들이 실행됨.
// Lecture, Student, Attendance, Assignment 정보들을 Load함
			
			LectureList.InitDirectory();

			LectureList.LoadLecture();
			LectureList.LoadStudent();
			LectureList.LoadAttendance();
			LectureList.LoadAssignment();

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		list = new ArrayList<String>();
		for (Entry<String, LectureStatus> entry : LectureList.list.entrySet()) {
			list.add(entry.getKey());
		}//Lecture 목록들을 불러옴

		adapter = new ArrayAdapter<String>(this,
				android.R.layout.simple_list_item_1, list);//어댑터 생성

		ListView listView = (ListView) findViewById(R.id.listView1);
		listView.setAdapter(adapter);//리스트에 어댑터를 지정해준다

		listView.setOnItemClickListener(new OnItemClickListener() {
			//리스트에 있는 항목을 클릭하면 해당 lecture로 이동한다
			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					final int pos, long id) {//위치를 받고
				String lec = list.get(pos);//그 위치의 리스트에 있는 lecture
				LectureList.curLectureStatus = LectureList.list.get(lec); 
				//앞으로 curLectureStatus 즉 현재 과목상태를 리스트에서 선택한 것으로 지정해준다!

				Intent intent = new Intent(getBaseContext(), Wth.class);//화면이동
				intent.putExtra("pos", pos);
				startActivity(intent);
			}
		});

		//
		Button button = (Button) findViewById(R.id.btn1);

		button.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				EditText et = (EditText) findViewById(R.id.et);
				String lecName;
				if (v.getId() == R.id.btn1) {
					// 추가 버튼
					if (et.getText().length() != 0) {
						lecName = et.getText().toString();
						list.add(lecName);//입력한 문자열, 즉 과목을 리스트에 추가한다

						et.setText("");
						adapter.notifyDataSetChanged();
						try {//추가한 것을 txt파일에 저장함. 앞으로 껐다키면 수정한 사항이 반영됨
							LectureList.list.put(lecName,new LectureStatus()); 
							LectureList.SaveLecture();
						} catch (Exception e) {

							e.printStackTrace();

						}
					}
				}
			}
		});

	}
}
}}}

* Wth.java

{{{

package com.example.attendancebook;

import java.util.Locale;

import android.app.ActionBar;
import android.app.FragmentTransaction;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.view.Menu;
import android.view.MenuItem;

public class Wth extends FragmentActivity implements ActionBar.TabListener {

	/**
	 * The {@link android.support.v4.view.PagerAdapter} that will provide
	 * fragments for each of the sections. We use a
	 * {@link android.support.v4.app.FragmentPagerAdapter} derivative, which
	 * will keep every loaded fragment in memory. If this becomes too memory
	 * intensive, it may be best to switch to a
	 * {@link android.support.v4.app.FragmentStatePagerAdapter}.
	 */
	SectionsPagerAdapter mSectionsPagerAdapter;

	/**
	 * The {@link ViewPager} that will host the section contents.
	 */
	ViewPager mViewPager; 

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_wth);

		// Set up the action bar.
		final ActionBar actionBar = getActionBar();
		actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS); //Tab을 사용한다!

		getActionBar().setHomeButtonEnabled(true);
		getActionBar().setDisplayHomeAsUpEnabled(true);
		getActionBar().setTitle("Check Attendance");

		// Create the adapter that will return a fragment for each of the three
		// primary sections of the app.
		mSectionsPagerAdapter = new SectionsPagerAdapter(getApplicationContext(), 
				getSupportFragmentManager());

		// Set up the ViewPager with the sections adapter.
		mViewPager = (ViewPager) findViewById(R.id.pager);
		mViewPager.setAdapter(mSectionsPagerAdapter);

		// When swiping between different sections, select the corresponding
		// tab. We can also use ActionBar.Tab#select() to do this if we have
		// a reference to the Tab.
		mViewPager
				.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {
					@Override
					public void onPageSelected(int position) {
						actionBar.setSelectedNavigationItem(position);
					}
				});

		// For each of the sections in the app, add a tab to the action bar.
		for (int i = 0; i < mSectionsPagerAdapter.getCount(); i++) {
			// Create a tab with text corresponding to the page title defined by
			// the adapter. Also specify this Activity object, which implements
			// the TabListener interface, as the callback (listener) for when
			// this tab is selected.
			actionBar.addTab(actionBar.newTab()
					.setText(mSectionsPagerAdapter.getPageTitle(i))
					.setTabListener(this));
		}

	}


	
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		//actionbar 부분
		
		Intent intent;
		switch (item.getItemId()) {
		case android.R.id.home:
			finish();
			break;
		case R.id.Home: //Home버튼을 누르면 MainActivity로 이동한다
			intent = new Intent(getBaseContext(), MainActivity.class);		
			startActivity(intent);	
			break;
		case R.id.Add_stu: //Add_stu버튼을 누르면 학생추가화면(AddStudent)으로 이동한다
			intent = new Intent(getBaseContext(), AddStudent.class);		
			startActivity(intent);	
			break;

		}
		return super.onOptionsItemSelected(item);
	}


	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.wth, menu);//버튼들은 res/menu/wth에 있다
		return true;
	}

	@Override
	public void onTabSelected(ActionBar.Tab tab,
			FragmentTransaction fragmentTransaction) {
		// When the given tab is selected, switch to the corresponding page in
		// the ViewPager.
		mViewPager.setCurrentItem(tab.getPosition());
	}

	@Override
	public void onTabUnselected(ActionBar.Tab tab,
			FragmentTransaction fragmentTransaction) {
	}

	@Override
	public void onTabReselected(ActionBar.Tab tab,
			FragmentTransaction fragmentTransaction) {
	}

	/**
	 * A {@link FragmentPagerAdapter} that returns a fragment corresponding to
	 * one of the sections/tabs/pages.
	 */
	public class SectionsPagerAdapter extends FragmentPagerAdapter {
		Context mContext; //Tab형식이라 기존의 액티비티와는 좀 다름

		public SectionsPagerAdapter(Context context, FragmentManager fm) {
			super(fm);
			mContext = context;
		}

		@Override
		public Fragment getItem(int position) {
			switch (position) {
			case 0:
				return new Student(mContext); //첫번째 탭은 Student 액티비티를 보여줌
			case 1:
				return new Student(mContext); //두번쨰 탭은 Result 액티비티를 보여줌. 현재 약간 오류가있어 임시적으로 Student에 연결함
			case 2:
				return new Assignment(mContext);//마지막 탭은 Assignment 액티비티를 보여줌
			}
			return null;
		}
		
		@Override
		public int getCount() {
			// Show 3 total pages.
			return 3;
		}

		@Override
		public CharSequence getPageTitle(int position) {
			//Tab의 이름 지정
			Locale l = Locale.getDefault();
			switch (position) {
			case 0:
				return "Attendance";
			case 1:
				return "Result";
			case 2:
				return "Assignment";
			}
			return null;
		}

	}


}

}}}

* Student.java (출결관리)

{{{

package com.example.attendancebook;

import java.util.ArrayList;
import java.util.Calendar;

import android.annotation.SuppressLint;
import android.app.DatePickerDialog;
import android.content.Context;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.ListView;
import android.widget.TextView;

@SuppressLint("ValidFragment")
public class Student extends Fragment {

	private TextView mDateDisplay;
	private Button mPickDate;
	public String curDate;
	private int mYear;
	private int mMonth;
	private int mDay;
	static final int DATE_DIALOG_ID = 0;

	ArrayList<String> list;
	ArrayAdapter<String> adapter;
	ListView lv;
	InputMethodManager imm;

	Context mContext;
	View mView;

	public Student(Context context) {
		mContext = context;

	}

	public Student() {
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		//DatePicker 함수이다.

		mView = inflater.inflate(R.layout.activity_student, null);

		mDateDisplay = (TextView) mView.findViewById(R.id.dateDisplay);
		mPickDate = (Button) mView.findViewById(R.id.pickDate);
		mPickDate.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				new DatePickerDialog(getActivity(), mDateSetListener, mYear,
						mMonth, mDay).show();
			}
		});

		final Calendar c = Calendar.getInstance();

		mYear = c.get(Calendar.YEAR);
		mMonth = c.get(Calendar.MONTH);
		mDay = c.get(Calendar.DAY_OF_MONTH);
		curDate = String.format("%04d-%02d-%02d", mYear, mMonth, mDay);//연,월,일을 슬래시(-)를 붙여서 curDate에 저장

		updateDisplay(); // 보여줌

		MakeStudent(curDate);//현재의 날짜를 넣어 기존에 명단에 있으면 불러오고 없으면 새로 쓴다


		Button button = (Button)mView.findViewById(R.id.button1);
		button.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				PutStudent(curDate);
			}
		});

		// arrayadapter에 설정하기

		MyAdapter adapter = new MyAdapter(mContext, studentList);
		//MyAdapter는 기존의 어댑터가 아니다. 나는 이름 + 라디오버튼 세개(지각,출석,결석)이 필요했다. 라디오버튼은 원칙적으로 한개만 붙일 수 있기 때문에 새로운 어댑터(MyAdapter.class와 row.xml)를 만들어 항목을 추가할 때 마다 지정된 양식으로 추가되도록 하였다.

		lv = (ListView) mView.findViewById(R.id.lv);
		lv.setAdapter(adapter);//리스트에 어댑터를 지정해준다

		return mView;//Tab이라 mView로 바꿔줌

	}

	private void updateDisplay() {
		mDateDisplay.setText(new StringBuilder().append(mMonth + 1).append("-")
				.append(mDay).append("-").append(mYear).append(" "));
	}

	private ArrayList<DailyAttendanceStudent> studentList;

	private void MakeStudent(String date) {
		if (LectureList.curLectureStatus.dailyAttendanceList.containsKey(date)) {
			studentList = LectureList.curLectureStatus.dailyAttendanceList
					.get(date).studentList;
		} else {
			studentList = new ArrayList<DailyAttendanceStudent>();

			for (String stdName : LectureList.curLectureStatus.studentList) {
				//현재 강의를 수강하는 학생들의 출석부를 만들어준다.
				DailyAttendanceStudent std = new DailyAttendanceStudent();

				std.name = stdName;
				std.status = "출석"; //처음에는 "출석"으로 디폴트되어있다.

				studentList.add(std);//추가
			}
		}
	}

	private void PutStudent(String date) {
		//dailyAttendanceList에 해당 날짜와 출결 상태를 넣어준다.(임시)
		//후에 이것들은 파일로 저장할 것
		DailyAttendance da = new DailyAttendance();
		da.studentList = studentList;
		LectureList.curLectureStatus.dailyAttendanceList.put(date, da);

		//DailyAttendanceStudent(이름, 상태)
		//LectureList.SaveAttendance();
		
	}

	private DatePickerDialog.OnDateSetListener mDateSetListener = new DatePickerDialog.OnDateSetListener() {

		@Override
		public void onDateSet(DatePicker view, int year, int monthOfYear,
				int dayOfMonth) {
			// TODO Auto-generated method stub
			mYear = year;
			mMonth = monthOfYear;
			mDay = dayOfMonth;

			curDate = String.format("%04d-%02d-%02d", mYear, mMonth, mDay);
			//년,월,일을 슬래쉬로 끊어서 curDate에 저장

			updateDisplay();
			

		}
	};
		

	/*
	 * private void writeToFile(String data) { try { OutputStreamWriter
	 * outputStreamWriter = new OutputStreamWriter(openFileOutput(FILENAME,
	 * Context.MODE_PRIVATE)); outputStreamWriter.write(data);
	 * outputStreamWriter.close(); } catch (IOException e) { Log.e(TAG,
	 * "File write failed: " + e.toString()); }
	 * 
	 * }
	 */
}


}}}

*MyAdapter.java

{{{

package com.example.attendancebook;

import java.util.ArrayList;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.RadioButton;
import android.widget.TextView;

public class MyAdapter extends ArrayAdapter<DailyAttendanceStudent> {

	private final Context context;
	private final ArrayList<DailyAttendanceStudent> itemsArrayList;

	public MyAdapter(Context context,
			ArrayList<DailyAttendanceStudent> itemsArrayList) {

		super(context, R.layout.row, itemsArrayList); //layout으로는 row.xml

		this.context = context;
		this.itemsArrayList = itemsArrayList;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {

		DailyAttendanceStudent item = itemsArrayList.get(position);
		// 1. Create inflater
		LayoutInflater inflater = (LayoutInflater) context
				.getSystemService(Context.LAYOUT_INFLATER_SERVICE);

		// 2. Get rowView from inflater
		View rowView = inflater.inflate(R.layout.row, parent, false);//row.xml을 보여준다

		// 3. Get the two text view from the rowView
		TextView textView = (TextView) rowView.findViewById(R.id.textView1);

		// 4. Set the text for textView
		textView.setText(item.name);//학생이름
		
		//라디오 버튼 세 개
		//각각의 버튼은 해당 문자열과 연결됨
		//첫번째 버튼은 "지각", 두번째는 "출석", 세번째는 "결석"
		if (item.status.compareTo("지각") == 0) {
			RadioButton radioButton = (RadioButton) rowView
					.findViewById(R.id.radio0);
			radioButton.setChecked(true);
		}
		if (item.status.compareTo("출석") == 0) {
			RadioButton radioButton = (RadioButton) rowView
					.findViewById(R.id.radio1);
			radioButton.setChecked(true);
		}
		if (item.status.compareTo("결석") == 0) {
			RadioButton radioButton = (RadioButton) rowView
					.findViewById(R.id.radio2);
			radioButton.setChecked(true);
		}

		// 5. return rowView
		return rowView;
	}
}

}}}

* Result.java

{{{

package com.example.attendancebook;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Map.Entry;

import android.annotation.SuppressLint;
import android.content.Context;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.ArrayAdapter;
import android.widget.ListView;

@SuppressLint("ValidFragment")
public class Result extends Fragment {

	ArrayList<String> list;
	ArrayAdapter<String> adapter;
	ListView lv;
	InputMethodManager imm;

	Context mContext;
	View mView;

	public Result(Context context) {
		mContext = context;
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		mView = inflater.inflate(R.layout.activity_result, null);

		Hashtable<String, Integer> lateList = new Hashtable<String, Integer>();
		Hashtable<String, Integer> normalList = new Hashtable<String, Integer>();
		Hashtable<String, Integer> absentList = new Hashtable<String, Integer>();

		for (Entry<String, DailyAttendance> entry : LectureList.curLectureStatus.dailyAttendanceList
				.entrySet()) {

			String date = entry.getKey();
			DailyAttendance attendance = entry.getValue();

			for (DailyAttendanceStudent std : attendance.studentList) {
				if (std.status.compareTo("지각") == 0) {
					if (lateList.containsKey(std.name)) {
						lateList.put(std.name, lateList.get(std.name) + 1);//기존에 데이터가 있으면 +1
					} else {
						lateList.put(std.name, 1);//기존에 데이터가 없으면 1
					}
				} else if (std.status.compareTo("출석") == 0) {
					if (normalList.containsKey(std.name)) {
						normalList.put(std.name, normalList.get(std.name) + 1);
					} else {
						normalList.put(std.name, 1);
					}
				} else if (std.status.compareTo("결석") == 0) {
					if (absentList.containsKey(std.name)) {
						absentList.put(std.name, absentList.get(std.name) + 1);
					} else {
						absentList.put(std.name, 1);
					}
				}
			}
		}

		adapter = new ArrayAdapter<String>(this.getActivity(),
				android.R.layout.simple_list_item_1, list);

		ListView listView = (ListView) mView.findViewById(R.id.lv);
		listView.setAdapter(adapter);
		
		for (String std : LectureList.curLectureStatus.studentList) {

			list.add(std +"\t"+ lateList.get(std) +"\t"+ normalList.get(std) +"\t" + absentList.get(std));

			//학생이름	지각횟수	출석횟수	결석횟수 를 하나의 배열로 받아 보여준다
		}


		return mView;

	}
}

}}}

* Assignemnt.java

{{{

package com.example.attendancebook;

import java.util.ArrayList;

import android.annotation.SuppressLint;
import android.content.Context;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;



@SuppressLint("ValidFragment")//Tab이라 붙음
public class Assignment extends Fragment {
	ArrayList<String> list;
	ArrayAdapter<String> adapter;
	ListView lv;
	InputMethodManager imm;

	Context mContext;
	View mView;

	public Assignment(Context context) {
		mContext = context;
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		mView = inflater.inflate(R.layout.activity_assignment, null);


		list = new ArrayList <String>();
/*		
		for (Entry<String, LectureStatus> entry : LectureList.list.entrySet()) {
			
			list.add(entry.getKey());
		}
*/
		adapter = new ArrayAdapter<String>(this.getActivity(),
				android.R.layout.simple_list_item_1, list);

		ListView listView = (ListView) mView.findViewById(R.id.lv);
		listView.setAdapter(adapter);


		
		Button button = (Button) mView.findViewById(R.id.btn1);

		button.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				EditText et = (EditText) mView.findViewById(R.id.et);
				if (v.getId() == R.id.btn1) {
					// 추가 버튼
					if (et.getText().length() != 0) {
						list.add(et.getText().toString());//리스트에 텍스트를 추가한다
						et.setText("");

						adapter.notifyDataSetChanged();
					}
				}
			}
		});

		return mView;
	}

}


}}}


== layout ==

http://comp166-koreauniv.googlecode.com/files/상미xml.png

* activity_main.xml

{{{

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/LinearLayout2"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context=".MainActivity" >

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal" >

        <EditText
            android:id="@+id/et"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:hint="과목명"
            android:inputType="text" >

            <requestFocus />
        </EditText>

        <Button
            android:id="@+id/btn1"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="추가" />
    </LinearLayout>

    <ListView
        android:id="@+id/listView1"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:choiceMode="singleChoice" >
    </ListView>

</LinearLayout>

}}}

* activity_wth.xml

{{{

<android.support.v4.view.ViewPager xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/pager"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".Wth" >


</android.support.v4.view.ViewPager>


}}}

* fragment_wth_dummy.xml

{{{

<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context=".Wth$DummySectionFragment" >

    <TextView
        android:id="@+id/section_label"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content" />

</RelativeLayout>

}}}

* activity_student.xml

{{{

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/LinearLayout1"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context=".MainActivity" >

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal" >
  <TextView android:id="@+id/dateDisplay"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text=""/>
    <Button android:id="@+id/pickDate"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Change the date"/>

    <Button
        android:id="@+id/button1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Save" />

    </LinearLayout>

    <TextView
        android:id="@+id/textView1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="               지각      출석      결석"
        android:textAppearance="?android:attr/textAppearanceMedium" />

    <ListView
        android:id="@+id/lv"
        android:textColor="@android:color/black"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:choiceMode="singleChoice" >
    </ListView>

</LinearLayout>

}}}

* activity_student_add.xml

{{{

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/LinearLayout2"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context=".AddStudent" >

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal" >

        <EditText
            android:id="@+id/et"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:hint="학생 이름"
            android:inputType="text" >

            <requestFocus />
        </EditText>

        <Button
            android:id="@+id/btn1"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="추가" />
    </LinearLayout>

    <ListView
        android:id="@+id/listView1"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:choiceMode="singleChoice" >
    </ListView>

</LinearLayout>

}}}

* activity_result.xml

{{{

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/LinearLayout1"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context=".MainActivity" >

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal" >
    </LinearLayout>

    <ListView
        android:id="@+id/lv"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:choiceMode="singleChoice" >
    </ListView>

</LinearLayout>

}}}

* activity_assignment.xml

{{{

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/LinearLayout1"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context=".MainActivity" >

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal" >

        <EditText
            android:id="@+id/et"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:hint="데이터 입력"
            android:inputType="text" >

            <requestFocus />
        </EditText>

        <Button
            android:id="@+id/btn1"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="추가" />
    </LinearLayout>

    <ListView
        android:id="@+id/lv"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:choiceMode="singleChoice" >
    </ListView>

</LinearLayout>

}}}

* activity_add_student.xml

{{{

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/LinearLayout2"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context=".AddStudent" >

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal" >

        <EditText
            android:id="@+id/et"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:hint="학생 이름"
            android:inputType="text" >

            <requestFocus />
        </EditText>

        <Button
            android:id="@+id/btn1"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="추가" />
    </LinearLayout>

    <ListView
        android:id="@+id/listView1"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:choiceMode="singleChoice" >
    </ListView>

</LinearLayout>

}}}

* row.xml

{{{

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:android1="http://schemas.android.com/apk/res/android"
    android1:id="@+id/LinearLayout1"
    android:layout_width="fill_parent"
    android:layout_height="wrap_content" >

    <TextView
        android:id="@+id/textView1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Medium Text"
        android:textColor="@android:color/black"        
        android:textAppearance="?android:attr/textAppearanceMedium" />

    <RadioGroup
        android:id="@+id/radioGroup1"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal" >

        <RadioButton
            android1:id="@+id/radio0"
            android1:layout_width="0dp"
            android1:layout_height="wrap_content"
            android1:layout_alignParentTop="true"
            android1:layout_marginLeft="36dp"
            android1:layout_toRightOf="@+id/textView1"
            android1:layout_weight="1"
            android1:checked="true" />

        <RadioButton
            android1:id="@+id/radio1"
            android1:layout_width="0dp"
            android1:layout_height="wrap_content"
            android1:layout_weight="1"
            android1:checked="true" />

        <RadioButton
            android:id="@+id/radio2"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="" />
    </RadioGroup>

</LinearLayout>

}}}