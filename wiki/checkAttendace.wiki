#summary 출석관리 어플리케이션
#labels 2013190713

= Introduction =

출석체크를 핸드폰에 하여 휴대성을 용이하게 함


매번 명단을 들고 다녀야 해서 불편한 출석체크를 위해!

* 학생명단 추가 기능
* 날짜 


- 맨처음 어느 그룹의 출석체크를 할 것인지 선택하는 항목을 넣음
  (ex. 선형대수, 컴퓨터프로그래밍 ...)

- 선택시 다이어리가 뜸. 기본적으로 오늘의 날짜가 설정되어 있으며 변경가능.

- 다이어리에서 날짜를 선택하면 학생들의 명단이 뜸. 

# 출석/지각/결석 으로 표기.

- 마지막에 통계 기능도 추가. 지각, 결석 등의 현황을 그래프로도 보여주고 
  score = 100 + 결석횟수*(-3) * (int)지각횟수/3*(-3) ;
  이런식으로 출석점수도 환산 가능.
  정보가 전산화되어 있기 때문에 바로 인터넷에 공유하기도 쉽다!





= Details =

<font size='5'><b>Attendance book</b></font>


== class ==

http://comp166-koreauniv.googlecode.com/files/상미클래스.png

* LectureList.java

{{{

package com.example.attendancebook;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Map.Entry;

import android.os.Environment;

public class LectureList {
	public static LectureStatus curLectureStatus = null;
	// public static DailyAttendance curDailyAttendance = null;

	public static Hashtable<String, LectureStatus> list = new Hashtable<String, LectureStatus>();

	public static String dataDir; //디렉토리의 경로를 써준다

	public static void InitDirectory() {
		File path = Environment.getExternalStorageDirectory(); //
		dataDir = path.getAbsolutePath() + "/AttendanceBook/"; 
		File file = new File(dataDir);
		if (!file.exists()) // 원하는 경로에 폴더가 있는지 확인
			file.mkdirs(); //없으면 새로 생성
	}

	public static void LoadLecture() throws IOException {
		list.clear();

		BufferedReader br = new BufferedReader(new FileReader(dataDir
				+ "lecture.txt"));// 지정해준 디렉토리에 lecture.txt 파일을 만든다

		String readLine = "";
		while ((readLine = br.readLine()) != null) {
			String[] items = readLine.split("\t"); //\t을 경계로 아이템들을 읽어낸다

			curLectureStatus = new LectureStatus();
			curLectureStatus.title = items[0];
			list.put(items[0], curLectureStatus);
		}

		br.close();

	}

	public static void LoadStudent() throws Exception {

		BufferedReader br = new BufferedReader(new FileReader(dataDir
				+ "student.txt")); // 해당 경로에 있는 디렉토리에 student.txt를 만듦

		String lec = "";
		String std = "";

		String readLine = "";

		while ((readLine = br.readLine()) != null) {
			String[] items = readLine.split("\t");

			lec = items[0];
			std = items[1];

			if (list.containsKey(lec)) {
				curLectureStatus = list.get(lec); //과목 받고 \t 뛴 후
			} else {
				continue;
			}
			curLectureStatus.studentList.add(std); //학생이름 받는다
		}

		br.close();

	}

	public static void LoadAttendance() throws Exception {
		// 파일로 부터 읽기

		BufferedReader br = new BufferedReader(new FileReader(dataDir
				+ "attendance.txt")); // 해당 경로에 attendance.txt 만듦. 학생들의 출결을 관리

		DailyAttendance curDailyAttendance = null;

		String lec = "";
		String date = "";
		String std = "";
		String status = "";

		String readLine = "";
		while ((readLine = br.readLine()) != null) {
			String[] items = readLine.split("\t");
			if (items.length < 3)
				continue;

			lec = items[0];
			date = items[1];
			std = items[2];
			status = items[3];

			if (list.containsKey(lec)) {
				curLectureStatus = list.get(lec);
			} else {
				continue;
			}

			if (curLectureStatus.dailyAttendanceList.containsKey(date)) {
				//현재 과목에서 해당 date의 출석부가 있으면 그 출석부를 가죠온다.
				curDailyAttendance = curLectureStatus.dailyAttendanceList
						.get(date);
			} else {
				// 없다면 새로 생성한다.
				curDailyAttendance = new DailyAttendance();
				curLectureStatus.dailyAttendanceList.put(date,
						curDailyAttendance);
			}

			curDailyAttendance.studentList.add(new DailyAttendanceStudent(std,
					status));//학생 리스트에 학생이름과 상태를 추가한다
		}
	}

	public static void LoadAssignment() throws IOException {

		BufferedReader br = new BufferedReader(new FileReader(dataDir
				+ "assignment.txt")); // 해당 경로에 assignment.txt 를 생성
		String lec = "";
		String ass = "";

		String readLine = "";
		while ((readLine = br.readLine()) != null) {
			String[] items = readLine.split("\t");

			lec = items[0];
			ass = items[1];

			if (list.containsKey(lec)) {
				curLectureStatus = list.get(lec); 
			} else {
				continue;
			}

			curLectureStatus.dailyAssignmentList.put(ass, new DailyAssignment(
					ass));
		}
	}

	public static void SaveStudent() throws IOException {
		
		BufferedWriter writer = new BufferedWriter(new FileWriter(dataDir
				+ "student.txt")); // studenet.txt에 쓸 것

		for (Entry<String, LectureStatus> entry : LectureList.list.entrySet()) {
// 
			String lec = entry.getKey();
			for (String std : entry.getValue().studentList) {
				// 인자를 받아서 "과목명 	학생이름\n" 이런식으로 입력함
				// for문을 돌면서 모든 학생들의 list를 받아옴
				writer.write(lec+"\t"+std+ "\n"); 
			}
		}
		writer.close();

	}

	public static void SaveLecture() throws IOException {

		BufferedWriter writer = new BufferedWriter(new FileWriter(dataDir
				+ "lecture.txt"));
		//lecture.txt에 씀

		for (Entry<String, LectureStatus> entry : LectureList.list.entrySet()) {
			writer.write(entry.getKey() + "\n");
			//list의 항목들을 \n으로 끊으면서 받는다
		}
		writer.close();
	}

	public static void SaveAttendance() {
/*		BufferedWriter writer = new BufferedWriter(new FileWriter(dataDir
				+ "attendance.txt"));


			for (Entry<String, LectureStatus> entry : LectureList.list.entrySet()) {
				
			String lec = entry.getKey();
			for (String std : entry.getValue().studentList) {
				writer.write(lec+"\t"+Student.curDate+"\t"+std++ "\n");
			}
		}
			writer.close();	
*/

	}

	public static void SaveAssignment(BufferedReader bufferReader) {
/*
		BufferedWriter writer = new BufferedWriter(new FileWriter(dataDir
				+ "assignment.txt")); // 해당 경로에 assignment.txt 를 생성

		for (Entry<String, LectureStatus> entry : LectureList.list.entrySet()) {
			
		String lec = entry.getKey();
		for(Entry<String, DailyAssignment > : LectureList.curLectureStatus.dailyAssignmentList.entrySet()){
			writer.write(lec+"\t"+entry.getKey() + "\n");
			//list의 항목들을 \n으로 끊으면서 받는다
			
		}
		}		
	
	writer.close();
*/
}

class LectureStatus {
	public String title;
	public ArrayList<String> studentList = new ArrayList<String>();
	public Hashtable<String, DailyAttendance> dailyAttendanceList = new Hashtable<String, DailyAttendance>();
	public Hashtable<String, DailyAssignment> dailyAssignmentList = new Hashtable<String, DailyAssignment>();
	
	//Load나 Save등을 할 때 기존의 리스트에서 Hashtable로 과목별로 분류할 때 쓰인다.
}

class DailyAttendance {
	public ArrayList<DailyAttendanceStudent> studentList = new ArrayList<DailyAttendanceStudent>();
}

class DailyAttendanceStudent {
	public String name;
	public String status;

	public DailyAttendanceStudent() {
	}

	public DailyAttendanceStudent(String n, String s) {
		this.name = n;
		this.status = s;
	}
}

class DailyAssignment {
	public String assignmentTitle;

	// public ArrayList<DailyAssignmentStudent> studentList = new
	// ArrayList<DailyAssignmentStudent>();

	public DailyAssignment() {
	}

	public DailyAssignment(String n) {
		this.assignmentTitle = n;
	}
}
/*
class DailyAssignmentStudent {
	public String name;
	public String status;
}
*/


}}}

* MainActiviy.java

{{{

package com.example.attendancebook;

import java.io.BufferedReader;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Map.Entry;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;

public class MainActivity extends Activity {

	ArrayList<String> list;
	ArrayAdapter<String> adapter;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		InputStream isStation;
		BufferedReader reader;

		try {
// 프로그램을 실행하자마자 다음 함수들이 실행됨.
// Lecture, Student, Attendance, Assignment 정보들을 Load함
			
			LectureList.InitDirectory();

			LectureList.LoadLecture();
			LectureList.LoadStudent();
			LectureList.LoadAttendance();
			LectureList.LoadAssignment();

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		list = new ArrayList<String>();
		for (Entry<String, LectureStatus> entry : LectureList.list.entrySet()) {
			list.add(entry.getKey());
		}//Lecture 목록들을 불러옴

		adapter = new ArrayAdapter<String>(this,
				android.R.layout.simple_list_item_1, list);//어댑터 생성

		ListView listView = (ListView) findViewById(R.id.listView1);
		listView.setAdapter(adapter);//리스트에 어댑터를 지정해준다

		listView.setOnItemClickListener(new OnItemClickListener() {
			//리스트에 있는 항목을 클릭하면 해당 lecture로 이동한다
			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					final int pos, long id) {//위치를 받고
				String lec = list.get(pos);//그 위치의 리스트에 있는 lecture
				LectureList.curLectureStatus = LectureList.list.get(lec); 
				//앞으로 curLectureStatus 즉 현재 과목상태를 리스트에서 선택한 것으로 지정해준다!

				Intent intent = new Intent(getBaseContext(), Wth.class);//화면이동
				intent.putExtra("pos", pos);
				startActivity(intent);
			}
		});

		//
		Button button = (Button) findViewById(R.id.btn1);

		button.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				EditText et = (EditText) findViewById(R.id.et);
				String lecName;
				if (v.getId() == R.id.btn1) {
					// 추가 버튼
					if (et.getText().length() != 0) {
						lecName = et.getText().toString();
						list.add(lecName);//입력한 문자열, 즉 과목을 리스트에 추가한다

						et.setText("");
						adapter.notifyDataSetChanged();
						try {//추가한 것을 txt파일에 저장함. 앞으로 껐다키면 수정한 사항이 반영됨
							LectureList.list.put(lecName,new LectureStatus()); 
							LectureList.SaveLecture();
						} catch (Exception e) {

							e.printStackTrace();

						}
					}
				}
			}
		});

	}
}
}}}

* Wth.java


* Student.java(Attendance)
**MyAdapter.java


* Result.java


* Assignemnt.java


== xml ==

http://comp166-koreauniv.googlecode.com/files/상미xml.png