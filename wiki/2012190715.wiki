#summary 수업중 실습하는 내용을 올리게 되는 실습페이지입니다. 페이지의 내용은 각 학생에 의해서 관리됩니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

public class BeerSong { public static void main (String args) { int beerNum = 99; String word = "bottles"; //복수형

while (beerNum > 0) {

if (beerNum == 1) { word = "bottle"; //단수형 (한 병인 경우) }

System.out.println(beerNum + " " + word + " of beer on the wall"); System.out.println(beerNum + " " + word + " of beer."); System.out.println("Take one down."); System.out.println("Pass it around."); beerNum = beerNum - 1;

if(beerNum > 0) { System.out.println(beerNum + " " + word + " of beer on the wall"); } else { System.out.println("No more bottles of beer on the wall"); } //else 문 끝 } //while 순환문 끝 } //main 클래스 끝 } //클래스 끝


*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

public class PhraseOMatic {
public static void main (String[] args) {

// 세 종류의 단어 목록을 만든다. 
String [] wordListOne = {"4/21","young-tigers","20,000 people"};
String [] wordListTwo = {"strong","focus-on","sharing"};
String [] wordListThree = {"tip-toe","firefighter","cold-war"};

//각 단어 목록에 단어가 몇 개씩 들어있는지 확인한다.
int oneLength = wordListOne.length;
int twoLength = wordListTwo.length;
int threeLength = wordListThree.length;

//난수 세개 발생시킨다
int rand1 = (int) (Math.random()*oneLength);
int rand2 = (int) (Math.random()*twoLength);
int rand3 = (int) (Math.random()*threeLength);

//구문 만들기
String phrase = wordListOne[rand1] + " " +
wordListTwo[rand2] + " " + wordListThree[rand3];

//구문을 출력한다
System.out.println("What we need is a " + phrase);
}

{{{

}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 컴파일러가 파일을 주면 자바 가상머신이 그 프로그램을 실행시켜준다.
 * 컴파일러: 자바에서 바이트코드 컴파일러를 사용하여 파일을 자바 가상머신에게 준다. 

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

A. 
class Exercise1b {
public static void main(String [] args) {
int x = 1;
while (x<10){
x=x+1; // x=x+1 처럼 한 행을 추가하지 않으면 while순환문이 끊임없이 계속 돌아가는 무한 순환문이 된다.
if(x>3) {
System.out.println("big x");
}
}
}
}

B.
class HJ{ // 클래스를 정의해주어야 컴파일 가능하다. 또한 클래스의 시작과 끝을 나타내는 중괄호도 잊지 말아야 한다.
public static void main(String [] args){
int x = 5;
while (x>1) {
x = x-1;
if(x<3) {
System.out.println("small x");
}
}
}
}

C.
class Exercise1b{
public static void main(String [] args) { // while순환문 코드는 반드시 클래스 안의 메소드 안에 있어야 한다. 클래스만 있어도 안되고 반드시 그 안에 메소드가 있어야 한다.
int x = 5;
while (x>1) {
x = x-1;
if(x<3) {
System.out.println("small x");
}
}
}
}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체의 상태(데이터)를 나타낸다. 객체에서 자신에 대해 "아는 것"
 * 메소드:객체에서 할 수 있는 일, 객체에서 자신이 하는 것 "행동"
 * 클래스:클래스는 객체가 아니다. 객체를 만들기 위한 용도, 청사진! 이다. 가상 머신에 그 유형의 객체를 만드는 방법을 알려주는 역할을 한다.
 * 테스트용 클래스:클래스에는 진짜 클래스(실제로 사용할 객체의 유형을 나타내는 클래스)고 <클래스명>TestDrive와 같은 식으로 이름이 붙는 테스트용 클래스가 있다. 테스트용클래스에서 객체를 만들고 그 객체의 변수와 메소드에 접근한다.
 

*68p Television* _채워넣기_

 * 인스턴스 변수:modelname, inch
 * 메소드:channel(),volume()


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

> GuessGame.java

public class GuessGame {
	Player p1;
	Player p2;
	Player p3;
	Player p4;
//GuessGame 에는 Player 객체 네개를 저장하기 위한 인스턴트 변수 네개있다.

	public void startGame() {
	p1 = new Player();
	p2 = new Player();
	p3 = new Player();
	p4 = new Player();

	int guessp1 = 0;
	int guessp2 = 0;
	int guessp3 = 0;
	int guessp4 = 0;

	boolean p1isRight = false;
	boolean p2isRight = false;
	boolean p3isRight = false;
	boolean p4isRight = false;

	int targetNumber = (int) (Math.random()*10);
	System.out.println("0 이상 9 이하의 숫자를 맞춰보세요.");
	
	while(true) {
	 System.out.println("맞춰야 할 숫자는 " + targetNumber + "입니다.");

	p1.guess();
	p2.guess();
	p3.guess();
	p4.guess();

	guessp1 = p1.number;
	System.out.println("1번 선수가 찍은 숫자: " + guessp1);

	guessp2 = p2.number;
	System.out.println("2번 선수가 찍은 숫자: " + guessp2);

	guessp3 = p3.number;
	System.out.println("3번 선수가 찍은 숫자: " + guessp3);

	guessp4 = p4.number;
	System.out.println("4번 선수가 찍은 숫자: " + guessp4);

	if(guessp1 == targetNumber) {
	 p1isRight = true;
	}

	if(guessp2 == targetNumber) {
	 p2isRight = true;
	}

	if(guessp3 == targetNumber) {
	 p3isRight = true;
	}

	if(guessp4 == targetNumber) {
	 p4isRight = true;
	}

	if(p1isRight || p2isRight || p3isRight || p4isRight) {

	 System.out.println("맞춘 선수가 있습니다.");
	 System.out.println("1번 선수: " + p1isRight);
	 System.out.println("2번 선수: " + p2isRight);
	 System.out.println("3번 선수: " + p3isRight);
	 System.out.println("4번 선수: " + p4isRight);
	 System.out.println("게임 끝.");
	 break; //게임이 끝났으므로 break문으로 순환문 빠져나간다.

	} else {
	//아직 아무도 못 맞췄기 떼문에 계속해야 합니다.
	System.out.println("다시 시도해야 합니다.");
	}
      }
   }
}  

> Player.java

	public class Player {
	 int number = 0;

	public void guess() {
	 number = (int) (Math.random() * 10);
	 System.out.println("찍은 숫자: " + number);
	}
      }

>GameLauncher.java
	public class GameLauncher {
	 public static void main (String[] args) {
		GuessGame game = new GuessGame();
		game.startGame();
	}
     } 


*76p 컴파일러가 되어봅시다* _구현후 주석달기_

>TapeDeck.java

class TapeDeck{

	boolean canRecord = false;

	void playTape() {
	 System.out.Println("tape playing");
	}

	void recordTape() {
	 System.out.Println("tape recording");
	}
   }

>TapeDeckTestDrive.java

class TapeDeckTestDrive {
	public static void main(String [] args) {
		TapeDeck t = new TapeDeck();
		t.canRecord = true;
		t.playtape();

		if(t.canRecord == true) {
			t.recordTape();
		}
	}
}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수:
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{

}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?:
 * 문제가 된 부분은 어딘가요?:

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:
 * 게터와 세터:
 * 인스턴스 변수 vs 지역 변수:
 
*107p Dog* _실행_

{{{

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:
 * 다형성:

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}