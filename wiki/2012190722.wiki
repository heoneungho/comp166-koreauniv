#summary 본격 자바 실습 페이지
<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{


public class BeerSong { // 클래스 시작
   public static void main (String[] args) { // 메인메소드 
      int beerNum = 99; // beerNum에 99저장
      String word = "bottles"; // 복수형
      
      while (beerNum > 0) { // while문 시작

             if (beerNum == 1) {beernum이 1일때만 실행된다
               word = "bottle";   // 단수형(한 병인경우)
               }

      System.out.println(beerNum + " " + word + " of beer on the wall"); //출력
      System.out.println(beerNum + " " + word + " of beer.");
      System.out.println("Take one down.");
      System.out.println("Pass it around.");
      beerNum = beerNum - 1;

      if (beerNum > 0) {
           //System.out.println(beerNum + " " + word + " of beer on the wall");
          //
      } else {
           System.out.println("No more bottles of beer on the wall");
      } // else문 끝
    }//while 문 끝
   }// main 클래스 끝
} // 클래스 끝



}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{

public class PhraseOMatic{
 public static void main(String[]args){

//세 종류의 단어 목록을 만듭니다. 적당히 필요한 단어를 추가해도 됩니다.
  String[]wordListOne={"monotonic","corollary "};

  String[]wordListTwo={"jerk","secant"};

  String[]wordListThree={"perimeter","mnemonic"};

//각 단어 목록에 단어가 몇 개씩 들어있는지 확인합니다.
int oneLength=wordListOne.length;
int twoLength=wordListTwo.length;
int threeLength=wordListThree.length;

//난수 세 개를 발생시킵니다.
int rand1=(int) (Math.random()*oneLength);
int rand2=(int) (Math.random()*twoLength);
int rand3=(int) (Math.random()*threeLength);

//이제 구문을 만듭니다.
  String phrase=wordListOne[rand1]+""+wordListTwo[rand2]+""+wordListThree[rand3];

//구문을 출력합니다.
  System.out.println("What we need is a"+phrase);
 }
}


}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 바이트코드를 실행한다,바이트코드가 실행되기전 누군가 건드리지 않았는지 확인한다.


 * 컴파일러:자바로 작성된 코드를 바이트코드로 바꿔준다.

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A
class Exercise1b {

    public static void main(String [] args) {
        
        int x = 1;

        while ( x < 10 ) //while문을 빠져나갈수 없게 되있다.
         {
           if ( x > 3 )//if문 시작
           {
             system.out.println("big x");
             break;//break로 while문을 빠져나간다!!.
           }//if문 끝
           x = x+1;
          }//while문 끝
     }//메인 메소드끝
}클래스끝

B
small x 이 2번 출력되는 코드
class Exercise {//클래스 가 빠져있어서 추가!

    public static void main(String [] args) {

        int x = 5;

        while ( x > 1 ) {

          x = x - 1;
        
          if ( x < 3 ) {

            System.out.println("small x");

          }//if문 끝
        }//while문 끝
    }//메인 메소드끝
}클래스 끝

C
small x 가 2번 출력 되는 코드
class Exercise {

    public static void main(String [] args) {

      int x = 5;

      while ( x >1 ) {

        x = x-1 ;
       
        if ( x < 3 ) {

          System.out.println("small x");

        }//if문 끝

       }//while문 끝
    }//메인메소드 끝
}//클래스 끝
}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수:객체의 상태를 나타내는것
 * 메소드: 객체가 하는일
 * 클래스: 클래스를 이용해 객체를 생성
 * 테스트용 클래스:클래스를 테스트하기위해 만드는 클래스 
 

*68p Television* _채워넣기_

 * 인스턴스 변수: 채널, 음량,화면크기
 * 메소드:켜기,끄기,채널이동,음량조절


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{


public class GuessGame {
        Player p1;
        Player p2;
        Player p3;
        Player p4;

        public void startGame() {
          p1 = new Player();
          p2 = new Player();
          p3 = new Player();
          p4 = new Player();

          int guessp1 = 0;
          int guessp2 = 0;
          int guessp3 = 0;
          int guessp4 = 0;

          boolean p1isRight = false;
          boolean p2isRight = false;
          boolean p3isRight = false;
          boolean p4isRight = false;

          int targetNumber = (int) (Math.random()*10);
          System.out.println("0이상 9이하의 숫자를 맞춰보세요.");

          while(true) {
                System.out.println("맞춰야 할 숫자는 " + targetNumber + "입니다");

                p1.guess();
                p2.guess();
                p3.guess();
                p4.guess();

                guessp1 = p1.number;
                System.out.println("1번 선수가 찍은 숫자: " + guessp1);

                guessp2 = p2.number;
                System.out.println("2번 선수가 찍은 숫자: " + guessp2);

                guessp3 = p3.number;
                System.out.println("3번 선수가 찍은 숫자: " + guessp3);

                guessp4 = p4.number;
                System.out.println("4번 선수가 찍은 숫자: " + guessp4);
                
                if (guessp1 == targetNumber) {
                	p1isRight = true;
                }
                
                if (guessp2 == targetNumber) {
                	p2isRight = true;         
                }
                
                if (guessp3 == targetNumber) {
                	p3isRight = true;
                }

                if (guessp4 == targetNumber) {
                	p4isRight = true;
                }
                
                if (p1isRight || p2isRight || p3isRight || p4isRight) {
                	
                	System.out.println("맞춘 선수가 있습니다.");
                	System.out.println("1번선수: " +p1isRight);
                	System.out.println("2번선수: " +p2isRight);
                	System.out.println("3번선수: " +p3isRight);
                	System.out.println("4번선수: " +p4isRight);
                	System.out.println("게임 끝!");
                	break;
                }
                else {
                	System.out.println("다시 시도해야 합니다.");
                }
          }
        }
}



public class Player {
	int number = 0;
	
	public void guess() {
		number = (int) (Math.random()*10);
		System.out.println("찍은 숫자: " + number);
	}
}  




public class GameLauncher {
	public static void main(String[] args) {
		GuessGame game = new GuessGame();
		game.startGame();
	}
}
             
}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A

class TapeDeck {//class 선언

        boolean canRecord = false;//bool형 변수를 선언하고 false로 초기화

        void playTape () {
                System.out.println("tape playing");
        }

        void recordTape () {
                System.out.println("tape recording");
        }
}//class 끝     
class TapeDeckTestDrive {//class선언
        public static void main(String [] args) {
                TapeDeck t = new TapeDeck();//TapeDeck 객체를 생성(추가된코드)
                t.canRecord = true;
                t.playTape();

                if ( t.canRecord == true ) {
                        t.recordTape();
                }
        }
}//class 끝

B



class DVDPlayer {//클래스 선언

        boolean canRecord = false;//bool형 변수 canRecord를 선언하고 false로 초기화

        void recordDVD (){
                System.out.println("DVD recording");
        }
        void playDVD () {//playDVD 메소드가 빠져있어서 추가함
                System.out.println("DVD playing");
        }
}//클래스 끝

class DVDPlayerTestDrive {//클래스 선언
        public static void main(String [] args) {

                DVDPlayer d = new DVDPlayer();//DVDPlayer 객체를 생성
                d.canRecord = true;
                d.playDVD();

                if ( d.canRecord == true) {
                        d.recordDVD();
                }
        }
}//클래스끝
             
}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수:
원시변수는 정수,부울,부동소수점 수와 같은 기초적인값이 들어갑니다.

객체 레퍼런수 변수에는 객체에 접근하는 방법을 나타내는 비트가 들어있습니다.
 

*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{
 
class Dog {//Dog 클래스 선언
        String name;
        public static void main (String [] args) {//메인메소드
        //Dog 객체를 만들고 접근합니다.
        Dog dog1 = new Dog();
        dog1.bark();
        dog1.name = "Bart";

        //Dog 배열을 만듭니다.
        Dog[] mydog = new Dog[10];
        int i=0;
        while(i<10){//Dog 배열에 Dog객체를 집어넣습니다.
                mydog[i] = new Dog();
                i+=1;
        }//이름을 정해줍니다.
        mydog[0].name = "Fred";
        mydog[1].name = "Marge";
        mydog[2].name = "Bart";
        mydog[4].name = "Ya";
        mydog[5].name = "Gibun";
        mydog[6].name = "Jo";
        mydog[7].name = "Ta";
        mydog[8].name = "hotdog";
        mydog[9].name = "Masi_ZZung";

        int j=0;
        while(j < mydog.length) {//전부 짖게 만든다?
                mydog[j].bark();
                j+=1;
        }

        }//메인메소드끝

        public void bark () {
                System.out.println(name + "이(가) 왈!하고 짖습니다.");
        }
}//Dog 클래스끝


}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A

class Books {//Books 클래스 선언
        String title;
        String author;
}

class BooksTestDrive {
        public static void main(String [] args) {
                Books [] myBooks = new Books[3];//Books 배열을선언
                int x = 0;
                myBooks[0] = new Books();//추가된 코드
                myBooks[1] = new Books();// Books객체를 생성
                myBooks[2] = new Books();
                myBooks[0].title = "The Grapes of Java";
                myBooks[1].title = "THe Java Gatsby";
                myBooks[2].title = "The Java Cookbook";

                myBooks[0].author = "bob";
                myBooks[1].author = "sue";
                myBooks[2].author = "ian";

                while(x<3) {
                        System.out.print(myBooks[x].title);
                        System.out.print(" by ");
                        System.out.println(myBooks[x].author);//한줄씩 띄어서 출력되도록 변경
                        x = x+1;
                }
        }
}

B

class Hobbits {

        String name;

        public static void main(String [] args) {

        Hobbits [] h = new Hobbits[4];
        int z= 0;

        while(z<4) {//hobbits 객체를 생성하고 name을 정하기위한  while문
                h[z] = new Hobbits();
                h[z].name = "bilbo";
                if(z == 1) {
                        h[z].name = "frodo";
                }
                if(z == 2) {
                        h[z].name = "sam";
                }
                if(z == 3) {
                        h[z].name = "wow";
                }

                System.out.print(h[z].name + " is a ");
                System.out.println("good Hobbit name");

                z = z+1;//while문이 제대로 동작하기위해서 위치를 옮깁니다.

                }
        }
}



}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?: 밥
 * 문제가 된 부분은 어딘가요?: 켄트는 refc를 계속 초기화함

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:
 * 게터와 세터:
 * 인스턴스 변수 vs 지역 변수:
 
*107p Dog* _실행_

{{{

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:
 * 다형성:

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}