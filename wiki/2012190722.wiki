#summary 본격 자바 실습 페이지 이제부턴 정말 자바뿐이야!!!
<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{


public class BeerSong { // 클래스 시작
   public static void main (String[] args) { // 메인메소드 
      int beerNum = 99; // beerNum에 99저장
      String word = "bottles"; // 복수형
      
      while (beerNum > 0) { // while문 시작

             if (beerNum == 1) {beernum이 1일때만 실행된다
               word = "bottle";   // 단수형(한 병인경우)
               }

      System.out.println(beerNum + " " + word + " of beer on the wall"); //출력
      System.out.println(beerNum + " " + word + " of beer.");
      System.out.println("Take one down.");
      System.out.println("Pass it around.");
      beerNum = beerNum - 1;

      if (beerNum > 0) {
           //System.out.println(beerNum + " " + word + " of beer on the wall");
          //
      } else {
           System.out.println("No more bottles of beer on the wall");
      } // else문 끝
    }//while 문 끝
   }// main 클래스 끝
} // 클래스 끝



}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{

public class PhraseOMatic{
 public static void main(String[]args){

//세 종류의 단어 목록을 만듭니다. 적당히 필요한 단어를 추가해도 됩니다.
  String[]wordListOne={"monotonic","corollary "};

  String[]wordListTwo={"jerk","secant"};

  String[]wordListThree={"perimeter","mnemonic"};

//각 단어 목록에 단어가 몇 개씩 들어있는지 확인합니다.
int oneLength=wordListOne.length;
int twoLength=wordListTwo.length;
int threeLength=wordListThree.length;

//난수 세 개를 발생시킵니다.
int rand1=(int) (Math.random()*oneLength);
int rand2=(int) (Math.random()*twoLength);
int rand3=(int) (Math.random()*threeLength);

//이제 구문을 만듭니다.
  String phrase=wordListOne[rand1]+""+wordListTwo[rand2]+""+wordListThree[rand3];

//구문을 출력합니다.
  System.out.println("What we need is a"+phrase);
 }
}


}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 바이트코드를 실행한다,바이트코드가 실행되기전 누군가 건드리지 않았는지 확인한다.


 * 컴파일러:자바로 작성된 코드를 바이트코드로 바꿔준다.

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A
class Exercise1b {

    public static void main(String [] args) {
        
        int x = 1;

        while ( x < 10 ) //while문을 빠져나갈수 없게 되있다.
         {
           if ( x > 3 )//if문 시작
           {
             system.out.println("big x");
             break;//break로 while문을 빠져나간다!!.
           }//if문 끝
           x = x+1;
          }//while문 끝
     }//메인 메소드끝
}클래스끝

B
small x 이 2번 출력되는 코드
class Exercise {//클래스 가 빠져있어서 추가!

    public static void main(String [] args) {

        int x = 5;

        while ( x > 1 ) {

          x = x - 1;
        
          if ( x < 3 ) {

            System.out.println("small x");

          }//if문 끝
        }//while문 끝
    }//메인 메소드끝
}클래스 끝

C
small x 가 2번 출력 되는 코드
class Exercise {

    public static void main(String [] args) {

      int x = 5;

      while ( x >1 ) {

        x = x-1 ;
       
        if ( x < 3 ) {

          System.out.println("small x");

        }//if문 끝

       }//while문 끝
    }//메인메소드 끝
}//클래스 끝
}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수:객체의 상태를 나타내는것
 * 메소드: 객체가 하는일
 * 클래스: 클래스를 이용해 객체를 생성
 * 테스트용 클래스:클래스를 테스트하기위해 만드는 클래스 
 

*68p Television* _채워넣기_

 * 인스턴스 변수: 채널, 음량,화면크기
 * 메소드:켜기,끄기,채널이동,음량조절


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{


public class GuessGame {
        Player p1;
        Player p2;
        Player p3;
        Player p4;

        public void startGame() {
          p1 = new Player();
          p2 = new Player();
          p3 = new Player();
          p4 = new Player();

          int guessp1 = 0;
          int guessp2 = 0;
          int guessp3 = 0;
          int guessp4 = 0;

          boolean p1isRight = false;
          boolean p2isRight = false;
          boolean p3isRight = false;
          boolean p4isRight = false;

          int targetNumber = (int) (Math.random()*10);
          System.out.println("0이상 9이하의 숫자를 맞춰보세요.");

          while(true) {
                System.out.println("맞춰야 할 숫자는 " + targetNumber + "입니다");

                p1.guess();
                p2.guess();
                p3.guess();
                p4.guess();

                guessp1 = p1.number;
                System.out.println("1번 선수가 찍은 숫자: " + guessp1);

                guessp2 = p2.number;
                System.out.println("2번 선수가 찍은 숫자: " + guessp2);

                guessp3 = p3.number;
                System.out.println("3번 선수가 찍은 숫자: " + guessp3);

                guessp4 = p4.number;
                System.out.println("4번 선수가 찍은 숫자: " + guessp4);
                
                if (guessp1 == targetNumber) {
                	p1isRight = true;
                }
                
                if (guessp2 == targetNumber) {
                	p2isRight = true;         
                }
                
                if (guessp3 == targetNumber) {
                	p3isRight = true;
                }

                if (guessp4 == targetNumber) {
                	p4isRight = true;
                }
                
                if (p1isRight || p2isRight || p3isRight || p4isRight) {
                	
                	System.out.println("맞춘 선수가 있습니다.");
                	System.out.println("1번선수: " +p1isRight);
                	System.out.println("2번선수: " +p2isRight);
                	System.out.println("3번선수: " +p3isRight);
                	System.out.println("4번선수: " +p4isRight);
                	System.out.println("게임 끝!");
                	break;
                }
                else {
                	System.out.println("다시 시도해야 합니다.");
                }
          }
        }
}



public class Player {
	int number = 0;
	
	public void guess() {
		number = (int) (Math.random()*10);
		System.out.println("찍은 숫자: " + number);
	}
}  




public class GameLauncher {
	public static void main(String[] args) {
		GuessGame game = new GuessGame();
		game.startGame();
	}
}
             
}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A

class TapeDeck {//class 선언

        boolean canRecord = false;//bool형 변수를 선언하고 false로 초기화

        void playTape () {
                System.out.println("tape playing");
        }

        void recordTape () {
                System.out.println("tape recording");
        }
}//class 끝     
class TapeDeckTestDrive {//class선언
        public static void main(String [] args) {
                TapeDeck t = new TapeDeck();//TapeDeck 객체를 생성(추가된코드)
                t.canRecord = true;
                t.playTape();

                if ( t.canRecord == true ) {
                        t.recordTape();
                }
        }
}//class 끝

B



class DVDPlayer {//클래스 선언

        boolean canRecord = false;//bool형 변수 canRecord를 선언하고 false로 초기화

        void recordDVD (){
                System.out.println("DVD recording");
        }
        void playDVD () {//playDVD 메소드가 빠져있어서 추가함
                System.out.println("DVD playing");
        }
}//클래스 끝

class DVDPlayerTestDrive {//클래스 선언
        public static void main(String [] args) {

                DVDPlayer d = new DVDPlayer();//DVDPlayer 객체를 생성
                d.canRecord = true;
                d.playDVD();

                if ( d.canRecord == true) {
                        d.recordDVD();
                }
        }
}//클래스끝
             
}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수:
원시변수는 정수,부울,부동소수점 수와 같은 기초적인값이 들어갑니다.

객체 레퍼런수 변수에는 객체에 접근하는 방법을 나타내는 비트가 들어있습니다.
 

*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{
 
class Dog {//Dog 클래스 선언
        String name;
        public static void main (String [] args) {//메인메소드
        //Dog 객체를 만들고 접근합니다.
        Dog dog1 = new Dog();
        dog1.bark();
        dog1.name = "Bart";

        //Dog 배열을 만듭니다.
        Dog[] mydog = new Dog[10];
        int i=0;
        while(i<10){//Dog 배열에 Dog객체를 집어넣습니다.
                mydog[i] = new Dog();
                i+=1;
        }//이름을 정해줍니다.
        mydog[0].name = "Fred";
        mydog[1].name = "Marge";
        mydog[2].name = "Bart";
        mydog[4].name = "Ya";
        mydog[5].name = "Gibun";
        mydog[6].name = "Jo";
        mydog[7].name = "Ta";
        mydog[8].name = "hotdog";
        mydog[9].name = "Masi_ZZung";

        int j=0;
        while(j < mydog.length) {//전부 짖게 만든다?
                mydog[j].bark();
                j+=1;
        }

        }//메인메소드끝

        public void bark () {
                System.out.println(name + "이(가) 왈!하고 짖습니다.");
        }
}//Dog 클래스끝


}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A

class Books {//Books 클래스 선언
        String title;
        String author;
}

class BooksTestDrive {
        public static void main(String [] args) {
                Books [] myBooks = new Books[3];//Books 배열을선언
                int x = 0;
                myBooks[0] = new Books();//추가된 코드
                myBooks[1] = new Books();// Books객체를 생성
                myBooks[2] = new Books();
                myBooks[0].title = "The Grapes of Java";
                myBooks[1].title = "THe Java Gatsby";
                myBooks[2].title = "The Java Cookbook";

                myBooks[0].author = "bob";
                myBooks[1].author = "sue";
                myBooks[2].author = "ian";

                while(x<3) {
                        System.out.print(myBooks[x].title);
                        System.out.print(" by ");
                        System.out.println(myBooks[x].author);//한줄씩 띄어서 출력되도록 변경
                        x = x+1;
                }
        }
}

B

class Hobbits {

        String name;

        public static void main(String [] args) {

        Hobbits [] h = new Hobbits[4];
        int z= 0;

        while(z<4) {//hobbits 객체를 생성하고 name을 정하기위한  while문
                h[z] = new Hobbits();
                h[z].name = "bilbo";
                if(z == 1) {
                        h[z].name = "frodo";
                }
                if(z == 2) {
                        h[z].name = "sam";
                }
                if(z == 3) {
                        h[z].name = "wow";
                }

                System.out.print(h[z].name + " is a ");
                System.out.println("good Hobbit name");

                z = z+1;//while문이 제대로 동작하기위해서 위치를 옮깁니다.

                }
        }
}



}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?: 밥
 * 문제가 된 부분은 어딘가요?: 켄트는 refc를 계속 초기화함

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화: 변수에 직접 접근하지 못하게함
 * 게터와 세터: private으로 선언된 변수에 간접적으로 접근하기위해 만든 메소드 
 * 인스턴스 변수 vs 지역 변수: 인스턴스 변수는 클래스 안에서 ,지역변수는 메소드안에서 선언됨
 
*107p Dog* _실행_

{{{

class Dog {
        int size;
        String name;

        void bark() {
                if (size >60) {
                        System.out.println("얍 얍얍!");
                }else if (size > 14) {
                        System.out.println("으르르르렁");
                }else {
                        System.out.println("으엏으헣");
                }
        }
}

class DogTestDrive {

        public static void main (String [] args) {
                Dog one = new Dog();
                one.size = 70;
                Dog two = new Dog();
                two.size = 8;
                Dog three = new Dog();
                three.size = 35;

                one.bark();
                two.bark();
                three.bark();
        }
}


}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

public class Clock {

        String name;
  
        void setTime(String t)//시간을설정
        {
                time = t;
        }
        
        String getTime()//시간에해당하는 값을 반환
        {
                return time;
        }

}

public class ClockTestDrive {

        public static void main() {
                
                Clock c = new Clock();
                c.setTime("1245");//시간설정
                String tod = c.getTime();//객체c에 저장된 시간에해당하는 값을 반환
                System.out.println("Time: " + tod);//출력
                
        }
}

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
 소프트웨어 개발 방법론중하나

익스트림 프로그래밍의 규칙
 
-조금씩하지만 자주 발표한다.

-사이클을 반복해서 돌리면서 개발한다.

-스펙에 없는것은 절대 집어넣지 않는다.

-테스트코드 를 먼저 만든다

-기회가 생기는 족족 언제 어디서든 코드를 개선한다.

-모든 테스트를 통과하기 전에는 어떤 것도 발표하지 않는다

-조금씩 발표하는 것을 기반으로 하여 현실적인 작업 계획을 만든다.

-모든 일을 단순하게 처리한다

*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{

public class SimpleDotCom 
{
        //적절히 초기화
        int[] locationCells;
        int numOfHits = 0;
        
        public void setLocationCells(int [] locs)
        {
                locationCells = locs;
        }
        
        public String checkYourself(String stringGuess)
        {
                int guess = Integer.parseInt(stringGuess);//적절한 캐스팅
                String result = "miss";//빗나감
                for(int i = 0 ;i < locationCells.length; i++)
                {
                        if(guess == locationCells[i])
                        {
                                result = "hit";//명중
                                numOfHits++;
                                break;//끗
                        }
                }

        
        if(numOfHits == locationCells.length)
        {
                result = "kill";//죽음
        }
        System.out.println(result);
        return result;

        }
}


public class SimpleDotComGame 
{

        public static void main(String[] args) 
        {
               //적절한 초기화를진행
                int numOfGuesses = 0;
                GameHelper helper = new GameHelper();
                
                SimpleDotCom theDotCom = new SimpleDotCom();
                int randomNum = (int) (Math.random() * 5);//난수를만듬
        
                int[] locations = {randomNum, randomNum + 1,randomNum + 2};
                theDotCom.setLocationCells(locations);
                boolean isAlive = true;
                
                while(isAlive == true)//죽을때까지 실행
                {
                        String guess = helper.getUserInput("enter a number");//입력
                        String result = theDotCom.checkYourself(guess);
                        numOfGuesses++;
                        
                        if(result.equals("kill"))
                        {
                                isAlive = false;//죽음
                                System.out.println(numOfGuesses + " guesses");//출력
                        }
                }
                
        }

}

import java.io.*;
public class GameHelper 
{
//입력을 받는 메소드
        public String getUserInput(String prompt)
        {
                String inputLine = null;
                System.out.println(prompt + " ");
                try
                {
                        BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
                        inputLine = is.readLine();
                        if(inputLine.length() == 0)
                                return null;
                        
                }
                catch (IOException e)
                {
                        System.out.println("IOException: " + e);
                        
                }
                return inputLine;
        }
}


}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{




import java.io.*;
//gameHelper클래스
class GameHelper { 

        public String getUserInput (String prompt){//입력을받음
                String inputLine = null;
                System.out.print(prompt + " ");

                try{
                        BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
                        inputLine = is.readLine();
                        if (inputLine.length() == 0) return null;
                } catch(IOException e){
                        System.out.println("IOException: " + e);
                }

                return inputLine;
        }

}
//SimpleDotComTestDrive 클래스
public class SimpleDotComTestDrive { 

        public static void main(String[] args){


                int numOfGuesses=0;

                GameHelper helper = new GameHelper();

                SimpleDotCom theDotCom = new SimpleDotCom();

                int randomNum = (int) (Math.random() * 5);//난수생성

                int[] locations = {randomNum, randomNum+1, randomNum+2};//위치지정

                boolean[] hitCells = new boolean[3];
                theDotCom.sethitCells(hitCells);

                theDotCom.setLocationCells(locations);

                boolean isAlive = true;

                while(isAlive == true){//죽을때까지 반복
                        String guess = helper.getUserInput("enter a number");
                        String result = theDotCom.checkYourself(guess);
                        numOfGuesses++;
                        if(result.equals("kill")){
                                isAlive = false;//죽음
                                System.out.println(numOfGuesses + "guesses");
                        }

                }
        }

}


class SimpleDotCom { // SimpleDotCom클래스

        int[] locationCells;
        boolean[] hitCells = new boolean[3];

        int numOfHits = 0;

        public void setLocationCells(int[] locs)
       {

                locationCells = locs;
        }

        public void sethitCells(boolean[] check)
        { 
                hitCells = check;
        }


        public String checkYourself(String stringGuess){

                int guess = Integer.parseInt(stringGuess);

                String result = "miss";

                for(int i = 0; i < locationCells.length; i++){

                        if(guess == locationCells[i] && hitCells[i]!=true){ //확인
                                result = "hit";
                                numOfHits++;
                                hitCells[i] = true; .
                                break;

                        }

                }

                if (numOfHits == locationCells.length){
                        result = "kill";
                }

                System.out.println(result);
                return result;

        }

}



}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

public class SimpleDotCom 
{
        int[] locationCells;
        int numOfHits = 0;
        
        public void setLocationCells(int [] locs)//위치지정
        {
                locationCells = locs;
        }
        
        public String checkYourself(String stringGuess)//확인
        {
                int guess = Integer.parseInt(stringGuess);
                String result = "miss";
                for(int i = 0 ;i < locationCells.length; i++)
                {
                        if(guess == -1)//-1입력시 빠져나감
                                break;
                        else if(guess == locationCells[i])
                        {
                                result = "hit";
                                locationCells[i] = -1;
                                numOfHits++;
                                break;
                        }
                }

        
        if(numOfHits == locationCells.length)
        {
                result = "kill";
        }
        System.out.println(result);
        return result;

        }
}

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{
//String대신 ArrayList를사용
public class DotCom 
{
        private ArrayList<String> locationCells;
        
        public void setLocationCells(ArrayList<String> loc)
        {
                locationCells = loc;
        }
        
        public String checkYourself(String userInput)
        {
                String result = "miss";
                
                int index = locationCells.indexOf(userInput);

                if(index >= 0)//인덱스가 0 이상이면
                {
                        locationCells.remove(index);//삭제함
                
                        if(locationCells.isEmpty())//비어있으면 
                                retult = "kill";        
                        else
                                result = "hit";
                }
                
                return result;
        }
}


}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:* 한 클래스가 다른 클래스를 상속할때, 상속받는 클래스가 상위 클래스 상속하는 클래스를 하위 클래스 라고한다. 하위클래스에서는 상위클래스의 인스턴스변수 메소드 등을 물려받는다. 자바에서는 하위클래스가 상위클래스를 확장한다고 이야기합니다. 

* 다형성:*  상위클래스를 가리키는 레퍼런스 변수를 사용하면 상위클래스를 상속하는 여러가지 클래스들을 하나의 레퍼런스변수로 전부 가리키는것이가능

*208p 클래스 계층 구조* _클래스로 구현_

{{{


class Animal
{
        String picture;
        Boolean food;
        int hunger;
        float boundaries;
        float location;

        void makeNoise()
        {
                //소리내는 메소드
        }

        void eat()
        {
                //먹는 메소드
        }

        void sleep()
        {
                //자는 메소드
        }

        void roam()
        {
                //돌아다닐때 메소드
        }

}
class Feline extends Animal//Feline은 Animal을 상속한다
{
        void roam()
        {
              
        }
}

class Canine extends Animal//Canine은 Animal을 상속한다.
{
        void roam()
        {
              
        }
}

class Lion extends Feline//Lion은 Feline을 상속한다.
{
        void makeNoise()
        {
                
        }

        void eat()
        {
                
        }
}

class Tiger extends Feline//Tiger는 Feline를 상속한다
{
        void makeNoise()
        {
                
        }

        void eat()
        {
                
        }
}



class Cat extends Feline//Cat은 Feline을 상속한다.
{
        void makeNoise()
        {
                
        }

        void eat()
        {
                
        }
}

class Hiippo extends Animal//Hippo는 Animal을 상속한다
{
        void makeNoise()
        {
               
        }

        void eat()
        {
           
        }
}

class Wolf extends Canine//Wolf는 Canine를  상속한다.
{
        void makeNoise()
        {
                
        }

        void eat()
        {
              
        }
}

class Dog extends Canine//Dog는 Canine를 상속한다.
{
        void makeNoise()
        {
                
        }

        void eat()
        {
            
        }
}



}}}
 
*224p 오버라이드와 오버로딩* _요약_

*오버라이드: *상속받은 클래스에서 상위클래스의 메소드를 다시정의하는것을 오버라이드라고한다.전달받는 인자는 같아야하며 접근제어는 더제한적으로 정의할수는 없다. ex)상위클래스에서 public로 정의된 메소드를 하위클래스에서 private으로 오버라이드할수는없다.

*오버로딩:* 메소드의 이름이 같고 전달받는인자가 다른 메소드를 만드는것. 리턴 타입이 달라도된다.               접근제어를 바꿀수는없다.

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
1번

public class MonsterTestDrive
{
        public static void main(String[] args)
        {
                Monster[] ma = new Monster[3];//Monster객체 배열을 생성

                ma[0] = new Vampire();
                ma[1] = new Dragon();
                ma[2] = new Monster();

                for(int x = 0; x < 3; x++)
                {
                        ma[x].frighten(x);//순차적으로 접근하면서 frighten 메소드 호출
                }
        }
}

class Monster
{
        boolean frighten(int d)
        {
                System.out.println("arrrgh");
                return true;
        }
}

class Vampire extends Monster//Vampire는 Monster을 상속
{
        boolean frighten(int x)//메소드를 오버라이드
        {
                System.out.println("a bite?");
                return false;
        }
}

class Dragon extends Monster//Dragon은 Monster을 상속
{
        boolean frighten(int degree)
        {
                System.out.println("breath fire");
                return true;
        }
}


}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스: 추상클래스, 인터페이스를 이용해서 표준을 정할수있다.
 * 다형성: 상위클래스를 가리키는 레퍼런스 변수를 사용하면 상위클래스를 상속하는 여러가지 클래스들을 하나의 레퍼런스변수로 전부 가리키는것이가능
 * 추상 클래스: 상속을위한 클래스 직접 추상클래스를 생성할수없다
 * 추상 메소드: 추상클래스에서 정의되는 추상메소드. 반드시 하위클래스에의해서 상속되어야한다.
 * 다중 상속: 클래스와 인터페이스를 각각 상속해서 다중상속의 효과를 내는방법

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수: 객체는 힙에 생성됨
 * 스택에서의 변수:메소드가 호출되고 거기서 쓰이는 지역변수가 스택에 생성
 * 생성자: 객체의 생성과 동시에 실행되는 메소드
 * 널 레퍼런스: 아무것도 가리키지않는 레퍼런스
 
*298p 집중토론* _요약_

 * 인스턴스 변수: 객체 내부의 변수
 * 지역 변수: 메소드 내부의변수

*302p 5분 미스터리* _구현후 주석달기_

{{{

import java.util.*;

class V2Radiator
{
        V2Radiator(ArrayList<SimUnit> list)//생성자를 이용해서 add 메소드사용
        {
                for(int x = 5; x < 5 ; x++)
                {
                        list.add(new SimUnit("V2Radiator"));
                }
        }
}

class V3Radiator //extends V2Radiator
{
        V3Radiator(ArrayList<SimUnit> lglist)//생성자를 이용해서 add메소드호출
        {
                //super(lglist); 
                for(int g = 0; g < 10 ; g++)
                {
                        lglist.add(new SimUnit("V3Radiator"));
                }
        }
}

class RetentionBot
{
        RetentionBot(ArrayList<SimUnit> rlist)//생성자를 이용해서 add메소드호출
        {
                rlist.add(new SimUnit("Rention"));
        }
}

public class TestLifeSupportSim 
{
        public static void main(String[] args)
        {
                ArrayList<SimUnit> aList = new ArrayList<SimUnit>();
                V2Radiator v2 = new V2Radiator(aList);
                V3Radiator v3 = new V3Radiator(aList);
                for(int z = 0 ; z < 20 ; z++)
                {
                        RetentionBot ret = new RetentionBot(aList);//객체가생성되면서 생성자안에 있는 내용이 실행됨
                }
        }
}

class SimUnit
{
        String botType;
        SimUnit(String type)
        {
                botType = type;
        }
        int powerUse()
        {
                if("Retention".equals(botType))
                {
                        return 2;                       
                }
                else
                {
                        return 4;
                }
        }
}


}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드: 객체의 생성없이도 사용이가능하다.
 * 정적 메소드를 선언하는 방법: static를 붙이면됨
 * static final: 상수로 선언하는것
 * 널 레퍼런스: 아무것도 가리키지 않는 레퍼런스
 * 오토 박싱: 원래 자료형을 코드의 문법에 따라 자동으로 래퍼클래스로 변환하는것
 * 정적 임포트: 정적 클래스, 정적 변수, enum값 등을 사용할 때 정적 임포트를 활용해서 타이핑을 더 적게 해보자는 것이다.


*339p Calendar* _구현후 주석달기_

{{{

import java.util.*;
public class Calenderuse
{
        public static void main(String[] args)
        {
                Calender c = Calender.getInstance();
                c.set(2004,0,7,15,40);//시각을 2004년 1월 7일 15:40 으로 설정
                long day1 = c.getTimeInMillis();//1970년 1월1일부터 경과한 시간을 밀리초 단위로 표현한 값을 리턴
                day1 += 1000 * 60 * 60;//1시간에 해당하는 밀리초
                c.setTimeInMillis(day1);//한 시간에 해당하는 밀리초 만큼의 시간을 더하고 시각을 갱신합니다.
                System.out.println("new hour" + c.get(c.HOUR_OF_DAY));
                c.add(c.DATE, 35);//35일을 더하기
                System.out.println("add 35 days " + c.getTime());
                c.roll(c.DATE, 35);//35일 뒤로 
                System.out.println("roll 35 days " + c.getTime());
                c.set(c.DATE, 1);//날짜를 1로 설정합니다.
                System.out.println("set to 1 " + c.getTime());
                
        
        }
}


}}}

*342p 집중토론* _요약_

 * 인스턴스 변수: 각각의 인스턴스마다 가지고있는 변수
 * 지역 변수: 메소드 내에서 쓰이는 변수

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

class StaticSuper
{
        static
        {
                System.out.println("super static blokc");
        }
        
        StaticSuper()//생성자
        {
                System.out.println("super constructor");
        }
}

public class StaticTests extends StaticSuper//StaticTests 는 StaticSuper을 상속
{
        static int rand;
        
        static
        {
                rand = (int) (Math.random() * 6);
                System.out.println("static block " + rand);
        }
        
        StaticTests()//생성자
        {
                System.out.println("in main");
                StaticTests st = new StaticTests();//StaticTests 객체를 생성합니다.
        }
}

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

public class Test
{

        public static void main()
        {
                
        
        public void takeRisk() throws BadException
        {
                if(abandonAllHope)
                {
                        throw new BadException();
                }
        }
        
        public void crossFingers()
        {
                try
                {
                        anObject.takeRisk();    //예외가 발생하는부분
                }
                catch(BadException ex)
                {
                        System.out.println("Aaargh!");//예외를 처리하는부분.
                        ex.printStackTrace();
                }
        }
        
        }
}



}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

import javax.sound.midi.*;

public class MiniMiniMusicApp
{
        public static void main(String[] args)
        {
                MiniMiniMusicApp mini = new MiniMiniMusicApp();
                mini.play();//play 메소드 호출
        }
        
        public void play()//play 메소드
        {
                try
                {
                        Sequencer player = MidiSystem.getSequencer();//Sequencer를 얻음
                        player.open();//Sequencer를 연다
                        
                        Sequence seq = new Sequence(Sequence.PPQ, 4);
                        
                        
                        Track track = seq.createTrack();//Track를 생성
                        
                        ShortMessage a = new ShortMessage();
                        a.setMessage(144, 1, 44, 100);
                        MidiEvent noteOn = new MidiEvent(a, 1);
                        track.add(noteOn);
                        
                        ShortMessage b = new ShortMessage();
                        b.setMessage(128, 1, 44, 100);
                        MidiEvent noteOff = new MidiEvent(b, 16);
                        track.add(noteOff);
                        
                 
                      
              
                        
                        player.setSequence(seq);//Sequencer에 Sequence를 보냅니다.
                        
                        player.start();//Sequencer의 start()메소드를 호출.
                        
                }
                catch(Exception ex)
                {
                        ex.printStackTrace();
                        
                }
                
        }
}

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{


import javax.sound.midi.*;

public class MiniMusicCmdLine { 

        public static void main(String[]args){
                MiniMusicCmdLine mini = new MiniMusicCmdLine();//MiniMusicCmdLine 생성
                if(args.length<2){
                        System.out.println("악기와 음 높이를 지정하는 인자를 입력하세요.");
                }else{
                        int instrument = Integer.parseInt(args[0]);
                        int note = Integer.parseInt(args[1]);
                        mini.play(instrument, note);//인자를 전달하면서 play메소드호출
                }
        } 

         
        public void play (int instrument, int note){//play메소드
                try{
                        Sequencer player = MidiSystem.getSequencer();
                        player.open();
                        Sequence seq = new Sequence(Sequence.PPQ, 4);
                        Track track = seq.createTrack();

                        MidiEvent event = null;

                        ShortMessage first = new ShortMessage();
                        first.setMessage(192,1,instrument,0);
                        MidiEvent changeInstrument = new MidiEvent(first, 1);
                        track.add(changeInstrument);

                        ShortMessage a = new ShortMessage();
                        a.setMessage(144,1,note,100);
                        MidiEvent noteOn = new MidiEvent(a,1);
                        track.add(noteOn);

                        ShortMessage b = new ShortMessage();
                        a.setMessage(128,1,note,100);
                        MidiEvent noteOff = new MidiEvent(b,16);
                        track.add(noteOff);
                        player.setSequence(seq);
                        player.start();
                }catch(Exception ex){ex.printStackTrace();}
        } 
} 


}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

import javax.swing.*;

public class SimpleGui1{
        public static void main(String []args){
                JFrame frame = new JFrame(); // JFrame 생성
                JButton button = new JButton("click me");  //JButton 생성

                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // X버튼을 누르면 창이 종료된다.
                frame.getContentPane().add(button); // 버튼을 추가

                frame.setSize(300,300); // 프레임의 크기설정

                frame.setVisible(true); // 프레임이 보이게된다.
        }
}


}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

import javax.swing.*;
import java.awt.event.*; // Actionlistener와 이벤트가 들어있는 패키지를 사용

public class SimpleGui1B implements ActionListener {
        JButton button; // 버튼을 생성합니다. 

        public static void main(String []args){
                SimpleGui1B gui=new SimpleGui1B();
                gui.go();

        }

        public void go(){
                JFrame frame= new JFrame();//JFrame생성
                button=new JButton("cliick me"); // JButton생성

                button.addActionListener(this); // 버튼에 ActionListener추가

                frame.getContentPane().add(button);//프레임에 버튼추가
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);// x누르면 꺼지게 함
                frame.setSize(300,300);//프레임크기설정
                frame.setVisible(true);//프레임이 보이게함
        }
        public void actionPerformed(ActionEvent event){ // 버튼에 action이 실행될때 실행되는 메소드
                button.setText("I've been clicked!");
        }
}


}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{


import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class SimpleGui3C implements ActionListener {
        
        JFrame frame;
        
        public static void main(String[] args) {
                SimpleGui3C gui = new SimpleGui3C();
                gui.go();//go 메소드 호출
        }

        public void go() {
                frame = new JFrame();//JFrame 생성
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//X버튼 누르면 종료
                
                JButton button = new JButton("Change colors");//JButton 생성
                button.addActionListener(this);//버튼에 ActionListener를 추가
                
                MyDrawPanel drawPanel = new MyDrawPanel();//JPanel 생성
                
                frame.getContentPane().add(BorderLayout.SOUTH,button);//버튼을 추가
                frame.getContentPane().add(BorderLayout.CENTER,drawPanel);//프레임에 패널을 추가
                frame.setSize(300,300);//프레임 크기 설정
                frame.setVisible(true);//프레임이 보이게함
        }
        public void actionPerformed(ActionEvent event) {// 액션이 일어나면 실행되는코드
                frame.repaint();
        }
}

class MyDrawPanel extends JPanel
{
        public void paintComponent(Graphics g)
        {
                Graphics2D g2d = (Graphics2D) g;
                
                int red = (int) (Math.random() * 256);
                int green = (int) (Math.random() * 256);
                int blue = (int) (Math.random() * 256);
                //RGB값 설정
                
                Color startColor = new Color(red,green,blue);//시작 컬러설정
                
                red = (int) (Math.random() * 256);
                green = (int) (Math.random() * 256);
                blue = (int) (Math.random() * 256);
                //RGB값 설정
                
                Color endColor = new Color(red,green,blue);//마지막 컬러
                
                GradientPaint gradient = new GradientPaint(70,70,startColor,150,150,endColor);
                g2d.setPaint(gradient);
                g2d.fillOval(70,70,100,100);
        }
}


}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{


import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class TwoButtons {

        JFrame frame; 
        JLabel label; 

        public static void main(String args[]){
                TwoButtons gui = new TwoButtons();
                gui.go();
        }

        public void go(){
                frame=new JFrame();
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);


                JButton labelButton = new JButton ("Change Label");//JButton생성
         
                labelButton.addActionListener(new LabelListener());//버튼에 ActionListener추가

                JButton colorButton = new JButton ("Change Circle");//JButton생성
              
                colorButton.addActionListener(new ColorListener());//버튼에 ActionListener추가

                label = new JLabel("I'm a lebel");//JLabel생성
                MyDrawPanel drawPanel = new MyDrawPanel();

                // 프레임에 버튼,패널,레이블을 추가
                frame.getContentPane().add(BorderLayout.SOUTH, colorButton);
                frame.getContentPane().add(BorderLayout.CENTER, drawPanel);
                frame.getContentPane().add(BorderLayout.EAST, labelButton);
                frame.getContentPane().add(BorderLayout.WEST, label);

                frame.setSize(300,300);//프레임크기설정
                frame.setVisible(true);//프레임이 보이게함
        }

        class LabelListener implements ActionListener{
                public void actionPerformed(ActionEvent event){
                        label.setText("Ouch!"); 
                }
        } 

        class ColorListener implements ActionListener{
                public void actionPerformed(ActionEvent event){
                        frame.repaint(); 
                }
        } 
}


}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

import javax.swing.*;
import java.awt.*;

public class SimpleAnimation 
{

        int x=70;
        int y=70;    
        public static void main(String args[]){
                SimpleAnimation gui=new SimpleAnimation();
                gui.go();
        }
        
        public void go()
        {
                JFrame frame=new JFrame();//JFrame생성
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//x를 누르면 꺼짐

                MyDrawPanel drawPanel = new MyDrawPanel();

                frame.getContentPane().add(drawPanel);//프레임에 패널추가
                frame.setSize(300,300);//프레임크기설정
                frame.setVisible(true);//프레임이보이게함

                for(int i=0;i<300;i++){ // 반복

                        x++;
                        y++;
                        
                        drawPanel.repaint(); 

                        try{
                                Thread.sleep(50); 
                        }catch(Exception ex)
                         {

                          }
                }

        } 

       
         class MyDrawPanel extends JPanel
        {
                public void paintComponent(Graphics g)
                {
                        g.setColor(Color.white);
                        g.fillRect(0,0,this.getWidth(),this.getHeight());//하얀색으로 색칠함

                        g.setColor(Color.green);
                        g.fillOval(x, y, 40, 40); //초록색으로 색칠

                }
        } 
} 


}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{


import javax.sound.midi.*;
import javax.swing.*;
import java.awt.*;

public class MiniMusicPlayer3 
{

        static JFrame f = new JFrame("My First Music Video");//JFrame 생성
        static MyDrawPanel m1;

        public static void main(String [] args)
        {
                MiniMusicPlayer3 mini = new MiniMusicPlayer3();
                mini.go();
        }

        public void setUpGui()
        {
                m1 = new MyDrawPanel();//패널 생성
                f.setContentPane(m1);//프레임에 패널추가
                f.setBounds(30, 30, 300, 300);//프레임 크기설정
                f.setVisible(true);//프레임이 보이게한다
        }

        public void go()
        {
                setUpGui();//gui기본설정
          
                try{//음악틀기

                        Sequencer sequencer = MidiSystem.getSequencer();
                        sequencer.open();
                        sequencer.addControllerEventListener(m1, new int[] {127});
                        Sequence seq = new Sequence(Sequence.PPQ, 4);
                        Track track = seq.createTrack();

                        int r = 0; 
                        for(int i = 0; i < 60 ; i+=4)
                        {

                                r=(int)((Math.random()*50)+1);
                                track.add(makeEvent(144,1,r,100,i));
                                track.add(makeEvent(176,1,127,0,i));
                                track.add(makeEvent(128,1,r,100,i+2));
                        }

                        sequencer.setSequence(seq);
                        sequencer.start();
                        sequencer.setTempoInBPM(120);
                } 
                
                catch(Exception ex) 
                {
                        ex.printStackTrace();
                }
        }

        public MidiEvent makeEvent(int comd, int chan, int one, int two, int tick)
        {
                MidiEvent event = null;
               
                try{
                        ShortMessage a = new ShortMessage();
                        a. setMessage(comd,chan,one,two);
                        event = new MidiEvent(a, tick);
                }
                catch(Exception e)
                {
                        
                }
                
                return event;

        }

    
        class MyDrawPanel extends JPanel implements ControllerEventListener
        {
                boolean msg = false;

                public void controlChange(ShortMessage event)
                {
                        msg = true;
                        repaint();//색 설정
                }

                public void paintComponent(Graphics g)
                {
                        if(msg)
                        {

                                @SuppressWarnings("unused")
                                                                Graphics2D g2= (Graphics2D)g;

                                int r = (int) (Math.random()*250);
                                int gr=(int) (Math.random()*250);
                                int b= (int ) (Math.random()*250);

                                g.setColor(new Color(r,gr,b));

                                int ht=(int) ((Math.random()*120)+10);
                                int width=(int) ((Math.random()*120)+10);

                                int x=(int) ((Math.random()*40)+10);
                                int y=(int) ((Math.random()*40)+10);

                                g.fillRect(x, y, ht, width);
                                msg = false;
                        }
                }
        }
}



}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{


import java.awt.*;
import javax.swing.*;
import javax.sound.midi.*;
import java.util.*;
import java.awt.event.*;

public class BeatBox
{

    JPanel mainPanel;
    ArrayList<JCheckBox> checkboxList; //ArrayList 생성
    Sequencer sequencer;
    Sequence sequence;
    Track track;
    JFrame theFrame;

    String[] instrumentNames = {"Bass Drum", "Closed Hi-Hat", 
       "Open Hi-Hat","Acoustic Snare", "Crash Cymbal", "Hand Clap", 
       "High Tom", "Hi Bongo", "Maracas", "Whistle", "Low Conga", 
       "Cowbell", "Vibraslap", "Low-mid Tom", "High Agogo", 
       "Open Hi Conga"}; 
    // 악기명 정보 초기화
    
    int[] instruments = {35,42,46,38,49,39,50,60,70,72,64,56,58,47,67,63};             

    public static void main (String[] args) 
    {
        new BeatBox().buildGUI();//Gui를 구축
    }
  
    public void buildGUI() 
    {
        theFrame = new JFrame("Cyber BeatBox");//JFrame생성
        theFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//x누르면 꺼짐
        BorderLayout layout = new BorderLayout();//Layout설정
        JPanel background = new JPanel(layout);//JPanel생성

        background.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));//배치

        checkboxList = new ArrayList<JCheckBox>();
        Box buttonBox = new Box(BoxLayout.Y_AXIS);

        JButton start = new JButton("Start");//Start버튼 생성
        start.addActionListener(new MyStartListener());//Start버튼에 액션리스너 추가
        buttonBox.add(start);         
          
        JButton stop = new JButton("Stop");//Stop버튼 생성
        stop.addActionListener(new MyStopListener());//Stop버튼에 액션리스너 추가
        buttonBox.add(stop);

        JButton upTempo = new JButton("Tempo Up");//Tempo Up 버튼추가
        upTempo.addActionListener(new MyUpTempoListener());//Tempo UP버튼에 액션리스너추가
        buttonBox.add(upTempo);

        JButton downTempo = new JButton("Tempo Down");//Tempo Up 버튼추가
        downTempo.addActionListener(new MyDownTempoListener());//Tempo Up버튼에 액션리스너추가 buttonBox.add(downTempo);

        Box nameBox = new Box(BoxLayout.Y_AXIS);
        
        for (int i = 0; i < 16; i++) 
        {
           nameBox.add(new Label(instrumentNames[i]));
        }
        
        background.add(BorderLayout.EAST, buttonBox);
        background.add(BorderLayout.WEST, nameBox);

        theFrame.getContentPane().add(background);
          
        GridLayout grid = new GridLayout(16,16);
        
        grid.setVgap(1);
        grid.setHgap(2);
        
        mainPanel = new JPanel(grid);
        
        background.add(BorderLayout.CENTER, mainPanel);

        for (int i = 0; i < 256; i++)
        {                    
            JCheckBox c = new JCheckBox();
            c.setSelected(false);
            checkboxList.add(c);
            mainPanel.add(c);            
        }

        setUpMidi();

        theFrame.setBounds(50,50,300,300);//프레임 크기 설정
        theFrame.pack();
        theFrame.setVisible(true);
        
    }
    
   //음악관련된 코드
    public void setUpMidi()
    {
      try 
      {
        sequencer = MidiSystem.getSequencer();
        sequencer.open();
        sequence = new Sequence(Sequence.PPQ,4);
        track = sequence.createTrack();
        sequencer.setTempoInBPM(120);
        
      } 
      catch(Exception e) 
      {
          e.printStackTrace();
      }
    } 

    public void buildTrackAndStart()
    {
     
        int[] trackList = null; 
    
        sequence.deleteTrack(track);
        track = sequence.createTrack();//새트랙 생성

                for (int i = 0; i < 16; i++) { 
                  trackList = new int[16];
         
                  int key = instruments[i];//건반 번호 설정   
        
                  for (int j = 0; j < 16; j++ ) 
                  {         
                      JCheckBox jc = (JCheckBox) checkboxList.get(j + (16*i));
                     
                      if ( jc.isSelected()) 
                      { 
                         trackList[j] = key;
                      } 
                      else 
                      { 
                         trackList[j] = 0;
                      }   
                     
                      
                   } 
                 
                   makeTracks(trackList); 
                   track.add(makeEvent(176,1,127,0,16));  
                   
               } 
        
               track.add(makeEvent(192,9,1,0,15));
               
               try {
                   sequencer.setSequence(sequence); 
                     sequencer.setLoopCount(sequencer.LOOP_CONTINUOUSLY); //반복횟수지정
                   sequencer.start();
                   sequencer.setTempoInBPM(120);
               } 
               catch(Exception e) 
               {
                   e.printStackTrace();
               } 
               
               
    } 
            
           
    public class MyStartListener implements ActionListener 
    {
        public void actionPerformed(ActionEvent a) 
        {
            buildTrackAndStart();
        }
    } 

    public class MyStopListener implements ActionListener 
    {
        public void actionPerformed(ActionEvent a) 
        {
            sequencer.stop();//시퀀서를 멈춤
        }
    } 

    public class MyUpTempoListener implements ActionListener 
    {
        public void actionPerformed(ActionEvent a) 
        {
              float tempoFactor = sequencer.getTempoFactor(); 
            sequencer.setTempoFactor((float)(tempoFactor * 1.03)); //속도증가
        }
     } 

     public class MyDownTempoListener implements ActionListener 
     {
         public void actionPerformed(ActionEvent a)
         {
              float tempoFactor = sequencer.getTempoFactor();
            sequencer.setTempoFactor((float)(tempoFactor * .97)); // 속도감소
        }
    } 

    public void makeTracks(int[] list)
    {        
       
       for (int i = 0; i < 16; i++) 
       {
          int key = list[i];

          if (key != 0) 
          {
             track.add(makeEvent(144,9,key, 100, i));
             track.add(makeEvent(128,9,key, 100, i+1));
             //NOTE ON과 NOTE OFF 이벤트를 만들고 트랙에 추가합니다.
          }
       }
    }
        
    public  MidiEvent makeEvent(int comd, int chan, int one, int two, int tick)
    {
        MidiEvent event = null;
        
        try 
        {
            ShortMessage a = new ShortMessage();
            a.setMessage(comd, chan, one, two);
            event = new MidiEvent(a, tick);

        } 
        catch(Exception e) 
        {
                e.printStackTrace(); 
        }
        return event;
    }

} 


}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

import java.awt.*;
import javax.swing.*;
import javax.sound.midi.*;
import java.util.*;
import java.awt.event.*;
import java.io.*;

public class BeatBox 
{

    //위와 중복되는 코드는 생략
     public void buildGui()
     {

        JButton save = new JButton("save");
        serial.addActionListener(new SaveListener());
        buttonBox.add(save);
        
        
        JButton read = new JButton("read");
        restore.addActionListener(new ReadListener());
        buttonBox.add(read);
        
      } 
    public class SaveListener implements ActionListener
    {
        
        public void actionPerformed(ActionEvent e)
        {
                boolean[] checkboxState = new boolean[256];//프로그램의 현재상태를 저장하기위한 객체생성
                
                for(int i = 0; i < 256; i++)
                {
                        JCheckBox check = (JCheckBox) checkboxList.get(i);
                        if(check.isSelected())
                        {
                                checkboxState[i] = true;
                        }
                }
        
                try
                {//외부에 파일형태로저장
                        ObjectOutputStream os = new ObjectOutputStream(new FileOutputStream(new File("Checkbox.ser")));
                        os.writeObject(checkboxState);
                        os.close();
                }
                catch(IOException ex)
                {
                  return;
                }

        }
   }

    public class ReadListener implements ActionListener
    {


        public void actionPerformed(ActionEvent e)
        {
                boolean[] checkboxState = null;
                
                try
                {
                        ObjectInputStream is = new ObjectInputStream( new FileInputStream(new File("Checkbox.ser")));
                        checkboxState = (boolean[]) is.readObject();
                        is.close();
                }
                catch(IOException ex)
                {
                        return;
                }
                catch(ClassNotFoundException ex)
                {
                         return;
                }
               //외부의 파일로부터 만들어진 checkboxState 를 이용해서 복구
                for(int i = 0 ; i < 256; i ++)
                {
                        JCheckBox check = (JCheckBox) checkboxList.get(i);
                        if(checkboxState[i])
                                check.setSelected(true);
                        else
                                check.setSelected(false);
                }
                
           
                sequencer.stop();
                buildTrackAndStart();

                
        }
        
    }

}


}}}