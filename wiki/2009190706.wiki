#summary 수업중 실습하는 내용을 올리게 되는 실습페이지입니다. 페이지의 내용은 각 학생에 의해서 관리됩니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{
책의 내용처럼 작성하면
다음과 같이

1 bottles of beer on the wall
1 bottle of beer on the wall

1이 단수임에도 불구하고 복수처럼 bottles로 표현되는걸 알 수 있습니다.

위와같은 문제가 발생하는 이유는 

if (beerNum==1){ 
	word = "bottle"; 
			}
이 beerNum = beerNum -1;보다 위에 있기 때문에 발생합니다.
즉, beerNum이 2일때 beerNum = beerNum -1; 구문을 지나면서 beerNum이
1이 되지만 word는 아직 변하지 않았기 때문에 문제가 발생하게 됩니다.
그러므로 다음과 같이 if문을 beerNum = beerNum-1; 밑으로 내려 beerNum이
1이 되자마자 bottle로 바꿔주게 함으로써 문제가 해결됩니다.

public class BeerSong{ 

public static void main (String[] args){ 

	int beerNum = 99;

	String word = "bottles"; 

	while(beerNum > 0){ 
		
         /*      if (beerNum==1){ 
			word = "bottle"; 
				} 이부분이 문제가 되므로 없애고 */

System.out.println(beerNum + " " + word + " of beer on the wall");
System.out.println(beerNum + " " + word + " of beer.");
System.out.println("Take one down.");
System.out.println("Pass it around.");
	        beerNum = beerNum -1;
		
		if (beerNum==1){ 
			word = "bottle"; 
				} 
//여기에 추가합니다
		
		if(beerNum > 0){ 
System.out.println(beerNum + " " + word + " of beer on the wall");
		} 
		else{ 
System.out.println("No more bottles of beer on the wall"); 
		} 

	} 
}

} 








}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{

public class PhraseOMatic {
	public static void main (String[] args){
		
		String[] wordListOne = {"ellegarden","sum41","muse","wiretrap in my ear"};
		String[] wordListTwo = {"enjoy","play","perform"};
		String[] wordListThree = {"Rock","music","guitar","drum"};
		
		int oneLength = wordListOne.length;
		int twoLength = wordListTwo.length;
		int threeLength = wordListThree.length;
		
		int rand1 = (int) (Math.random() * oneLength);
		int rand2 = (int) (Math.random() * twoLength);
		int rand3 = (int) (Math.random() * threeLength);
	
		String phrase = wordListOne[rand1] + " " + wordListTwo[rand2] + " " + wordListThree[rand3];
		System.out.println("What we need is a " + phrase);
	
	
	}
	
	
	
	
}


}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 프로그램을 실행, ClassCast Exception을 발생시켜 다른 유형의 값이 들어오는것을 방지, 보안 관련 작업 수행, 바이트코드가 만들어진 다음 바이트코드가 실행되기 전까지 수정되었는지를 확인
 * 컴파일러: 바이트코트로 소스를 변환시켜 실행 속도를 빠르게 함, 실행시 일어나서는 안 될 대부분의 오류를 막음, 비공개 메소드와 변경되서는 안 될 핵심적인 클랙스에 접근 하는것을 방지

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

A

class Exercise1b {
   public static void main(String [] arg) {
    int x=1;
    while (x<10) {
      if (x >3) {
         System.out.println("bix x");
      }
     x= x+1; // x의 값이 변하지 않아 while문을 벗어날 수 없으므로 프로그램이 종료되지 않고 무한 반복 됩니다. 그렇기에 while문을 한번 돌 때마다 x의 값을 증가시켜 프로그램이 끝날 수 있도록 합니다
    }
  }
}


B

class Exercise1b { //클래스가 선언되지 않아 추가하였습니다.
   public static void main(String [] arg) {
     int x = 5;
     while(x>1) {
       x = x - 1;
       if (x<3) {
          System.out.println("small x");
       }
     }
   }
}


C

class Exercise1b
   public static void main(String [] arg) { //메인함수가 선언되지 않아 추가하였습니다.

     int x = 5;
     while (x>1) {
        x = x -1;
        if (x<3) {
          System.out.println("small x");
        }
     }
   }
}




}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체에서 자신에 대해 아는 것
 * 메소드: 객체에서 자신이 하는 것
 * 클래스: 객체를 만들기 위한 청사진
 * 테스트용 클래스: main() 메소드가 들어가며 테스트할 클래스 유형의 객체를 만들어서 접근
 

*68p Television* _채워넣기_

 * 인스턴스 변수: 전원 상태, 현재 채널
 * 메소드: 채널 변경, 볼륨 조절, 녹화


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{

public class GuessGame {

	Player p1;
	Player p2;
	Player p3;
	Player p4;
		public void startGame(){
			p1 = new Player();
			p2 = new Player();
			p3 = new Player();
			p4 = new Player();
			
			int guessp1 = 0;
			int guessp2 = 0;
			int guessp3 = 0;
			int guessp4 = 0;
			
			boolean p1isRight = false;
			boolean p2isRight = false;
			boolean p3isRight = false;
			boolean p4isRight = false;
			
			int targetNumber = (int) (Math.random() * 10);
			System.out.println("0이상 9이하 숫자를 맞춰보세요");
			
			while(true){
				System.out.println("맞춰야 할 숫자는 " + targetNumber + " 입니다.");
				
				p1.guess();
				p2.guess();
				p3.guess();
				p4.guess();
				
				guessp1 = p1.number;
				System.out.println("1번 선수가 찍은 숫자 : " + guessp1);
				
				guessp2 = p2.number;
				System.out.println("2번 선수가 찍은 숫자 : " + guessp2);
				
				guessp3 = p3.number;
				System.out.println("3번 선수가 찍은 숫자 : " + guessp3);
				
				guessp4 = p4.number;
				System.out.println("4번 선수가 찍은 숫자 : " + guessp4);
				
				if (guessp1 == targetNumber){
					p1isRight = true;
				}
				
				if (guessp2 == targetNumber){
					p2isRight = true;
				}
				
				if (guessp3 == targetNumber){
					p3isRight = true;
				}
				
				if (guessp4 == targetNumber){
					p4isRight = true;
				}
				
				if (p1isRight || p2isRight || p3isRight || p4isRight){
					
					System.out.println("맞춘 사람이 있습니다");
					System.out.println("1번 선수 : " + p1isRight);
					System.out.println("2번 선수 : " + p2isRight);
					System.out.println("3번 선수 : " + p3isRight);
					System.out.println("4번 선수 : " + p4isRight);
					System.out.println("게임 끝");
					break;
					
				}
				
				else{
					System.out.println("다시 시도해야 합니다");
				}
				
				
				
				
			}
			
			
		}
	
	
}


public class Player {

	int number = 0;
	
	public void guess(){
		number = (int) (Math.random() * 10);
		//System.out.println("찍은 숫자 : " + number);
	}
	
}


public class GameLauncher {

	public static void main(String[] arg){
		
		GuessGame game = new GuessGame();
		game.startGame();
	}
	
	
}



}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

*A*

public class TapeDeck {

	boolean canRecord = false;
	
	void playTape() {
		System.out.println("tape playing");
		
	}
	
	void recordTape() {
		System.out.println("tape recording");
	}
	
}

public class TapeDeckTestDrive {

	public static void main(String [] args){
		
		TapeDeck t = new TapeDeck(); // 이부분(객체 생성)이 빠져서 밑의 코드가 컴파일 되지 않습니다.
		
		t.canRecord = true;
		t.playTape();
		
		if (t.canRecord == true){
			t.recordTape();
		}
		
		
	}
	
}

실행결과
tape playing
tape recording


*B*

public class DVDPlayer {

	boolean canRecord = false;
	
	void recordDVD(){
		System.out.println("DVD recording");
	}
	
	void playDVD(){
		System.out.println("DVD playing");
	}//추가된 메소드
	
	
}

public class DVDPlayerTestDrive {

	public static void main(String [] args){
		
		DVDPlayer d = new DVDPlayer();
		d.canRecord = true;
		d.playDVD(); //PlayDVD 메소드가 없기 때문에 컴파일이 되지 않습니다. 문제 해결을 위해 DVDPlayer 클래스에서 PlayDVD 메소드를 만들어 줍니다.
		
		if (d.canRecord == true) {
			d.recordDVD();
		}
		
		
	}
	
}

실행결과
DVD playing
DVD recording

}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수:
변수를 선언할때는 반드시 이름과 유형이 있어야 합니다.
원시 변수는 값을 표시하는 비트('a',5,true,3.1415 등)로 구성되며
래퍼런스 변수의 값은 힙에 들어있는 객체를 건드릴 수 있는 방법을 나타내는 비트입니다.
래퍼런스 변수는 또한 점 연산자를 통해 메소드나 인스턴스 변수에 접근할 수 있습니다.

 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{

public class dog {

	String name;
	public static void main(String[] args) {
		
		dog dog1 = new dog();
		dog1.bark();
		
	dog1.name = "Bart";
	
	dog[] myDogs = new dog[7];
	
	myDogs[0] = new dog();
	myDogs[1] = new dog();
	myDogs[2] = dog1;
	myDogs[3] = new dog();
	myDogs[4] = new dog();
	myDogs[5] = new dog();
	myDogs[6] = new dog();
	
		
		myDogs[0].name = "Fred";
		myDogs[1].name = "Marge";
		myDogs[2].name = "byung jun";
		myDogs[3].name = "sung han";
		myDogs[4].name = "se hyun";
		myDogs[5].name = "zero";
		myDogs[6].name = "lucky";
		
		System.out.print("마지막 개의 이름 : ");
		System.out.println(myDogs[2].name);
		
		int x = 0;
		while(x < myDogs.length){
			myDogs[x].bark();
			x = x+1;
		}
				
		
	}
	
	public void bark(){
		System.out.println(name + "이(가) 왈!하고 짖습니다");
	}
	
	public void eat(){}
		public void Chasecat() {}

}

}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

*A*

public class Books {

	String title;
	String author;
	
}

public class BooksTestDrive {

	public static void main(String [] args){
		Books[] myBooks = new Books[3];
		int x = 0;
		
		myBooks[0] = new Books();
		myBooks[1] = new Books();
		myBooks[2] = new Books(); //새로운 객체를 만들고 그 객체를 배열의 원소에 대입합니다. 이부분이 에제에서는 없어서 컴파일이 되지 않습니다.
		
		
		myBooks[0].title = "The Grapes of Java";
		myBooks[1].title = "The Java Gatsby";
		myBooks[2].title = "The Java Cookbook";
		myBooks[0].author = "bob";
		myBooks[1].author = "sue";
		myBooks[2].author = "ian";
		
		while (x<3){
			System.out.println(myBooks[x].title);
			System.out.print(" by ");
			System.out.println(myBooks[x].author);
			x = x + 1;
			
		}
		
	}
	
}

실행결과
The Grapes of Java
 by bob
The Java Gatsby
 by sue
The Java Cookbook
 by ian

*B*

public class Hobbits {

	String name;
	
	public static void main(String[] args){
		
		Hobbits[] h = new Hobbits[3];
		int z = 0 ;
		
		while (z<3){ //배열을 3개 만들었고 0,1,2 만 사용하면 되므로 4가 아닌 3보다 작음을 조건으로 제시합니다. 4로 할경우 실행은 제대로 되나 exception 오류가 납니다.
		
			
			h[z]= new Hobbits();
			
			h[z].name = "bilbo";
			
			if (z==1){
				h[z].name = "frodo";
			}
			if (z==2){
				h[z].name = "sam";
			}
			
			System.out.print(h[z].name + " is a ");
			System.out.println("Good Hobbit name");
			
			z = z + 1; //또한 이 코드를 예제처럼 while문 맨 위에 넣을 경우는 시작위치가 1이 되므로 이처럼 while 마지막으로 위치를 바꿔줍니다.
		}
			
	}
	
}


}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?: 밥이 이겼습니다.
 * 문제가 된 부분은 어딘가요?: 켄트의 소스중
refc = new Contact(); 부분이 잘못되었습니다.
마지막 Contact 객체를 제외하고는 접근 할 수 있는 방법이 없습니다.
(즉 마지막을 제외하곤 아무런 의미가 없습니다)

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화: 인스턴스 변수의 값을 부적절한 값으로 설정하는것을 막아줍니다.
 * 게터와 세터: 게터는 단지 그 게터가 가져오기로 되어있는 값을 리턴값 형태로 받아오기 위한 용도로만 쓰이고, 세터는 그 세터가 설정한 값을 인자로 받아서 인스턴스 변수를 그 값으로 설정하기 위한 용도로 쓰입니다.
 * 인스턴스 변수 vs 지역 변수:
인스턴스 변수는 클래스 내에서 선언되지만 지역 변수는 메소드 내에서 선언됩니다.
또한 인스턴스 변수에는 항상 어떤 기본값이 들어가지만, 지역 변수는 사용하기 전에 반드시 초기화를 해야 합니다.
 
*107p Dog* _실행_

{{{

public class Dog {

	
	int size;
	String name;
	
	void bark()
	{
		if (size > 60)
		{
			System.out.println("Wooor! Wooof");
		}
		
		else if(size > 14){
			System.out.println("Ruff! Ruff");
		}
		
		else {
			System.out.println("Yip! Yip!");
		}
		
	}
	
}

public class DogTestDrive {

	
	public static void main(String[] args)
	{
		Dog one = new Dog();
		one.size = 70;
		Dog two = new Dog();
		two.size = 8;
		Dog three = new Dog();
		three.size = 35;
		
		one.bark();
		two.bark();
		three.bark();
		
	}
	
	
}






}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

--------------------A--------------------

public class XCopy {

	public static void main(String[] args)
	{
		
		int orig = 42;
		XCopy x = new XCopy();
		int y = x.go(orig);
		System.out.println(orig + " " + y);
					
	}
	
	
	int go (int arg){
	
		arg = arg * 2;
		return arg;
		
	}
		
}

//제대로 작동하며 42와 42 X 2 값인 42, 84 가 출력됩니다.


----------------B-----------------

public class Clock {

	String time;
	
	void setTime(String t) {
		time = t;
	}
	
	String getTime(){ 
//String 값인 time을 반환하는데 메소드가 void로 선언되어 컴파일이 되지 않습니다.
//따라서 void를 String으로 바꿔주었습니다.

		return time ;
	
	}
	
		
}


public class ClockTestDrive {

	public static void main(String[] args){
		
		Clock c = new Clock();
		
		c.setTime("1245");
		String tod = c.getTime();
		System.out.println("Time : " + tod);
		
		
	}
	
}

//소스코드 수정후 제대로 실행되며 Time : 1245가 출력됩니다.




}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?

소프트웨어 개발 방법론 분야에 새로 등장한 개발 방법으로,
다양한 규모의 회사에서 쓰이고 있습니다.
익스트림 프로그래밍의 가장 큰 장점은 막판에 스펙이 변경되는 일이 있어도 고객이 원하는 것을 고객이 원하는 기한에 맞춰서 제공할 수 있다는 점이며,
조금씩, 하지만 자주 발표한다. 테스트 코드를 먼저 만든다 등의 규칙이 있습니다.
 


*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{


public class SimpleDotComTestDrive {

	public static void main(String[] args){
		/*
		SimpleDotCom dot = new SimpleDotCom();
		
		int[] locations = {2,3,4};
		
		dot.setLocationCells(locations);
		
		String userGuess = "2";
		
		String result = dot.checkYourself(userGuess);
		
		
		
		String testResult = "failed";
		
		if (result.equals("hit")){
			testResult = "passed";
		}
		
		System.out.println(testResult);
		
	
		*/
		
		int numOfGuesses=0;
		
		GameHelper helper = new GameHelper();
		
		SimpleDotCom theDotCom = new SimpleDotCom();
		
		int randomNum = (int) (Math.random() * 5);
		
		int[] locations = {randomNum, randomNum+1, randomNum+2};
		
		theDotCom.setLocationCells(locations);
		
		boolean isAlive = true;
		
		while(isAlive == true){
			String guess = helper.getUserInput("enger a number");
			String result = theDotCom.checkYourself(guess);
			numOfGuesses++;
			if(result.equals("kill")){
				isAlive = false;
				System.out.println(numOfGuesses + "guesses");
			}
			
		}
		
		
		
	}
	
	
}


public class SimpleDotCom {

	int[] locationCells;
	int numOfHits = 0;
	
	public void setLocationCells(int[] locs){
		
		locationCells = locs;
		}
	
	public String checkYourself(String stringGuess){
		
		int guess = Integer.parseInt(stringGuess);
		
		String result = "miss";
		
		for(int i = 0; i < locationCells.length; i++){
	
			if(guess == locationCells[i]){
			result = "hit";
			numOfHits++;
			break;
			
		}
		}
	
		if (numOfHits == locationCells.length){
			result = "kill";
		}
		
		System.out.println(result);
		return result;
		
	}
	
	
	
}


import java.io.*;

public class GameHelper {

	public String getUserInput (String prompt){
		String inputLine = null;
		System.out.print(prompt + " ");
		
		try{
			BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
			inputLine = is.readLine();
			if (inputLine.length() == 0) return null;
		} catch(IOException e){
			System.out.println("IOException: " + e);
		}
		
		return inputLine;
	}
	
}



}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

public class SimpleDotComTestDrive {

	public static void main(String[] args){
		
		
		int numOfGuesses=0;
		
		GameHelper helper = new GameHelper();
		
		SimpleDotCom theDotCom = new SimpleDotCom();
		
		int randomNum = (int) (Math.random() * 5);
		
		int[] locations = {randomNum, randomNum+1, randomNum+2};
		
		boolean[] hitCells = new boolean[3]; //새로 boolean 배열을 만들어 줍니다
		
		theDotCom.sethitCells(hitCells);
		다
		theDotCom.setLocationCells(locations); //닷컴 클래스로 boolean 배열을 넘겨줍니다
		
		boolean isAlive = true;
		
				while(isAlive == true){
		
			String guess = "a";
		
			while(guess == "a") //입력값이 없는 경우를 대비하여 getUserInput 메소드에서의 리턴값에 따라 다시 입력값을 받도록 함
			{
				guess = helper.getUserInput("enter a number");
			}
			
			String result = theDotCom.checkYourself(guess);
			numOfGuesses++;

			if(result.equals("kill")){
				isAlive = false;
				System.out.println(numOfGuesses + "guesses");
			}
			
		}
	}
		
}


public class SimpleDotCom 

	int[] locationCells;
	boolean[] hitCells = new boolean[3];
	
	int numOfHits = 0;
	
	public void setLocationCells(int[] locs){
		
		locationCells = locs;
		}
	
	public void sethitCells(boolean[] shc){ //새로 만든 메소드로 불리언 배열을 받아옵니다
		hitCells = shc;
	}
	
	
	public String checkYourself(String stringGuess){
		
		int guess = Integer.parseInt(stringGuess);
		
		String result = "miss";
		
		for(int i = 0; i < locationCells.length; i++){
	다
			if(guess == locationCells[i] && hitCells[i]!=true){ //이미 맞춘 배열인지 확인합니다
			result = "hit";
			numOfHits++;
			hitCells[i] = true; // 맞춘 배열이기때문에 불리언 값을 트루로 바꿔줍니다
			break;
			
		}
		
			
		
		
		}
	
		if (numOfHits == locationCells.length){
			result = "kill";
		}
		
		System.out.println(result);
		return result;
		
	}
	
}

import java.io.*;

public class GameHelper {

	public String getUserInput (String prompt){
		String inputLine = null;
		System.out.print(prompt + " ");
		
	try{
			BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
			inputLine = is.readLine();
			if (inputLine.length() == 0) 
				return "a";
		} catch(IOException e){
			System.out.println("IOException: " + e);
		}
		
		return inputLine;
	}
	
}




}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{
public class SimpleDotCom {

	int[] locationCells;
		
	int numOfHits = 0;
	
	public void setLocationCells(int[] locs){
		
		locationCells = locs;
		}
	
	
	
	public String checkYourself(String stringGuess){
		
				
		int guess = Integer.parseInt(stringGuess);
		
		String result = "miss";
		
		for(int i = 0; i < locationCells.length; i++){
	
			if(guess == locationCells[i]){
			result = "hit";
			numOfHits++;
			locationCells[i]=-1; //맞춘셀의 값을 -1로 바꿔줍니다
			break;
			
		}
		
					
		}
	
		if (numOfHits == locationCells.length){
			result = "kill";
		}
		
		System.out.println(result);
		return result;
		
	}
	
}

public class SimpleDotComTestDrive {

	public static void main(String[] args){

		int numOfGuesses=0;
		
		GameHelper helper = new GameHelper();
		
		SimpleDotCom theDotCom = new SimpleDotCom();
		
		int randomNum = (int) (Math.random() * 5);
		
		int[] locations = {randomNum, randomNum+1, randomNum+2};
		
		boolean[] hitCells = new boolean[3];
			
		theDotCom.setLocationCells(locations);
		
		boolean isAlive = true;
		
		while(isAlive == true){
		
			String guess = "a";
		
			while(guess == "a")
			{
				guess = helper.getUserInput("enter a number");
			}
			
			String result = theDotCom.checkYourself(guess);
			numOfGuesses++;
			if(result.equals("kill")){
				isAlive = false;
				System.out.println(numOfGuesses + "guesses");
			}
			
		}
		
	}
}



import java.io.*;

public class GameHelper {

	public String getUserInput (String prompt){
		String inputLine = null;

		System.out.print(prompt + " ");
		
		try{
			BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
			inputLine = is.readLine();
			if (inputLine.length() == 0) 
				return "a";
		} catch(IOException e){
			System.out.println("IOException: " + e);
		}
		
		return inputLine;
	}
	
}


}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{
public class SimpleDotCom {

	int[] locationCells;
	int[] locationCellsCopy;

	int numOfHits = 0;

	public void setLocationCells(int[] locs) {

		locationCells = locs;

	}

	public String checkYourself(String stringGuess) {

		
		int a = 0;
		int guess = Integer.parseInt(stringGuess);

		String result = "miss";

		
		
		for (int i = 0; i < (locationCells.length - numOfHits); i++) { //총 배열의 수에서 맞춘 횟수를 뺀 만큼 반복문을 돌립니다

			if (guess == locationCells[i]) {
//맞춘다면 맞춘값과 현재 배열의 마지막 숫자의 위치를 바꿔줍니다.
				a = locationCells[locationCells.length - numOfHits - 1];

				locationCells[locationCells.length - numOfHits - 1] = locationCells[i];

				locationCells[i] = a;

				result = "hit";
				
				numOfHits++;

				break;

			}

		}

		if (numOfHits == locationCells.length) {
			result = "kill";
		}

		System.out.println(result);
		return result;

	}

}


public class SimpleDotComTestDrive {

	public static void main(String[] args){

		int numOfGuesses=0;
		
		GameHelper helper = new GameHelper();
		
		SimpleDotCom theDotCom = new SimpleDotCom();
		
		int randomNum = (int) (Math.random() * 5);
		
		int[] locations = {randomNum, randomNum+1, randomNum+2};
		
		boolean[] hitCells = new boolean[3];
			
		theDotCom.setLocationCells(locations);
		
		boolean isAlive = true;
		
		while(isAlive == true){
		
			String guess = "a";
		
			while(guess == "a")
			{
				guess = helper.getUserInput("enter a number");
			}
			
			String result = theDotCom.checkYourself(guess);
			numOfGuesses++;
			if(result.equals("kill")){
				isAlive = false;
				System.out.println(numOfGuesses + "guesses");
			}
			
		}
		
	}
}



import java.io.*;

public class GameHelper {

	public String getUserInput (String prompt){
		String inputLine = null;

		System.out.print(prompt + " ");
		
		try{
			BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
			inputLine = is.readLine();
			if (inputLine.length() == 0) 
				return "a";
		} catch(IOException e){
			System.out.println("IOException: " + e);
		}
		
		return inputLine;
	}
	
}



}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

import java.util.*;
import java.util.ArrayList;

public class DotComBust {

	private GameHelper helper = new GameHelper();
	private ArrayList<DotCom> dotComsList = new ArrayList<DotCom>();
	private int numOfGuesses = 0;
	
	private void setUpGame(){
		
		DotCom one = new DotCom();
		one.setName("Pets.com");
		DotCom two = new DotCom();
		two.setName("eToys.com");
		DotCom three = new DotCom();
		three.setName("Go2.com");

		dotComsList.add(one);
		dotComsList.add(two);
		dotComsList.add(three);
		
		System.out.println("Your goal is to sink three dot coms.");
		System.out.println("Pets. com, eToys.com, Go2.com");
		System.out.println("Try to sink them all in the fewest number of guesses");
		
		for (DotCom dotComToSet : dotComsList){
			ArrayList<String> newLocation = helper.placeDotCom(3);
			dotComToSet.setLocationCells(newLocation);
		}
	}
	
	private void startPlaying(){
		while(!dotComsList.isEmpty()){
			String userGuess = helper.getUserInput("Enter a guess");
			checkUserGuess(userGuess);
		}
		
		finishGame();	
		
	}
	
	
	private void checkUserGuess(String userGuess) {
		
		numOfGuesses++;
		String result = "miss";
		for (DotCom dotComToTest : dotComsList){
			result = dotComToTest.checkYourself(userGuess);
			if(result.equals("hit")){
				break;
			}
			if(result.equals("kill")){
				dotComsList.remove(dotComToTest);
				break;
			}
		}
		
		System.out.println(result);
	}
	
private void finishGame(){
	System.out.println("All dot Coms are dead! your stock is now worthless");
	if (numOfGuesses <= 18){
		System.out.println("It only took you" + numOfGuesses + "Guesses.");
		System.out.println("you got out before your options sank");
	} else{
		System.out.println("Took you long enough. " + numOfGuesses + " guesses");
		System.out.println("Fish are dancing with your options");
		
	}
}
	

public static void main(String[] args){
	DotComBust game = new DotComBust();
	game.setUpGame();
	game.startPlaying();
}
	
	
}


import java.util.*;

public class DotCom {

	private ArrayList<String> locationCells;
	private String name;
	
	public void setLocationCells(ArrayList loc){
		locationCells = loc;
	}
	
	public void setName(String n){
		name = n;
	}
	
	public String checkYourself(String userInput){
		String status = "miss";
		int index = locationCells.indexOf(userInput);
		if(index >=0){
			locationCells.remove(index);
			if(locationCells.isEmpty()){
				status = "kill";
				System.out.println("Ouch! you sung " + name + "   : ( ");
			} else{
				status = "hit";
			}
		}
		
		return status;
		
	}
	
	
	
}


import java.io.*;
import java.util.*;

public class GameHelper {

	private static final String alphabet = "abcdefg";
	private int gridLength = 7;
	private int gridSize= 49;
	private int [] grid = new int[gridSize];
	private int comCount = 0;
	
	public String getUserInput(String prompt){
		String inputLine = null;
		System.out.print(prompt + " ");
		try{
			BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
			inputLine = is.readLine();
			if(inputLine.length() == 0 ) return null;
						
		} catch(IOException e){
			System.out.println("OException: " + e);
		}
			return inputLine.toLowerCase();
	}
	
	public ArrayList<String> placeDotCom(int comSize){
		ArrayList<String> alphaCells = new ArrayList<String>();
		String [] alphacoords = new String[comSize];
		String temp = null;
		int [] coords = new int[comSize];
		int attempts = 0;
		boolean success = false;
		int location = 0;
		
		comCount++;
		int incr = 1;
		if ((comCount % 2) == 1){
			incr = gridLength;
		}
		
		while(!success & attempts++ < 200){
			location = (int) (Math.random() * gridSize);
			int x = 0;
				success = true;
				while(success && x < comSize){
					if (grid[location]==0){
						coords[x++] = location;
						location += incr;
						if(location >=gridSize){
							success = false;
						}
						if(x>0 & (location % gridLength==0)){
							success = false;
						}
					} else{
						success = false;
					}
				}
		}
		
		
		int x = 0;
		int row = 0;
		int column = 0;
		while(x < comSize){
			grid[coords[x]] = 1;
			row = (int) (coords[x]/gridLength);
			column = coords[x] % gridLength;
			temp = String.valueOf(alphabet.charAt(column));
			alphaCells.add(temp.concat(Integer.toString(row)));
			x++;
		}
		
		return alphaCells;
		
	}
	
		
	
}









}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속: 한 클래스가 다른 클래스를 상속하는 것을 하위클래스가 상위클래스로부터 상속받는다고 말하며, 상위클래스를 확장한 하위클래스가 상위클래스의 멤버를 물려받는다는 것을 의미한다.
 * 다형성: 래퍼런스와 객체가 다른 유형이어도, 즉 다형성을 사용하면 레퍼런스 유형을 실제 객체 유형의 상위클래스 유형으로 지정할 수 있다.

*208p 클래스 계층 구조* _클래스로 구현_
하
{{{

public class Animal {

	int picture;
	int food;
	int hunger;
	int boundaries;
	int location;
	
	public void makeNoise(){
		
	}
	
	public void eat(){
		
	}
	
	public void sleep(){
		
	}
	
	public void roam(){
		
	}
	
}

public class Feline extends Animal{

	
	
	public void roam(){
		
	}
	
}


public class Lion extends Feline{

	public void makeNoise(){
		
	}
	
	public void eat(){
		
	}
	
}


public class Tiger extends Feline{

	public void makeNoise(){
		
	}
	
	public void eat(){
		
	}
	
}

public class Cat extends Feline{

	public void makeNoise(){
		
	}
	
	public void eat(){
		
	}
	
}

public class Hippo extends Animal{

	public void makeNoise(){
		
	}
	
	public void eat(){
		
	}
	
}

public class Canine {

	public void roam(){
		
	}
	
	
}

public class Wolf extends Canine{

	public void makeNoise(){
		
	}
	
	public void eat(){
		
	}
	
}

public class Dog extends Canine{

	public void makeNoise(){
		
	}
	
	public void eat(){
		
	}
	
}

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}