#summary 이찬주의 실습 페이지입니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{

public class BeerSong {
	public static void main(String[] args)
	{
		int beerNum=99;
		
		String word="bottles"; //복수형
		
		while(beerNum > 0) {
		
			if(beerNum==1) 
			{
				word = "bottle"; //단수형(한 병인 경우)
			}

		System.out.println(beerNum + " " + word + " of beer on the wall");
		System.out.println(beerNum + " " + word + " of beer.");
		System.out.println("Take one down.");
		System.out.println("Pass it around.");
	
			beerNum = beerNum -1;

	if(beerNum >1) 
	{
		System.out.println(beerNum + " " + word + " of beer on the wall");
	} 
	else if(beerNum ==1)
	{
		word = "bottle";
		System.out.println(beerNum + " " + word + " of beer on the wall");
	} //수정한 부분입니다~!!
	else
	{
		System.out.println("No more bottles of beer on the wall");
	} //else문 끝
	  
                        } //while 순환문 끝
	
	}//main 클래스 끝

} //클래스 끝

}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{
public class PhraseOMatic {
	public static void main(String[] args) {
	
		String[] Rappers = {"dayglo", "The Quiett", "DOK2", "J kyun", "takeone", "LOCO", "WUTAN", "din din", "NuNu"};

		String[] Fruits = {"apple", "kiwi", "melon", "tomato", "grape", "strawberry", "blueberry", "cherry"};
		
		String[] Animals = {"cat", "fish", "dog", "fox", "elephant", "rabbit", "polar bear", "bear"};

		int OneLength = Rappers.length;
		int TwoLength = Fruits.length;
		int ThreeLength = Animals.length;

		int rand1 = (int)(Math.random() * OneLength);
		int rand2 = (int)(Math.random() * TwoLength);
		int rand3 = (int)(Math.random() * ThreeLength);

		String Phrase = Rappers[rand1] + ", " + Fruits[rand2] + ", "+ Animals[rand3] + ".";

		System.out.println("What we need is a " + Phrase);
		}
	}

}}}

*52p 집중토론* _요약_

*자바 가상 머신: 

프로그램을 실행. 

출력을 함. 

보안 문제 예방. 

원래 들어가야 할 것이 아닌 다른 유형의 값이 들어갈 때는 ClassCast Exception을 발생시킴.

바이트 코드가 만들어지고 실행되기 전까지 외부인의 접근을 확인하는 작업을 함.

*컴파일러: 

파일을 줌. 
문법이 맞는지 검사함.

순수한 인터프리터 언어(실행할 때). 

바이트코드로 만들어진 것은 컴파일러가 필요없음. 

변수에 이상한 유형의 데이터를 저장하게 되면 위험한데, 이것을 판단함. 

유연성 확보. 

비공개 메소드 또는 고치면 안되는 메소드에 접근하는 것을 방지해줌. 

클래스의 핵심적인 내용에 접근하는 코드와 같이 사람들이 함부로 보면 안되는 코드를 건드리는 것을 방지해줌.

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

class Exercise1b {
  public static void main(String[]args) {
    int x =1;
    while(x<10) {
      if(x>3) {
        System.out.println("big x");
      }
      x=x+1; //수정한 부분입니다.
    }
  }
}

---------------------------------------------------------------------

class Small { //수정한 부분입니다.
  public static void main(String[] args) {
     int x = 5;
     while(x>1) {
       x = x -1;
       if(x<3) {
         System.out.println("small x";
       }
     }
}

----------------------------------------------------------------------

class Exercise1b
  public static void main(String [] args) { //수정한 부분입니다.
    int x = 5;
    while(x>1) {
      x = x-1;
      if(x<3) {
        System.out.println("small x");
      }
    }
}

}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체에서 자신에 대해 아는 것. 객체의 상태(데이터)를 나타내며 그 유형에 속하는 각 객체마다 값이 다르다. 인스턴스란 객체와 같다.
 * 메소드: 객체에서 할 수 있는 일
 * 클래스: 객체를 만들기 위한 청사진
 * 테스트용 클래스: 새로운 클래스 유형의 객체에 들어있는 메소드와 변수를 테스트하는 것. main() 메소드가 들어감.
 

*68p Television* _채워넣기_

 * 인스턴스 변수 : Channel Volume
 * 메소드 : changeChannel() upVolume() downVolume()


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{
public class GuessGame {
	Player p1;
	Player p2;
	Player p3;
	Player p4;

	public void startGame() {
		p1 = new Player();
		p2 = new Player();
		p3 = new Player();

		int guessp1 = 0;
		int guessp2 = 0;
		int guessp3 = 0;
		int guessp4 = 0;

		boolean p1isRight = false;
		boolean p2isRight = false;
		boolean p3isRight = false;
		boolean p4isRight = false;

		int targetNumber = (int)(Math.random()*10);
		System.out.println("0 이상 9이하의 숫자를 맞춰보세요.");

		while(true) {
			System.out.println("맞춰야 할 숫자는 " + targetNumber + "입니다.");

			p1.guess();
			p2.guess();
			p3.guess();
			p4.guess();

			guessp1 = p1.number;
			System.out.println("1번 선수가 찍은 숫자: " + guessp1);

			guessp2 = p2.number;
			System.out.println("2번 선수가 찍은 숫자: " + guessp2);

			guessp3 = p3.number;
			System.out.println("3번 선수가 찍은 숫자: " + guessp3);
		
			guessp4 = p4.number;
			System.out.println("4번 선수가 찍은 숫자: " + guessp4);

			if(guessp1 == targetNumber) {
				p1isRight = true;
			}
			if(guessp2 == targetNumber) {
				p2isRight = true;
			}
			if(guessp3 == targetNumber) {
				p3isRight = true;
			}
			if(guessp4 == targetNumber) {
				p4isRight = true;
			}

			if(p1isRight || p2isRight || p3isRight || p4isRight)	{
				
				System.out.println("맞춘 선수가 있습니다.");
				System.out.println("1번 선수: " + p1isRight);
				System.out.println("2번 선수: " + p2isRight);
				System.out.println("3번 선수: " + p3isRight);
				System.out.println("4번 선수: " + p4isRight);
				System.out.println("게임 끝");
				break; //게임이 끝났으므로 break문으로 순환문을 빠져나간다.

			}else {
			//아직 아무도 못 맞췄기 때문에 계속 해야 합니다.
			System.out.println("다시 시도해야 합니다.");
			}// if/else 부분 끝
		}// 순환문 끝
	}// 메소드 끝
}// 클래스 끝

public class Player {
	int number = 0; //찍은 숫자를 저장할 변수

	public void guess() {
		number = (int) (Math.random()*10);
		System.out.println("찍은 숫자: " + number);
	}
}

public class GameLauncher {
	public static void main(String[] args) {
		GuessGame game = new GuessGame();
		game.startGame();
	}
}

}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
public class TapeDeck {

	boolean canRecord = false;
	
	void playTape() {
		System.out.println("tape playing");
	}
	
	void recordTape() {
		System.out.println("tape recording");
	}
}

public class TapeDeckTestDrive {
	public static void main(String[] args){
		
		TapeDeck t = new TapeDeck();// 이부분!
		t.canRecord = true;
		t.playTape();
		
		if(t.canRecord == true){
			t.recordTape();
		}
	}

}

----------------------------------------------------------------
public class DVDPlayer {
	
	boolean canRecord = false;
	
	void recordDVD() {
		System.out.println("DVD recording");
	}

}


public class DVDPlayerTestDrive {
	public static void main(String[] args) {
		
		DVDPlayer d = new DVDPlayer();
		d.canRecord = true;
		d.recordDVD();//play 대신 record로!!
		
		if(d.canRecord == true) {
			d.recordDVD();
		}
	}
}

}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수:

*원시변수 : 

정수, 부울, 부동소수와 같은 기초적인 값(단순한 비트 패턴으로 나타낼 수 있는 값)이 들어감.

long, int, short, byte와 같이 유형을 지정해주어야 한다.

변수에 어떤 값이 저장된다(5,-2,'a' 등)

컵에 비유할 수 있다.

*레퍼런스변수 :

객체에 대한 레퍼런스가 들어간다.

리모콘에 비유할 수 있다.

특정 개체에 접근하는 방법을 나타내는 비트가 변수 값이 된다.

 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{


public class Dog {
	String name;
	
	public static void main(String[] args) {
	//Dog 객체를 만들고 접근합니다
	Dog dog1 = new Dog();
	dog1.bark();
	dog1.name = "Bart";
	
	//이번에는 Dog 배열을 만듭니다.
	Dog[] myDogs = new Dog[10];
	//그리고 개를 몇마리 집어넣습니다.
	myDogs[0] = new Dog();
	myDogs[1] = new Dog();
	myDogs[2] = new Dog();
	myDogs[3] = new Dog();
	myDogs[4] = new Dog();
	myDogs[5] = new Dog();
	myDogs[6] = new Dog();
	myDogs[7] = new Dog();
	myDogs[8] = new Dog();
	myDogs[9] = new Dog();
	
	//배열 레퍼런스를 써서 Dog 객체에 접근합니다.
	
	myDogs[0].name = "한잔 받으시개";
        myDogs[1].name = "게임좀 같이하시개";
        myDogs[2].name = "잠좀 깨시개";
        myDogs[3].name = "밥좀 드시개";
        myDogs[4].name = "시간이 없으시개";
        myDogs[5].name = "코딩이 정말 재밌개";
        myDogs[6].name = "특히 자바가 재밌개";
        myDogs[7].name = "근데 사실거짓말이개";
        myDogs[8].name = "하지만 열심히할개";
        myDogs[9].name = "지켜봐주개";
    
    //myDog[9]의 이름이 뭐였지?
    System.out.print("마지막 개의 이름: ");
    System.out.println(myDogs[9].name);
    
    //이제 순환 문을 써서 배열에 들어있는 모든 개가 짖도록 합시다.
    
    int x = 0;
    
    while(x <myDogs.length) {
    	myDogs[x].bark();
    	x = x+1;
    }
	}
	
	public void bark() {
		System.out.println(name + "가 왈!왈!뀌뤼루리뤼ㅏ기ㅏㅓ뤽!!하고 짖습니다!!");
    }
	
  public void eat() {}
  public void chaseCat() {}
	

    
}

}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

public class Books {
	String title;
	String author;
	
}

class BooksTestDrive {
		public static void main(String[] args){
			
			int x = 0;	
			Books [] myBooks = new Books[3];
			
			myBooks[0] = new Books(); 
			myBooks[1] = new Books(); 
			myBooks[2] = new Books(); 
 
                                                   //수정한 부분
			
			myBooks[0].title = "역사란 무엇인가";
			myBooks[1].title = "나의 라임오렌지 나무";
			myBooks[2].title = "어린 왕자";
			
			myBooks[0].author = "E.H Carr";
			myBooks[1].author = "J. M. 데 바스콘셀로스";
			myBooks[2].author = "Antoine de Saint Exupery";
			
			
			while(x<3) {
				System.out.print(myBooks[x].title);
				System.out.print(" by ");
				System.out.println(myBooks[x].author);
				x = x+1;
			}
		}
}

--------------------------------------------------------------------------------

public class Hobbits {
		
		String name;
		
		public static void main(String[] args) {
			
			Hobbits [] h = new Hobbits[3];
			int z = -1;//수정한 부분
			
			while(z<2) {// 수정한 부분
				z = z+1;
				h[z] = new Hobbits();
				h[z].name ="bilbo";
				
				if(z==1) {
					h[z].name = "frodo";
				}
			if(z==2) {
				h[z].name = "sam";
			}
			System.out.print(h[z].name + " is a ");
			System.out.println("good Hobbit name");
			
			}
			
		}

}


}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요? : 밥
 * 문제가 된 부분은 어딘가요? : 사용한 레퍼런스 변수 개수는 적었지만, 켄트의 메소드에서 만든 Contact 객체 중 마지막 것을 제외한 나머지는 접근할 수가 없다는 문제가 있다. 순환문을 한 바퀴 돌 때마다 그는 새로운 객체를 레퍼런스 변수 하나에 대입했기 때문에 전에 참조하고 있던 객체는 버림받게 된다. 즉, 객체를 다시 사용 할 수 없게 된 것이다.

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:

데이터를 숨기는 것. 인스턴스 변수를 public 이 아니라 private로 지정하고 접근 제어를 위해 public으로 지정된 게터와 세터를 만들면 된다. 

 * 게터와 세터: 

매개변수와 리턴유형의 활용방법. 각각 어떤 것을 가져오고(get) 설정하는(set) 역할을 함. 보통 인스턴스변수의 값에대한 작업을 함. 게터는 단지 그 게터가 가져오기로 되어있는 값을 리턴값 형태로 받아오기 위한 용도로만 쓰이기도 함. 세터는 그 세터가 설정할 값을 인자로 받아서 인스턴스 변수를 그 값으로 설정하기 위한 용도로 쓰인다.

 * 인스턴스 변수 vs 지역 변수:

인스턴스 변수 : 

클래스 내에서 선언된다.

메소드 내에서 선언되는 것은 아니다.

기본값이 있다.(숫자 원시변수, char는 0, 부울형은 false, 객체 레퍼런스는 null) 

지역 변수 :

메소드 내에서 선언된다.

기본값이 없다.

초기화하기 전에 사용하려고 하면 컴파일 과정에서 오류가 난다.

반드시 초기화 해야한다.
 

*107p Dog* _실행_

{{{

public class Dog2 {
	int size;
	String name;
	
	void bark() {
		if(size>60) {
			System.out.println("Wooof! Wooof!");
		}else if (size >14) {
			System.out.println("Ruff! Ruff!");
		}else {
			System.out.println("Yip! Yip!");
		}
	}

}

-----------------------------------------------------------------

public class DogTestDrive {

		public static void main (String[] args) {
			Dog2 one = new Dog2();
			one.size=70;
			Dog2 two = new Dog2();
			two.size=8;
			Dog2 three = new Dog2();
			three.size=35;
			
			one.bark();
			two.bark();
			three.bark();
		}
}



}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

public class XCopy {
	
	public static void main(String [] args) {
		int orig = 42;
		
		XCopy x = new XCopy();
		
		int y = x.go(orig);
		
		System.out.println(orig + " " + y);
	}
	
	int go(int arg) {
		
		arg = arg*2;
		
		return arg;
	}
	
}
//정상 실행 됩니다!

--------------------------------------------------------------

public class Clock {
	
	String time;
	
	void setTime(String t) {
		
		time = t ;
	}
	
	String getTime() {  //수정한 부분
		
		return time;
	}

}

class ClockTestDrive {
	
	public static void main(String [] args) {
		
		Clock c = new Clock();
		
		c.setTime("1245");
		String tod = c.getTime();
		System.out.println("time: " + tod);
	}
}


}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?

소프트웨어 개발 방법론 분야에 새로 등장함. 

막판에 스펙이 변경되는 일이 있어도 고객이 원하는 것을 고객이 워나는 기한에 맞춰서 제공할 수 있다는 장점이 있다.

테스트 코딩을 먼저 만들어 놓는 것을 규칙으로 갖는다.


 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{

public class SimpleDotCom {
	
	int[] locationCells;
	int numOfHits = 0;
	
	public void setLocationCells(int[] locs) {
		locationCells = locs;
	}

public  String checkYourself(String stringGuess) {
		int guess = Integer.parseInt(stringGuess);
		String result = "miss";
		
		for(int i = 0; i<locationCells.length; i++) {
			
			if(guess == locationCells[i]) {
				result = "hit" ;
				numOfHits++;
				break;
			}
		}
		
		if(numOfHits == locationCells.length) {
			
			result = "kill";
		}
		
		System.out.println(result);
		
		return result;


	}
}


public class SimpleDotComTestDrive {
	
	public static void main (String[] args) {
		
		SimpleDotCom dot = new SimpleDotCom();// SimpleDotCom 을 참조하는 변수를 만든다.
		int[] locations = {2,3,4};// location{2,3,4}의 배열을 선언한다.
		dot.setLocationCells(locations);//setLocationCells을 참조한다.
		
		String userGuess = "2";
		String result = dot.checkYourself(userGuess);//checkYourSelf를 보내서 결과를 출력한다.
		
		
		
	}

}

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속: 하위클래스(자녀)가 상위클래스(부모)의 멤버(인스턴스 변수와 메소드)를 물려받는다.
 
 * 다형성: 상위 클래스 형식이 들어갈 수 있는 모든 자리에 해당 상위클래스와 임의의 하위클래스에 속하는 객체를 마음대로 사용가능함.

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드: 부모 클래스의 메소드를 자녀 클래스에 대입?하긴 하는데 달라지는 것.

 * 오버로딩: 이름이 같고 인자 목록이 다른 메소드 두 개를 만드는 것.

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

public class MonsterTestDrive {
	public static void main(String [] args) {
		Monster [] ma = new Monster[3];
		ma[0]= new Vampire();
		ma[1]= new Dragon();
		ma[2]= new Monster();
		
		for(int x=0; x<3; x++) {
			ma[x].frighten(x);
		}
	}
}
-----------------------------------------------------------------
class Monster {
	boolean frighten(int d) {
		System.out.println("arrrgh");
		return true;
	}

}

class Vampire extends Monster {
	boolean frighten(int x) {
		System.out.println("a bite?");
		return false;
	}
}

class Dragon extends Monster {
	boolean frighten(int degree) {
		System.out.println("breath fire");
		return true;
	}
}

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스: GUI같은게 아님.100% 추상 클래스
 * 다형성: 이름이 같지만 역할이 다른 것
 * 추상 클래스: 인스턴스를 만들 수 없는 클래스, 확장하지 않으면 쓸모없다, 실제 일처리를 하는 것은 추상 클래스의 하위 클래스 인스턴스임, 
 * 추상 메소드: 반드시 오버라이드 해야하는 메소드, 몸통이 없다, 클래스도 반드시 추상클래스로 만들어야 함,
 * 다중 상속: 상위 클래스를 두개 사용하는 것.

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}