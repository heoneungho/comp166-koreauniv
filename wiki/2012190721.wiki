#summary 수업중 실습하는 내용을 올리게 되는 실습페이지입니다. 페이지의 내용은 각 학생에 의해서 관리됩니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_
{{{
public class BeerSong{  //누구든지 접근가능한 BeerSong 이라는 클래스 선언 
     public static void main (String[] args){  //리턴값이 없는 'args'라는 이름의 String 배열의 인자를 갖는 main 메소드 선언
        int beerNum = 99;  //beerNum이라는 int형변수 선언과 99값 대입
        String word = "bottles";  //word라는 String변수 선언과 bottles 대입 복수형
       
       While (beerNum > 0){ //beerNum이 양수일때

            if (beerNum == 1) {  
            word = "bottle";  //단수형(한 병 인경우)
          } 

          System.out.println(beerNum + " " + word + " of beer on the wall"); //()안 출력하고 줄바꿈
            System.out.println(beerNum + " " + word + " of beer.");
          System.out.println("Take one down.");
          System.out.println("Pass it around.";
          beerNum = beerNum - 1; //변수 beerNum에 저장된 값의 하나 작은 값을 beerNum에 대입

          //if (beerNum > 0) {
             System.out.println(beerNum + " " + word + "of beer on the wall");//
}// 이 if문은 위에 while문의 조건과 겹친다. 그리고 밑의 else문이 받는 if문이 beerNum이 1일때와 0보다 클때 두가지가 겹치게 된다. 따라서 주석처리하거나 삭제한다. 
              else {
               System.out.println("No more bottles of beer on the wall");
             }//else 문 끝. 위의 beerNum == 1인 조건의 if 문을 받도록 고쳐줌  
                           
      }//while순환문 끝
   }//main클래스 끝
}//클래스 끝
}}}
*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_
{{{
public class PhraseOMatic{
   public static void main (String[] args){
     
      
      String [] wordListOne = {"I","love","java","it's","1:59","AM"}; //wordListOne이라고 이름 지은 String 배열을 선언하고 그 안에 구성원소를 저장한다.
      
      String [] wordListTwo = {"i'm", "too", "tired", "now", "sleepy"};
      String [] wordListThree = {"fighting", "huurry", "up"}; 
    
      int oneLength = wordListOne.length; //int형 변수 oneLength를 선언하고 wordListOne배열 안의 원소개수를 oneLength에 대입한다.
      int twoLength = wordListTwo.length;
      int threeLength = wordListThree.length;

      int rand1 = (int) (Math.random() * oneLength); //oneLength배열의 크기 보다 같거나 작은 수 중 임의 수를 불러내는 함수를 이용하고 rand1이라는 int형 변수를 선언 후 대입한다. 
      int rand2 = (int) (Math.random() * twoLength);
      int rand3 = (int) (Math.random() * threeLength);

      String phrase = wordListOne[rand1] + " " + wordListTwo[rand2] + " " + wordListThree[rand3]; // phrase라는 String 변수를 선언한 후 위에서 대입된 rand1, rand2, rand3 번째수에 해당하는 단어를 각각의 wordListOne,two,three에서 불러내어 phrase에 대입한다.

      System.out.println("What we need is a " + phrase); //구문을 추출한다.   
     
   } //main 클래스 끝 
 } // 클래스 끝
}}}
*52p 집중토론* _요약_

 * 자바 가상 머신: 우리가 짠 소스코드(원조)를 컴파일러가 바이트 코드로 코딩하면 자바 가상 머신은 바이트 코드를 읽고 전자제품에 돌린다. 플랫폼에 무관하게 사용 가능하다. 
 * 컴파일러: 자바 가상 머신이 설치된 어떤 전자제품에서도 돌아갈 수 있도록 우리가 짠 소스코드를 자바 가상머신이 코딩할 수 있는 바이트 코드로 코딩 시켜주는 장치.  

*55p 컴파일러가 되어봅시다* _구현후 주석달기_
{{{
class Shuffle1{
  public static void main (String [] args){
    int x = 3; // int형 변수 x 설정후 3 대입
   
    while(x > 0) { //while문 시작
     
     if(x > 2) { // x>2일때 if조건문 시작
        System.out.print("a"); //a출력
        x = x - 1; // x = 3에서 x = 2로 변수 대입값 변화
        System.out.print("-"); //-출력
    
        if(x == 2){ //if문 안에 if문 x== 2일때 조건 true.
        System.out.print("b  c"); //b c 출력
        } //x==2일때의 if문 끝  
     } //x>2일때의 if문 끝 
       
    x = x - 1; // x=2에서 x=1로 변수 대입값 변화

    if(x == 1){ //x==1 일때 if조건문 시작  true.  

      System.out.print("d"); //d출력
  
      x = x - 1; //x=1에서 x=0으로 변수 대입값 변화, while문을 빠져나올 수 있게 변화
    } x==1일때 if문 끝
           
   }while문 끝
  }main클래스 끝
}클래스 끝
}}}
= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 클래스 영역에 선언되며 클래스의 인스턴스를 생성할때 만들어진다.
 * 메소드: 어떤 작업을 수행하기 위한 명령문의 집합이다.
 * 클래스: 객체를 정의해 놓은 것이다.
 * 테스트용 클래스:
 

*68p Television* _채워넣기_

 * 인스턴스 변수:클래스 영역에 선언되며 클래스의 인스턴스를 생성할때 만들어진다.
 * 메소드:어떤 작업을 수행하기 위한 명령문의 집합이다.


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_
{{{
public class GuessGame{
     Player p1;
     Player p2;
     Player p3;
     Player p4;     

     public void startGame() {
        p1 = new Player();
        p2 = new Player();
        p3 = new Player();
        p4 = new Player();

       int guessp1 = 0;
       int guessp2 = 0;
       int guessp3 = 0;
       int guessp4 = 0;

       boolean p1isRight = false;
       boolean p2isRight = false;
       boolean p3isRight = false;
       boolean p4isRight = false;

      int targetNumber = (int) (Math.random() * 10);
      System.out.println("0 이상 9 이하의 숫자를 맞춰보세요.");

      while (true) {
           System.out.println("맞춰야 할 숫자는 " + targetNumber + "입니다.");

           p1.guess();
           p2.guess();
           p3.guess();
           p4.guess();

           guessp1 = p1.number;
           System.out.println("1번 선수가 찍은 숫자:  " +guessp1);

           guessp2 = p2.number
           System.out.println("2번 선수가 찍은 숫자: " +guessp2);

           guessp3 = p3.number
           System.out.println("3번 선수가 찍은 숫자:" +guessp3);

           guessp4 = p4.number
           System.out,println("4번 선수가 찍은 숫자:" +guessp4);

           if (guessp1 == targetNumber) {
            p1isRight = true;
           }

           if (guessp2 == targetNumber){
            p2isRight = true;
           }
 
           if (guessp3 == targetNumber){
            p3isRight = true;
           }

           if(guessp4 == targetNumber){
            p4isRight = true;
           }

           if (p1isRight || p2isRight || p3isRight || p4isRight){

               System.out.println("맞춘 선수가 있습니다.");
               System.out.println("1번 선수: " +p1isRight);
               System.out.println("2번 선수: " +p2isRight);
               System.out.println("3번 선수: " +p3isRight);
               System.out.println("4번 선수: " +p4isRight);
               System.out.println("게임끝.");
               break;

          } else {
               System.out.println("다시 시도해야 합니다.");
            }
          }
       }
    } 

public class Player {
     int number = 0;


    public void guess(){
          number = (int) (Math.random() * 10);
          System.out.println("찍은 숫자: " + number);
     }
}

public class GameLauncher {
   public static void main (String[] args) {
         GuessGame game = new GuessGame();
         game.startGame();
   }
}            


}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수:
원시변수에는 정수, 부울, 부동소수점 수와 같은 기초적인 값이 들어간다. 
레퍼런스에는 개체에 대한 레퍼런스가 들어간다. 
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{
public class Dog {
	String name;
	public static void main (String[] args){
		// Dog 객체를 만들고 접근합니다.
		Dog dog1 = new Dog();
		dog1.bark();
		dog1.name = "Bart";
		// Dog 배열을 만듭니다.
		Dog[] myDogs = new Dog[10];
		// 개를 몇 마리 집어넣습니다.
		myDogs[0] = new Dog();
		myDogs[1] = new Dog();
		myDogs[2] = new Dog();
		myDogs[3] = new Dog();
		myDogs[4] = new Dog();
		myDogs[5] = new Dog();
		myDogs[6] = new Dog();
		myDogs[7] = new Dog();
		myDogs[8] = new Dog();
		myDogs[9] = dog1;
		
		// 배열 레퍼런스를 써서 Dog 객체에 접근합니다.
		myDogs[0].name = "종한";
		myDogs[1].name = "승태";
		myDogs[2].name = "정곤";
		myDogs[3].name = "서연";
		myDogs[4].name = "채원";
		myDogs[5].name = "진범";
		myDogs[6].name = "능호";
		myDogs[7].name = "규원";
		myDogs[8].name = "성호";
		
		//myDogs[9]의 이름이 뭐였지?
		System.out.print("마지막 개의 이름 : ");
		System.out.println(myDogs[2].name);
		
		// 순환문을 통해 배열에 들어있는 모든 개가 짖도록 합시다.
		int x = 0;
		while(x < myDogs.length){
			myDogs[x].bark();
			x = x + 1;
		}
	}

	public void bark() {
		System.out.println(name + "이(가) 왈! 하고 짖습니다.");
	}
	public void eat() { }
	public void chaseCat() { }
}

}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{





}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?:밥
 * 문제가 된 부분은 어딘가요?:켄트는 순환문을 한바퀴 돌릴 때 새로운 객체를 레퍼런스 변수에 집어 넣어서 이전에 참조하고 있던 객체를 버리게 된다.



= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:객체의 인스턴스 변수 주변에 방어막 같은 것을 만들어서 아무도 인스턴스 변수를 부적절한 값으로 설정하지 못하게 한다.

 * 게터와 세터: 게터는 가져오기로 되어있는 값을 리턴값 형태로 받아오기 위한 용도로 쓰이고 세터는 설정할 값을 인자로 받아서 인스턴스 변수를 그 값으로 설정하기 위한 용도로 쓰인다.

 * 인스턴스 변수 vs 지역 변수:인스턴스 변수는  클래스 내에서 선언되고 지역 변수는 메소드 내에서 선언된다. 지역 변수는 사용하기 전에 반드시 초기화 해야 한다.
 

 
*107p Dog* _실행_

{{{
class Dog {
	int size;
	String name;
	
	void bark(){
		if(size > 60) {
			System.out.println("Wooof! Wooof!");
		} else if (size > 14) {
			System.out.println("Ruff! Ruff!");
		} else {
			System.out.println("Yip! Yip!");
		}
	}
}
class DogTestDrive {
	
	public static void main (String[] args) {
		Dog one = new Dog ();
		one.size = 70;
		Dog two = new Dog();
		two.size = 8;
		Dog three = new Dog();
		three.size = 35;
		
		one.bark();
		two.bark();
		three.bark();
	}
}

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:
 * 다형성:

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}