#summary 수업중 실습하는 내용을 올리게 되는 실습페이지입니다. 페이지의 내용은 각 학생에 의해서 관리됩니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_
{{{
public class BeerSong{
 public static void main(String[] args){
  int beerNum = 99;
  String word = "bottles";
 
  while(beerNum > 0){
    if(beerNum == 1){
     word = "bottle";    // beerNum가 1이 되면 단수형으로 쓴다.
    }
  System.out.println(beerNum + "" + word + "of beer on the wall");
  System.out.println(beerNum + "" + word + "of beer.");
  System.out.println("Take one down.");
  System.out.println("Pass it around.");
  beerNum = beerNum - 1;  // beerNum이 99부터 1씩 작아진다. 
                                               //순환문 돌아가는 동안 매번 위의 명령대로 출력된다. 
  if(beerNum == 0)
  {System.out.println("No more bottles of beer on the wall");}

//beerNum이 0이 되면 위의 문장이 출력 된다. 그리고 순환문에서 나간다. 
 //문제해결 : if문은 필요없다. (99~1) bottle(s) of beer on the wall 라는 문장이 두 번씩 불필요하게 반복되는 점 제거. 더불어 1병일 때 s 붙는 일도 없어진다.
  }
 }
}
}}}
*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_
{{{
 public class PhraseOMatic{
 public static void main(String[] args){

  String[] wordListOne = {"kenetic", "lose-lose", "famous"};
  String[] wordListTwo = {"enforced", "rough", "well-structured"};
  String[] wordListThree = {"procedure", "ability", "method"};

  int oneLength = wordListOne.length;
  int twoLength = wordListTwo.length;
  int threeLength = wordListThree.length;

  int rand1 = (int) (Math.random() * oneLength);
  int rand2 = (int) (Math.random() * twoLength);
  int rand3 = (int) (Math.random() * threeLength);

  String phrase = wordListOne[rand1]+" "+wordListTwo[rand2] +" "+ wordListThree[rand3];

  System.out.println("What we need is a " + phrase);
}
}
}}}
*52p 집중토론* _요약_

 * 자바 가상 머신: 프로그램을 실행시켜준다. 변수에 틀린 유형의 값이 들어가면 ClassCast Exception을 발생시킨다. 보안 관련 작업. 바이트코드가 만들어진 다음 바이트 코드가 실행되기 전까지 다른 누군가가 그것을 건드리지 않았는지 확인.

 * 컴파일러:파일을 준다. 문법이 맞았는지 틀렸는지 검사.변수에 틀린 유형의 데이터가 저장되는 것을 방지한다(데이터 유형 위반 사항 체크).  실행할 때 제대로 일어나면 안 되는 일을 방지. 접근 위반 방지. 발생할 수 있는 문제점의 대부분을 잡아줌.

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

A문제 
{{{
/*x가 1로 고정인 상태여서 while문의 조건은 충족시켜 while문 밖으로 나오지 않는다. 그리고 while문 속 if문의 조건에는 해당되지 않아 while문에서 아무 결과를 보이지 않으며 무한적으로 돈다. 그러므로 while문에 x를 1씩 증가시키는 것을 추가하여 while문 밖으로 나올 수 있게 한다.*/

class Exercise1b{
 public static void main(String [] args){
  int x =1;
  while(x < 10){
   if(x>3){
    System.out.println("big x");
   }
  x++;
 }
}
}}}
B문제 
{{{
/*메소드는 있는데 클래스가 없어서 문제다. 그러니 클래스를 만들면 된다.*/

class Peace{
public static void main(String[] args){
 int x = 5;
 while(x>1){
  x--;
  if(x<3){
	System.out.println("small x");
  }
 }
}
}
 }}}
C문제
{{{
/* 메소드가 없다. 적어도 행동을 하는 while문은 메소드 안에 있어야 한다. */

class Exercise1b{

public static void main(String[] args){
 int x = 5;
 while(x>1){
	x--;
	if(x<3){
	 System.out.println("small x");
   	}
 }
}
}
}}}
= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체에서 아는 것. 객체를 부르는 다른 이름. 객체의 상태(데이터)를 나타내며 그 유형에 속하는 각 객체마다 값이 다름.
 * 메소드: 객체에서 하는 것(행동). 객체에서 할 수 있는 일. 
 * 클래스: 객체를 만들기 위한 용도일 뿐 객체가 아님. 객체를 만들기 위한 청사진. 가상머신에 그 유형의 객체를 만드는 방법을 알려는 역할.
 * 테스트용 클래스: 클래스를 테스트하기 위한 코드.
 

*68p Television* _채워넣기_

 * 인스턴스 변수: Volume, Resolution, poworMode 
 * 메소드: setVolume(), setResolution(), isTVon(), isTVoff() 

*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{
public class GuessGame{
 Player p1;
 Player p2;
 Player p3;

 public void startGame() {
	p1 = new Player();
	p2 = new Player();
	p3 = new Player();
	p4 = new Player();

	int guessp1 = 0;
	int guessp2 = 0;
	int guessp3 = 0;
	int guessp4 = 0;

	boolean p1isRight = false;
	boolean p2isRight = false;
	boolean p3isRight = false;
	boolean p4isRight = false;

	int targetNumber = (int) (Math.random() * 10);
	System.out.println("0 이상 9 이하의 숫자를 맞춰보세요.");

	while(true){
	 System.out.println("맞춰야 할 숫자는" + targetNumber + "입니다.");
	 
	 p1.guess();
	 p2.guess();
	 p3.guess();
	 p4.guess();

	 guessp1 = p1.number;
 	 System.out.println("1번 선수가 찍은 숫자: " + guessp1);

	 guessp2 = p2.number;
	 System.out.println("2번 선수가 찍은 숫자: " + guessp2);

	 guessp3 = p3.number;
	 System.out.println("3번 선수가 찍은 숫자: " + guessp3);

	 guessp4 = p4.number;
	 System.out.println("4번 선수가 찍은 숫자: " + guessp4);

	 if(guessp1 == targetNumber){
		p1isRight = true;
     	}

	 if(guessp2 == targetNumber){
		p2isRight = true;
	}

	 if(guessp3 == targetNumber){
		p3isRight = true;
	}

	 if(guessp4 == targetNumber){
		p4isRight = true;
	}

	 if(p1isRight || p2isRight || p3isRight || p4isRight){
		System.out.println("맞춘 선수가 있습니다.");
		System.out.println("1번 선수: " + p1isRight);
		System.out.println("2번 선수: " + p2isRight);
		System.out.println("3번 선수: " + p3isRight);
		System.out.println("4번 선수: " + p4isRight);
		System.out.println("게임 끝.");
		break;
	}
	 else{
		System.out.println("다시 시도해야 합니다.");
	}
}
}
}

public class Player{
	int number = 0;

	public void guess(){
		number = (int) (Math.random() *10);
		System.out.println("찍은 숫자: " number);
	}
}

public class GameLauncher{
 public static void main(String[] args) {
	GuessGame game = new GuessGame();
	game.startGame();
 }
} 

}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

A번 
{{{ 

class TapeDeck {

	boolean canRecord = false;
	
	void playTape() {
		System.out.println("tape playing");
	}
	
	void recordTape() {
		System.out.println("tape recording");
	}
}
 
class TapeDeckTestDrive {
	    
	public static void main(String[] args){
		
		TapeDeck t = new TapeDeck(); /*t라는 객체 레퍼런스 변수를 선언 해줘야 한다.*/
		
		t.canRecord = true;
		t.playTape();
		
		if(t.canRecord == true){
			t.recordTape();
		}
	}
}
 
}}}

B번 
{{{
class DVDPlayer {
	
	boolean canRecord = false;
	
	void recordDVD() {
		System.out.println("DVD recording");		
	}
	
	void playDVD() {
		System.out.println("DVD playing"); /*playDVD 메소드를 생성해준다.*/
	}
}


class DVDPlayerTestDrive {
	public static void main(String[] args) {
		DVDPlayer d = new DVDPlayer();
		d.canRecord = true;
		d.playDVD();
		
		if(d.canRecord == true) {
			d.recordDVD();
		}
	}
}

}}}


= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수: 변수는 원시변수와 객체 레퍼런스로 나눌 수 있다. 둘 다 선언 시, 유형과 이름을 가져야 한다는 것은 같다. 원시 변수에는 정수, 부울, 부동소수점 수와 같은 기초적인 값(단순한 비트 패턴으로 나타낼 수 있는 값)이 들어간다. 객체 레퍼런스에는 객체에 대한 레퍼런스가 들어간다. 즉, 객체에 접근하는 방법을 알려주는 비트(포인터, 주소)가 들어있다. 그러나 그 레퍼런스 변수 안에 무엇이 들어있는지 알 수 없다.

 
*96p Dog* _수많은 개를 만들어 난장판 만들기_
{{{
class Dog {
	String name;
	public static void main(String[] args){
		
		Dog[] myDogs = new Dog[10000];
		
		int i=0;
		for(;i<myDogs.length;i++){
			myDogs[i] = new Dog();
		}
		
		int t=0;
		for(;t<myDogs.length;t++){
			myDogs[t].name = "Tongee" + t;
		}
		
		int x=0;
		while(x<myDogs.length){
			myDogs[x].bark();
			x++;
		}
	}

	public void bark() {
		System.out.println(name + "이(가) 왈!하고 짖습니다.");
	}
}

}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

A문제  

{{{
class Books {
	String title;
	String author;
}


class BooksTestDrive {
	public static void main(String[] args){
		Books[] myBooks = new Books[3];
		
		myBooks[0] = new Books();   /* myBooks배열에 Books 객체를 넣어줘야한다. */  
		myBooks[1] = new Books();
		myBooks[2] = new Books();
		
		myBooks[0].title = "The Grapes of Java";
		myBooks[1].title = "The Java Gatsby";
		myBooks[2].title = "The Java Cookbook";
		myBooks[0].author = "bob";
		myBooks[1].author = "sue";
		myBooks[2].author = "ian";
		
		int x = 0;
		while(x<3){
			System.out.println(myBooks[x].title);
			System.out.println(" by ");
			System.out.println(myBooks[x].author);
			x++;
		}
	}
}
}}}

B문제
{{{

class Hobbits {
	
	String name;
	
	public static void main(String[] args){
		
		Hobbits[] h = new Hobbits[3];
		int z = 0;
		
		while(z<3){  //배열 원소는 0,1,2번째까지 이므로 z<"3"으로 교정
		
			h[z] = new Hobbits();
			h[z].name = "bilbo";
			if(z==1){
				h[z].name = "frodo";
			}
			if(z==2){
				h[z].name = "sam";
			}
			System.out.print(h[z].name + " is a ");
			System.out.println("good Hobbit name");
			
			z++; //이 문장이 While문의 맨 앞에 있으면 z=0일 때는 처리되지 않는다.
		}
	}
}
}}} 
*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?: 밥! 
 * 문제가 된 부분은 어딘가요?: 켄트의 코드는 순환문에서 x가 0부터 9까지 증가하면서 계속 새로운 Contact 객체로 다시 받는다. 그러므로 밥처럼 10개의 객체를 갖지 못하고 하나만 갖게 되므로 잘못 되었다.


= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:인스턴스 변수를 private로 지정하고 접근 제어를 위해 public으로 지정된 게터와 세터를 만들어 인스턴스 변수를 부적절한 값으로 함부로 설정하지 못하게 방어막 같은 것을 쳐주는 것. 

 * 게터와 세터:보통 인스턴스 변수에 대해 어떤 것을 가져오고 설정하는 역할을 한다. 게터는 단지 그 게터가 가져오기로 되어있는 값을 리턴값 형태로 받아오기 위한 용도로만 쓰인다. 세터는 그 세터가 설정할 값을 인자로 받아서 인스턴스 변수를 그 값으로 설정하기 위한 용도로 쓰인다.

 * 인스턴스 변수 vs 지역 변수:인스턴스 변수는 클래스 내에서 선언된다. 메소드 내에서 선언되는 것은 아니다. 지역 변수는 메소드 내에서 선언되고, 사용하기 전에 반드시 초기화해야 한다. 지역 변수는 기본값이 없어서 초기화하기 전에 사용하려고 하면 컴파일 과정에서 오류가 나기 때문이다. 

 
*107p Dog* _실행_

{{{
class Dog {
	int size;
	String name;
	
	void bark() {
		if(size > 60){
			System.out.println("Wooof! Wooof!");
		}else if(size>14){
			System.out.println("Ruff! Ruff!");
		}else{
			System.out.println("Yip! Yip!");
		}
	}
}

class DogTestDrive {
	public static void main (String[] args){
		Dog one = new Dog();
		one.size = 70;
		Dog two = new Dog();
		two.size = 8;
		Dog three = new Dog();
		three.size = 35;
		
		one.bark();
		two.bark();
		three.bark();
	}

}
}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

A문제 : "42 84"로 출력.

B문제 
{{{
class Clock {
	String time;
	
	void setTime(String t){
		time = t;
	}
	
	String getTime() {  /*time의 유형은 String이므로 getTime의 반환형을 String으로 바꾼다.*/
		return time;
	}
}

class ClockTestDrive {
	public static void main(String[] args){
		
		Clock c = new Clock();
		
		c.setTime("1245");
		String tod = c.getTime();
		System.out.println("time: " + tod);
	}
}
}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
   최근의 소프트웨어 개발 방법론 분야에 새로 등장한 것으로써, 테스트 코드를 먼저 만들어보는 것 등 구성원들이 서로 조화롭게 쓸 수 있도록 계획된 일련의 규칙을 갖는 것을 말한다. 이것의 가장 큰 장점은 막판에 스펙이 변경되는 일이 있어도 고객이 원하는 것을 고객이 원하는 기한에 맞춰서 제공할 수 있다는 점이다.

*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{
public class SimpleDotCom {
	int[] locationCells;  //맞춰야 되는 셀.
	int numOfHits = 0;   //맞춘 것의 개수.
	
	public void setLocationCells(int[] locs){ //세터.
		locationCells = locs;
	}
	
	public String checkYourself(String stringGuess){/*틀렸는지 맞았는지 체크해주는 메소드.*/
		int guess = Integer.parseInt(stringGuess); /*String형인 stringGuess을 int형으로 변환하여 guess에 저장.*/
		String result = "miss"; //result의 초기값은 miss.
		for(int i=0; i<locationCells.length; i++){
			if(guess==locationCells[i]){
				result = "hit";  //추측한 게 맞춰야 되는 셀 중 있으면 hit이 result에 저장.
				numOfHits++;    //맞추면 맞춘 개수 +1됨.
				break;  //if문 밖으로 나오기.
			}
		}
		if(numOfHits == locationCells.length){
			result = "kill";    //다 맞추면 result에 kill이 저장된다.
		}
		System.out.println(result); /*하나도 못 맞춰면 miss, 한개라도 맞추면 hit, 다 맞추면 kill이 출력.*/
		return result; //result값으로 리턴.
	}
}

public class SimpleDotComTestDrive {
	public static void main (String[] args){
		SimpleDotCom dot = new SimpleDotCom();
		int[] locations = {2,3,4};  //맞춰야 되는 셀.
		dot.setLocationCells(locations);
		String userGuess = "2";  //추측값.
		String result = dot.checkYourself(userGuess);
	}
}
}}}
= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{



}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{
import java.util.*;

public class DotCom{
        private ArrayList<String> locationCells;
        private String name;

        public void setLocationCells(ArrayList loc){
                locationCells = loc;
        }

        public void setName(String n){
                name = n;
        }

        public String checkYourself(String userInput){
                String status = "miss";
                int index = locationCells.indexOf(userInput);
                if(index >= 0){
                        locationCells.remove(index);
                        if(locationCells.isEmpty()){
                                status = "kill";
                                System.out.println("Ouch! You sunk" + name + " :( ");
                        }else{
                                status = "hit";
                        }
                }       
                return status;
        }
}

import java.util.*;
import java.io.*;
public class DotComBust{

        private GameHelper helper = new GameHelper();
        private ArrayList<DotCom> dotComsList = new ArrayList<DotCom>();
        private int numOfGuesses = 0;

        private void setUpGame(){
                DotCom one = new DotCom();
                one.setName("Pets.com");
                DotCom two = new DotCom();
                two.setName("eToys.com");
                DotCom three = new DotCom();
                three.setName("Go2.com");
                
                dotComsList.add(one);
                dotComsList.add(two);
                dotComsList.add(three);

                System.out.println("Your goal is to sink three dot coms.");
                System.out.println("Pets.com, eToys.com, Go2.com");
                System.out.println("Try to sink them all in the fewest number of guesses");

                for(DotCom dotComToSet : dotComsList){
                        ArrayList<String> newLocation = helper.placeDotCom(3);
                        dotComToSet.setLocationCells(newLocation);
              				  }
     		   }

        private void startPlaying(){
                while(!dotComsList.isEmpty()){
                        String userGuess = helper.getUserInput("Enter a guess");
                        checkUserGuess(userGuess);
        			        }
                finishGame();
     		   }

        private void checkUserGuess(String userGuess){
                numOfGuesses++;
                String result = "miss";

                for(DotCom dotComToTest : dotComsList){
                        result = dotComToTest.checkYourself(userGuess);
                        if(result.equals("hit")){
                                break;
                     						   }
                        if(result.equals("kill")){
                                dotComsList.remove(dotComToTest);
                                break;
                     						   }
      				          }       
       	 System.out.println(result);
  		      }

        private void finishGame(){
                System.out.println("All Dot Coms are dead! Your stock is now worthless.");
                if(numOfGuesses <= 18){
                        System.out.println("It only took you" + numOfGuesses + "guesses.");
                        System.out.println("You got out before your options sank.");
                }else{
                        System.out.println("Took you long enough." + numOfGuesses + "guesses.");
                        System.out.println("Fish are dancing with your options.");
           				     }
     		   }

        public static void main(String[] args){
                DotComBust game = new DotComBust();
                game.setUpGame();
                game.startPlaying();
       		 }

		  public class GameHelper{

			private static final String alphabet = "abcdefg";
			private int gridLength = 7;
			private int gridSize = 49;
			private int[] grid = new int[gridSize];
			private int comCount = 0;

			public String getUserInput(String prompt){
				String inputLine = null;
				System.out.print(prompt + " ");
				try{
					BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
					inputLine = is.readLine();
					if(inputLine.length() == 0) return null;
				} catch(IOException e) {
					System.out.println("IOException: " + e);
				}
				return inputLine.toLowerCase();
			}
			
			public ArrayList<String> placeDotCom(int comSize){
				ArrayList<String> alphaCells = new ArrayList<String>();
				String temp = null;
				int[] coords = new int[comSize];
				int attempts = 0;
				boolean success = false;
				int location = 0;

				comCount++;
				int incr = 1;
				if((comCount % 2)== 1){
					incr = gridLength;
				}

				while(!success&attempts++ < 200){
					location = (int) (Math.random() * gridSize);
					//System.out.print("try" + location);
					int x = 0;
						success = true;
						while(success && x < comSize){
							if(grid[location] == 0){
								coords[x++] = location;
								location += incr;
								if(location >= gridSize){
									success = false;
								}
								if(x>0 & (location % gridLength == 0)){
									success = false;
								}
							} else{
								//System.out.print("used" + location);
								success = false;
							}
						}
				}

				int x = 0;
				int row = 0;
				int column = 0;
				//System.out.println("\n");
				while(x<comSize){
					grid[coords[x]] = 1;
					row = (int) (coords[x] / gridLength);
					column = coords[x] % gridLength;
					temp = String.valueOf(alphabet.charAt(column));

					alphaCells.add(temp.concat(Integer.toString(row)));
					x++;
					//System.out.print(" coord " + x + " = " + alphaCells.get(x-1));
				}				

					//System.out.println("\n?");

					return alphaCells;
			}
		}

}

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속: 하위클래스가 상위클래스의 멤버(인스턴스 변수, 메소드)를 물려받는 것. 하위 클래스가 상위클래스를 확장(extend)한다고 한다. 하위 클래스에서 별도의 메소드와 인스턴스 변수를 추가할 수도 있고, 상위클래스에서 상속받은 메소드를 오버라이드할 수도 있다.

 * 다형성: 여러 형태라는 뜻으로, B라는 클래스가 A라는 클래스를 상속했을 때, B를 B또는 A로 간주 할 수 있는 것.


*208p 클래스 계층 구조* _클래스로 구현_

{{{
public class Animal {
	char picture;
	char food;
	int hunger;
	int boundaries;
	int location;
	
	void makeNoise(){}
	void eat(){}
	void sleep(){}
	void roam(){}
}

public class Feline extends Animal{
	void roam(){}
}

public class Lion extends Feline{
	void makeNoise(){}
	void eat(){}
}

public class Tiger extends Feline{
	void makeNoise(){}
	void eat(){}
}

public class Cat extends Feline{
	void makeNoise(){}
	void eat(){}
}

public class Hippo extends Animal{
	void makeNoise(){}
	void eat(){}
}

public class Canine extends Animal{
	void roam(){}
}

public class Wolf extends Canine{
	void makeNoise(){}
	void eat(){}
}

public class Dog extends Canine{
	void makieNoise(){}
	void eat(){}
} 
}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드: 메소드의 인자와 리턴 형식은 외부에서 보기에 상위클래스에 있는 해당 메소드와 완벽하게 일치해야 한다.(인자는 똑같고, 리턴 유형은 호환 가능해야 한다.) 메소드 접근을 더 어렵게 만들면 안된다.
 
 * 오버로딩: 이름이 같고 인자 목록이 다른 메소드 두 개를 만드는 것. 오버로드하는 메소드에서는 상위클래스에서 정의한 다형성 계약을 이행하지 않아도 되기 때문에 메소드 오버로딩은 훨씬 더 융통성이 좋다고 할 수 있다. 리턴 유형이 달라도 된다. 그러나 리턴 유형만 바꿀 수는 없고, 인자 목록도 반드시 변경하여야 한다. 접근 단계 역시 마음대로 바꿀 수 있다.


*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
public class MonsterTestDrive {
	public static void main(String[] args){
		Monster[] ma = new Monster[3];
		ma[0] = new Vampire();
		ma[1] = new Dragon();
		ma[2] = new Monster();
		for(int x = 0 ; x<3;x++){
			ma[x].frighten(x);
		}
	}
} 

class Monster {
	boolean frighten(int d){
		System.out.println("arrrgh");
		return true;
	}
}
 
class Vampire extends Monster{
	boolean frighten(int f){ //인자는 똑같고, 리턴 유형은 호환 가능해야 한다. 
		System.out.println("a bite?");
		return false;
	}
} 

class Dragon extends Monster{
	boolean frighten(int degree){ //인자는 똑같고, 리턴 유형은 호환 가능해야 한다.
		System.out.println("breath fire");
		return true;
	}
} 
}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스: 100% 추상 클래스. 추상 메소드만을 정의. 자바의 인터페이스는 죽음의 다이아몬드 때문에 생기는 부작용없이 다중 상속의 다형적인 장점을 대부분 누릴 수 있게 해줌으로써 다중 상속 문제를 해결해준다. 모든 메소드를 추상메소드로 만들어 하위클래스에서 반드시 메소드를 구현해야하므로 실행 중에 JVM에서 상속받은 두 가지 버전 중에 어떤 것을 호출해야 할지 결정하지 못하는 문제가 생길리 없게 해준다. 


 * 다형성: 여러 형태라는 뜻으로, B라는 클래스가 A라는 클래스를 상속했을 때, B를 B또는 A로 간주 할 수 있는 것.

 * 추상 클래스: 아무도 그 클래스의 인스턴스를 만들 수 없는 클래스. 클래스 선언시 abstract를 붙여준다. 이 유형에 대해서 “new”키워드를 쓸 수 없어, 이 유형의 인스턴스를 만드는 것이 허용되지 않는다. 추상클래스는 확장하지 않으면 쓸 모 없다. 왜냐하면 실제 실행 중에 일을 처리하는 것은 그 추상 클래스의 하위클래스 인스턴스이기 때문이다.

 * 추상 메소드: 반드시 오버라이드 해야하는 메소드. 적당한 코드를 생각할 수 없는 메소드를 추상 메소드로 만든다. 따라서 중괄호 없이 세미콜론을 써서 선언을 끝낸다. 추상 메소드를 만들 때는 클래스도 반드시 추상 클래스로 만들어야 한다. 다형성을 활용하기 위해 “이 유형에 속하는 모든 하위클래스 유형에는 이 메소드가 있어야 한다”는 것을 지정하기 위해 필요한다. 추상 메소드를 구현하는 것은 메소드를 오버라이드 하는 것과 같다.
 
 * 다중 상속: 상위 클래스를 두 개 사용하는 접근법. 이것은 “죽음의 다이아몬드”라고 알려져 있는 문제를 발생시키므로 자바에서는 다중 상속을 쓸 수 없다.
 

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{
import javax.sound.midi.*;

public class MusicTest1 {
	public void play(){
		try{ 
			Sequencer sequencer = MidiSystem.getSequencer(); 
			//getSequencer메소드를 호출시, 예외가 발생할 수 있으므로 try안에 넣는다.
			System.out.println("Successfully got a sequencer");		
		} catch(MidiUnavailableException ex){ //예외 발생시, catch에 있는 내용이 실행된다. 
			System.out.println("Bummer");
		}
	}
	
	public static void main(String[] args){
		MusicTest1 mt = new MusicTest1();  
		mt.play();
	}
}
 
}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{
import javax.sound.midi.*; //미디 패키지 불러오기.

public class MiniMiniMusicApp { 
	public static void main(String[] args){ //메인 메소드.
		MiniMiniMusicApp mini = new MiniMiniMusicApp(); 
		mini.play();
	}
	
	public void play(){
		try{
			Sequencer player = MidiSystem.getSequencer(); //Sequencer 받기.
			player.open(); //Sequencer 열기.(자동으로 열리지 않는다.)
			
			Sequence seq = new Sequence(Sequence.PPQ, 4); //새로운 Sequence 만들기.
			
			Track track = seq.createTrack(); //Sequence에서 새로운 Track 가져오기.
			
			ShortMessage a = new ShortMessage(); //Message 만들기.
			a.setMessage(144,1,44,100); //그 메세지의 의미.('44번 음표를 연주하는 것을 시작.')
			MidiEvent noteOn = new MidiEvent(a,1); 
			//이 메세지의 내용(a)을 첫번째 박자(1번 비트)에서 가동시키도록 지정한 MidiEvent 생성.  
			track.add(noteOn); //생성된 MidiEvent를 track에 추가.
			
			ShortMessage b = new ShortMessage(); //Message 만들기.
			b.setMessage(128,1,44,100); //그 메세지의 의미.('연주 끝.')
			MidiEvent noteOff = new MidiEvent(b,16);
			track.add(noteOff);//track에 추가.
			
			player.setSequence(seq); //Sequence를 Sequencer에 넘겨주기.
			
			player.start(); //Sequencer 작동.
		
		} catch(Exception ex){
			ex.printStackTrace();
		}
	}
} 
}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{
import java.io.*;  
import javax.sound.midi.*;

public class MiniMusicCmdLine {
	public static void main(String[] args) throws IOException{
		MiniMusicCmdLine mini = new MiniMusicCmdLine();
		args = new String[2];

		System.out.print("악기 입력하세요: ");
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		args[0] = br.readLine(); //악기 입력받기.

		System.out.print("음 입력하세요: ");
		BufferedReader cr = new BufferedReader(new InputStreamReader(System.in));
		args[1] = cr.readLine(); //음 입력받기.

			int instrument = Integer.parseInt(args[0]);
			int note = Integer.parseInt(args[1]);
			mini.play(instrument, note);
		}
	
	public void play(int instrument, int note){ //악기와 음, 두 인자를 전달.
		try{
			
			Sequencer player = MidiSystem.getSequencer();
			player.open();
			Sequence seq = new Sequence(Sequence.PPQ, 4);
			Track track = seq.createTrack();
			
			MidiEvent event = null;
			
			ShortMessage first = new ShortMessage();
			first.setMessage(192,1,instrument,0);
			MidiEvent changeInstrument = new MidiEvent(first, 1);
			track.add(changeInstrument);
			
			ShortMessage a = new ShortMessage(); //Message 만들기.                         
			a.setMessage(144,1,44,12); //그 메세지의 의미.('44번 음표를 연주하는 것을 시작.')  
			MidiEvent noteOn = new MidiEvent(a,1);         
			//이 메세지의 내용(a)을 첫번째 박자(1번 비트)에서 가동시키도록 지정한 MidiEvent 생성.
			track.add(noteOn); //생성된 MidiEvent를 track에 추가.       
			
			ShortMessage b = new ShortMessage(); //Message 만들기.                        
			b.setMessage(128,1,44,100); //그 메세지의 의미.('연주 끝.')                       
			MidiEvent noteOff = new MidiEvent(b,16);                        
			track.add(noteOff);//track에 추가.                           
			
			player.setSequence(seq); //Sequence를 Sequencer에 넘겨주기.      
			
			player.start(); //Sequencer 작동.     
			
			} catch(Exception ex){
			ex.printStackTrace();             
			}

		}
	} 
}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{
import javax.swing.*;

public class SimpleGui1{  

	public static void main (String[] args){
		
		JFrame frame = new JFrame(); //프레임 만들기.
		JButton button = new JButton("click me."); //"click me."버튼 만들기.

		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //창을 닫았을 때 프로그램 종료.

		frame.getContentPane().add(button); //버튼을 프레임에 넣기.

		frame.setSize(300,300); //프레임의 크기 가로,세로 300픽셀.
		
		frame.setVisible(true); //화면에 표시되도록 하기.
	}	
}
}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{
import javax.swing.*;
import java.awt.event.*; //ActionListener와 ActionEvent가 들어있는 패키지를 import.

public class SimpleGui1B implements ActionListener{  //인터페이스 구현.
	JButton button; //버튼을 만든다.

	public static void main (String[] args){
		SimpleGui1B gui = new SimpleGui1B();
		gui.go();
	}

	public void go(){
		JFrame frame = new JFrame(); //프레임을 만든다.
		button = new JButton("click me"); //"click me"버튼 만들기.

		button.addActionListener(this); //버튼의 ActionEvent에 등록.

		frame.getContentPane().add(button); //버튼을 창 안으로 넣는다.
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//창을 닫았을 때 프로그램이 종료.
		frame.setSize(300,300); //크기 설정.
		frame.setVisible(true); //화면에 표시되도록 설정.
	}

	public void actionPerformed(ActionEvent event){ //실제 이벤트 처리 메소드.
		button.setText("I've been clicked!"); /*이벤트 일어났다는 것을 "I've been clicked"라고 띄우며 알려준다.*/ 
	}
}
}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}