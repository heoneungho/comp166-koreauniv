#summary 수업중 실습하는 내용을 올리게 되는 실습페이지입니다. 페이지의 내용은 각 학생에 의해서 관리됩니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_
{{{
public class BeerSong{
 public static void main(String[] args){
  int beerNum = 99;
  String word = "bottles";
 
  while(beerNum > 0){
    if(beerNum == 1){
     word = "bottle";    // beerNum가 1이 되면 단수형으로 쓴다.
    }
  System.out.println(beerNum + "" + word + "of beer on the wall");
  System.out.println(beerNum + "" + word + "of beer.");
  System.out.println("Take one down.");
  System.out.println("Pass it around.");
  beerNum = beerNum - 1;  // beerNum이 99부터 1씩 작아진다. 
                                               //순환문 돌아가는 동안 매번 위의 명령대로 출력된다. 
  if(beerNum == 0)
  {System.out.println("No more bottles of beer on the wall");}

//beerNum이 0이 되면 위의 문장이 출력 된다. 그리고 순환문에서 나간다. 
 //문제해결 : if문은 필요없다. (99~1) bottle(s) of beer on the wall 라는 문장이 두 번씩 불필요하게 반복되는 점 제거. 더불어 1병일 때 s 붙는 일도 없어진다.
  }
 }
}
}}}
*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_
 public class PhraseOMatic{
 public static void main(String[] args){

  String[] wordListOne = {"kenetic", "lose-lose", "famous"};
  String[] wordListTwo = {"enforced", "rough", "well-structured"};
  String[] wordListThree = {"procedure", "ability", "method"};

  int oneLength = wordListOne.length;
  int twoLength = wordListTwo.length;
  int threeLength = wordListThree.length;

  int rand1 = (int) (Math.random() * oneLength);
  int rand2 = (int) (Math.random() * twoLength);
  int rand3 = (int) (Math.random() * threeLength);

  String phrase = wordListOne[rand1]+" "+wordListTwo[rand2] +" "+ wordListThree[rand3];

  System.out.println("What we need is a " + phrase);
}
}

*52p 집중토론* _요약_

 * 자바 가상 머신: 프로그램을 실행시켜준다. 변수에 틀린 유형의 값이 들어가면 ClassCast Exception을 발생시킨다. 보안 관련 작업. 바이트코드가 만들어진 다음 바이트 코드가 실행되기 전까지 다른 누군가가 그것을 건드리지 않았는지 확인.

 * 컴파일러:파일을 준다. 문법이 맞았는지 틀렸는지 검사.변수에 틀린 유형의 데이터가 저장되는 것을 방지한다(데이터 유형 위반 사항 체크).  실행할 때 제대로 일어나면 안 되는 일을 방지. 접근 위반 방지. 발생할 수 있는 문제점의 대부분을 잡아줌.

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

A문제 

/*x가 1로 고정인 상태여서 while문의 조건은 충족시켜 while문 밖으로 나오지 않는다. 그리고 while문 속 if문의 조건에는 해당되지 않아 while문에서 아무 결과를 보이지 않으며 무한적으로 돈다. 그러므로 while문에 x를 1씩 증가시키는 것을 추가하여 while문 밖으로 나올 수 있게 한다.*/

class Exercise1b{
 public static void main(String [] args){
  int x =1;
  while(x < 10){
   if(x>3){
    System.out.println("big x");
   }
  x++;
 }
}

B문제 

/*메소드는 있는데 클래스가 없어서 문제다. 그러니 클래스를 만들면 된다.*/

class Peace{
public static void main(String[] args){
 int x = 5;
 while(x>1){
  x--;
  if(x<3){
	System.out.println("small x");
  }
 }
}
}
 
C문제

/* 메소드가 없다. 적어도 행동을 하는 while문은 메소드 안에 있어야 한다. */

class Exercise1b{

public static void main(String[] args){
 int x = 5;
 while(x>1){
	x--;
	if(x<3){
	 System.out.println("small x");
   	}
 }
}
}

= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체에서 아는 것. 객체를 부르는 다른 이름. 객체의 상태(데이터)를 나타내며 그 유형에 속하는 각 객체마다 값이 다름.
 * 메소드: 객체에서 하는 것(행동). 객체에서 할 수 있는 일. 
 * 클래스: 객체를 만들기 위한 용도일 뿐 객체가 아님. 객체를 만들기 위한 청사진. 가상머신에 그 유형의 객체를 만드는 방법을 알려는 역할.
 * 테스트용 클래스: 클래스를 테스트하기 위한 코드.
 

*68p Television* _채워넣기_

 * 인스턴스 변수:
 * 메소드:


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{

}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수:
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{

}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?:
 * 문제가 된 부분은 어딘가요?:

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:
 * 게터와 세터:
 * 인스턴스 변수 vs 지역 변수:
 
*107p Dog* _실행_

{{{

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:
 * 다형성:

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}