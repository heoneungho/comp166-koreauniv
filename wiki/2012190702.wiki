#summary 수업중 실습하는 내용을 올리게 되는 실습페이지입니다. 페이지의 내용은 각 학생에 의해서 관리됩니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_
{{{
public class BeerSong
{
    public static void main (String[] args)
    {
       int beerNum = 99; // 자! 너에게 맥주 99개를 주겠다.
       String word = "bottles"; // word에 bottles를 넣겠다.
    
       while(beerNum > 0 ) //맥주를 차례대로 낮춰가며 노래부름
       {
           
       System.out.println(beerNum + " " + word + " of beer on the wall"); // 지금있는 맥주갯수가 on the wall에 있다 ~
       System.out.println(beerNum + " " + word + " of beer."); // 중복
       System.out.println("Take one down."); // 테잌다운
       System.out.println("Pass it around."); //패시라운
       beerNum = beerNum - 1;

       if (beerNum > 0) // 술남은거
       {
            if(beerNum ==1)
            word = "bottle"; // 한개면 당연히 단수

            System.out.println(beerNum + " " + word + " of beer on the wall"); // 중간에 " " 는 단어사이에 공간을 만들기 위함이지.
        }

        else // 병이 없으면 ? 
       {
            System.out.println("No more bottles of beer on the wall"); // 요렇게
       }
       }
}}
}}}
*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_
{{{
public class PhraseOMatic
{
  public static void main(String[] args)
  {
     String[] wordListOne = {"JongHa", "Geun Young" , "Dong Hyeok", "Young Hyun", "Jung Gon"}; // 다 군지했노 ...

     String[] wordListTwo = {"Love", "Hit", "Hate", "Like", "Help"}; // 기본 단어를 적는다.

     String[] wordListThree = {"Gay" , "Billy", "IT Bank", "LOL", "IU"};
// 왜 이래 적었는지 모름 ... 
     int oneLength = wordListOne.length; //길이만큼 선언
     int twoLength = wordListTwo.length; // 마찬가지
     int threeLength = wordListThree.length; // ㅇㅇ

     int rand1 = (int) (Math.random()*oneLength); // Listone 에 있는 단어들을 list 숫자 배열한거 랜덤 뽑기!!
     int rand2 = (int) (Math.random()*twoLength); // 마찬가지
     int rand3 = (int) (Math.random()*threeLength); // ㅇㅇ

     String phrase = wordListOne[rand1] + " " + wordListTwo[rand2] + " " + wordListThree[rand3]; // 자 .. 이제 3개를 조합해보자

     System.out.println("What we need is a " + phrase); //phrase에 저장한 문장을 말해보자
   }
}
}}}
52p 집중토론* _요약_

 * 자바 가상 머신: 프로그램을 실행
 * 컴파일러: 실행할 때 절대로 일어나면 안 되는 일을 방지

*55p 컴파일러가 되어봅시다* _구현후 주석달기_
{{{
class Exerciselb
{
  public static void main(String [] args)
  { 
    int x = 1; // 자 ! x에 1을 넣어보자!
    
    while ( x < 10 ) // x 가 10미만일 때 1씩 더함
    {
       if( x > 3 ) // x가 3초과이면???
       System.out.println("big x"); // 출 to the 력
       x++; // 다했으면 1을 더해보자.
    }
  }
}
}}}
{{{
class Exerciselb
{
  public static void main(String [] args)
  {
    int x = 5; // 이번엔 x가 5라니..
    while(x>1)  // x가 1초과일 때 계속 1씩 뺌
    {
       if (x < 3) // x가 3미만이면??
          System.out.println("small x"); // 출 to the 력
       x--; // 다했으면 1을 빼보자
    }
  }
} //끝
}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체에서 자신에 대해 아는 것
 * 메소드: 객체에서 자신이 하는 것
 * 클래스: 객체를 만들기 위한 청사진
 * 테스트용 클래스: 새로운 클래스 유형의 객체에 들어있는 메소드와
                 변수를 테스트해보는 것
 

*68p Television* _채워넣기_

 * 인스턴스 변수: Volume, Channel
 * 메소드: UpVolume, DownVolume, UpChannel, DownChannel


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{
public class GuessGame {
	Player p1;
	Player p2;
	Player p3;
	Player p4;
	
	public void startGame()	{
		p1 = new Player();
		p2 = new Player();
		p3 = new Player();
		p4 = new Player();
		
		int guessp1 = 0;
		int guessp2 = 0;
		int guessp3 = 0;
		int guessp4 = 0;
		
		boolean p1isRight = false;
		boolean p2isRight = false;
		boolean p3isRight = false;
		boolean p4isRight = false;
		
		int targetNumber = (int)(Math.random()*10);
		
		System.out.println("0 이상 9 이하의 숫자를 맞춰보세요.");
		
		while(true)	{
			System.out.println("맞춰야 할 숫자는 " + targetNumber + "입니다.");
			
			p1.guess();
			p2.guess();
			p3.guess();
			p4.guess();
			
			guessp1 = p1.number;
			System.out.println("1번 선수가 찍은 숫자 : " + guessp1);
			
			guessp2 = p2.number;
			System.out.println("2번 선수가 찍은 숫자 : " + guessp2);
			
			guessp3 = p3.number;
			System.out.println("3번 선수가 찍은 숫자 : " + guessp3);
			
			guessp4 = p4.number;
			System.out.println("4번 선수가 찍은 숫자 : " + guessp4);
			
			if(guessp1 == targetNumber)	
				p1isRight = true;
			
			if(guessp2 == targetNumber)
				p2isRight = true;
			
			if(guessp3 == targetNumber)
				p3isRight = true;
			
			if(guessp4 == targetNumber)
				p4isRight = true;
			
			if(p1isRight | p2isRight | p3isRight | p4isRight)	{
				System.out.println("맞춘 선수가 있습니다.");
				
				System.out.println("1번 선수 : " + p1isRight);
				System.out.println("2번 선수 : " + p2isRight);
				System.out.println("3번 선수 : " + p3isRight);
				System.out.println("4번 선수 : " + p4isRight);
				
				System.out.println("게임 끝.");
		
				break;
			} else	{
				System.out.println("다시 시도해야 합니다.");
			}
		}
	}
}

class Player	{
	int number = 0;
	
	public void guess()	{
		number = (int)(Math.random()*10);
		
		System.out.println("찍은 숫자 : " + number);
	}
}

class GameLauncher	{
	
	public static void main(String[] args)	{
		GuessGame game = new GuessGame();
		
		game.startGame();
	}
}
}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
class TapeDeck
{
	boolean canRecord = false;

	void playTape() // 테이프 플레이 
	{
		System.out.println("tape playing"); // tape playing 출력
	}

	void recoredTape() // 테이프 녹음
	{
		System.out.println("tape recording"); // tape recording 출력
	{
}

class TapeDeckTestDrive
{
	public static void main(String [] args)
	{
		TapeDeck t = new TapeDeck(); //테이프 객체 생성
		t.canrecord = true; // record가 참
		t.playTape(); // 그래서 재생

		if(t.canRecord == true) // 플레이 없음 녹음
			t.recordTape(); // 녹 to the 음
	}
}



class DVDPlayer 
{
	boolean canRecord = false;
	
	void playDVD()
	{
		System.out.println("DVD playing");
	}
	
	void recordDVD()
	{
		System.out.println("DVD recording");
	}
}

class DVDPlayerTestDrive
{
	public static void main(String [] args)
	{
		DVDPlayer d = new DVDPlayer(); // DVD 객체 생성
		d.canRecord = true;
		d.playDVD(); // 재 to the 생
	
		if(d.canRecord == true)
			d.recordDVD(); // 실행할 것이 없음 녹음
	}
}

}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수: 원시 변수( 정수, 부울, 부동소수점 수와 같은 기초적인 값 - 단순한 비트 패턴으로 나타낼 수 있는 값 ) 
                         레퍼런스변수( 객체에 대한 레퍼선스가 들어감 )
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{
class Dog
{
	String name;
	public static void main(String [] args)
	{
		int n,i;
		Dog dog1 = new Dog();
		dog1.bark();
		dog1.name = "Bart";

			
		Dog[] mydogs = new dog[100];

		for(i=0;i<99;i++)
		{
			myDogs[i] = new Dog();
		}
		myDogs[99] = dog1;

		for(i=0;i<99;i++)
		{
			myDogs[i].name = "Bart" + i ;
		}
		
		myDogs[99] = "Bart" + n-1;

		System.out.println("마지막 개의 이름 :");	
		System.out.println("myDogs[99].name);
	
		int x = 0;
		
		while(x < myDogs.length)
		{
			myDog[x].bark();
			x++;
		}
	}

	public void bark()
	{
		System.out.println(name + "이(가) 왈! 하고 짖습니다.");
	}
	
	public void eat() { }
	public void chaseCat() { }
}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
class Books
{
	String title;
	String author;
}

class BooksTestDrive
{
	public static void main(String [] args)
	{
		Books [] myBookes = new Books[3]; //Books 객체 생성
		int x = 0;
		myBooks[0] = new Books();
		myBooks[1] = new Books();
		myBooks[2] = new Books();

		myBooks[0].title = "The Grapes of Java";
		myBooks[1].title = "The Java Gatsby";
		myBooks[2].title = "The Java Cookbook";
		myBooks[0].author = "bob";
		myBooks[1].author = "sue";
		myBooks[2].author = "ian";

		while(x<3) // 차례대로 책이름 저자 프린트
		{	
			System.out.println(myBooks[x].title);
			System.out.println(" by ");
			System.out.println(myBooks[x].author);
			x++;
		}
	}
}




class Hobbits
{
	
	String name;
	
	public static void main(String [] args)
	{
		Hobbits [] h = new Hobbits[3]; //Hobbits 객체 생성
		int z = 0;
		
		while(z<3) // 차례대로 is a good Hobbit name 프린트
		{
			h[z] = new Hobbits();
			h[z].name = "bilbo";
			if(z==1)
				h[z].name = "frodo";
			if(z==2)
				h[z].name = "sam";
		
			System.out.println(h[z].name + " is a ");
			System.out.println("good Hobbit name");
	                z++;
          	}
	}
}
}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?: 밥
 * 문제가 된 부분은 어딘가요?: 객체를 형성하지 않아서

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화: 모든 인스턴스 변수에 대해 세터 메소드를 만들고 다른 코드에서는 데이터를 절대 직접 접근할 수 없도록, 반드시 세터 메소드를 사용해야한다.
 * 게터와 세터:  게터(액세서) : 인스턴스 변수의 값 등을 가져옴
                            세터(뮤테이터): 인스턴스 변수의 값 등을 설정
 * 인스턴스 변수 vs 지역 변수: 지역 변수에는 기본값이 없다. 따라서 지역 변수를 초기화하기 전에 사용하려고 하면 컴파일 과정에서 오류
 
*107p Dog* _실행_

{{{
class Dog
{
        int size;
        String name;

        void bark()
        {
                if ( size > 60 )
                        System.out.println("Wooof! Wooof!");
                else if ( size > 14)
                        System.out.println("Ruff! Ruff!");
                else
                        System.out.println("Yip! Yip!");
        {
{

class DogTestDrive
{

        public static void main(String[] args)
        {
                Dog one = new Dog();
                one.size = 70;
                Dog two = new Dog();
                two.size = 8;
                Dog three = new Dog();
                three.size = 35;

                one.bark();
                two.bark();
                three.bark();
        }
}

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
class XCopy
{
        public static void main(String [] args)
        {
                int orig = 42; //orig 에 42를 넣어보자 !

                XCopy x = new XCopy(); //XCopy 란 변수를 만들어보자 !

                int y = x.go(orig); // y는 XCopy 변수로 만들고 42를 넣자 그리고 곱하기 2 !

                System.out.println(orig + " " + y);
        }

        int go(int arg)
        {

                arg = arg * 2;  // arg 를 2배하자 !

                return arg;
        }
}


class Clock
{
        String time;

        void setTime(String t) //시간설정을 해보자!
        {
                time = t;
        }

        String getTime()  // 시간을 보내버리자 ! 값으로
        {
                return time;
        }
}

class ClockTestDrive
{
        public static void main(String [] args)
        {
        Clock c = new Clock(); //Clock 변수를 만들어보자 !

        c.setTime("1245"); // time에 1245를 넣어보자 !!
        String tod = c.getTime(); // tod 넌 time 이걸로 정했다 !
        System.out.println("time: " + tod); // 시간을 tod 참고 출력!!
        }
}

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
소프트웨어 개발 방법. 프로그래머들이 정말 원하는 방법. 90년대 말에 등장, 여러 회사에서 다양한 규모의 회사에 사용됨. 스펙이 변경되어도 고객이 원하는 것을 고객이 원하는 기한에 맞춰서 제공할 수 있는 장점. 

*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{

public class SimpleDotComTestDrive	{

	public static void main(String[] args)	{
		SimpleDotCom dot= new SimpleDotCom();
		int[] locations = {2,3,4};
		dot.setLocationCells(locations);
		String userGuess = "2";
		String result = dot.checkYourself(userGuess);
	}
}

public class SimpleDotCom	{
	
	int[] locationCells;
	int numOfHits = 0;

	public void setLocationCells (int[] locs)	{
		locationCells = locs;
	}

	public String checkYourself (String stringGuess)	{
		int guess = Integer.parseInt(stringGuess); // string 변수를 int형으로
		String result = "miss";
		for(int i=0; i < locationCells.length; i++)	{
			if(guess == locationCells[i])	{
				result = "hit";
				numOfHits++;
				break;
			}
		}
	
		if (numOfHits == locationCells.length)	{
			result = "kill";
		}
	
		System.out.println(result);
		
		return result;
	}
}
                                           
}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =
 나~중에
*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{
class SimpleDotComTestDrive      {
	public static void main(String[] args)  {
		SimpleDotCom dot= new SimpleDotCom(); //SimpleDotcom 을 참조하는 변수만듬
		int[] locations = {2,3,4}; // location[2,3,4]의 배열 선언
		dot.setLocationCells(locations); // setLocationCells을 참조
		String userGuess = "2";
		String result = dot.checkYourself(userGuess); //checkYourSelf로 보내 결과 출력
		}
	}

public class SimpleDotCom       {
	int[] locationCells; 
	int numOfHits = 0;
	int[] locationCheck; //다른 배열 선언
	
	public void setLocationCells (int[] locs)       {
		locationCells = locs;
		}  
	public String checkYourself (String stringGuess)        {
		int guess = Integer.parseInt(stringGuess); // string 변수를 int형으로 
		String result = "miss";
		for(int i=0; i < locationCells.length; i++)		{
			if(locationCheck[i] == locationCells[i])	{ //check를 이용 전에  썼던 답이면 for 문을 나옴 ㅋ
				break;
			}
			if(guess == locationCells[i])   {
				result = "hit";
				locationCells[i] = locationCheck[i]; // 맞추면 Check에 이 값을 대입 중복방지
				numOfHits++;
				break;
				}
			}
		if (numOfHits == locationCells.length)  {
			result = "kill";
			}
		System.out.println(result);
		return result;
	}
	       
}

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{
class SimpleDotComTestDrive      {
	public static void main(String[] args)  {
		SimpleDotCom dot= new SimpleDotCom();
		int[] locations = {2,3,4};
		dot.setLocationCells(locations);
		String userGuess = "2";
		String result = dot.checkYourself(userGuess);
		}
	}

public class SimpleDotCom       {
	int[] locationCells;
	int numOfHits = 0;
	
	public void setLocationCells (int[] locs)       {
		locationCells = locs;
		}  
	public String checkYourself (String stringGuess)        {
		int guess = Integer.parseInt(stringGuess); // string 변수를 int형으로 
		String result = "miss";
		for(int i=0; i < locationCells.length; i++)		{                        
			if(guess == locationCells[i])   {
				result = "hit";
				numOfHits++;
				locationCells[i] = -1; // locationCells[i]의 배열에 -1 을 넣어 숫자를 넣더라도 -1이므로 틀리게 나옴
				break;
				}
			}
		if (numOfHits == locationCells.length)  {
			result = "kill";
			}
		System.out.println(result);
		return result;
	}
	       
}

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{
import java.util.ArrayList;

class SimpleDotComTestDrive      {
	public static void main(String[] args)  {
		SimpleDotCom dot= new SimpleDotCom();
		int[] locations = {2,3,4};
		dot.setLocationCells(locations);
		String userGuess = "2";
		String result = dot.checkYourself(userGuess);
		}
	}


public class DotCom	{
	private ArrayList<String> locationCells;
	
	public void setLocationCells(ArrayList<String> loc)	{
		locationCells = loc;
	}
	
	public String checkYourself(String userInput)	{
		String result = "miss";
		
		int index = locationCells.indexOf(userInput); //사용자가 추측한 위치가 들어있는지 확인. 있으면 인덱스 번호 없으면 -1
		
		if (index >= 0)	{
			locationCells.remove(index);
			
			if(locationCells.isEmpty())	{ //목록이 비었다는 것은 닷컴이 죽었다는것을 알 수 있다.
				result = "kill";
			}	else	{
				result = "hit";
			}
		}
		return result;
	}
}
}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{
import java.util.*;

public class DotCom	{
	private ArrayList<String> locationCells;
	private String name;

	public void setLocationCells(ArrayList loc)	{
		locationCells = loc;
	}

	public void setName(String n)	{
		name = n;
	}

	public String checkYourself(String userInput)	{
		String status = "miss";
		int index = locationCells.indexOf(userInput); //어레이리스트에 없으면 -1 .... 확인!
		if(index >= 0)	{
			locationCells.remove(index); // 리스트의 remove를 써서 삭제 
			if(locationCells.isEmpty())	{
				status = "kill";
				System.out.println("Ouch You sunk " + name + "	:	( ");  // 닷컴이 맞춤 ㅠ
			}	else	{
				status = "hit";
			}
		}
		return status; // miss hit kill 중 결과 빠샤!!

	}
}
}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속: 하위클래스가 상위클래스의 멤버를 물려받는 것. ex.)인스턴스 변수, 메소드
 * 다형성: 상위클래스 형식이 들어갈 수 있는 모든 자리에 해당 상위클래스와 임의 하위클래스에 속하는 객체를 마음대로 사용가능

*208p 클래스 계층 구조* _클래스로 구현_

{{{
public class Animal	{
	void makeNoise();
	void eat();
	void sleep();
	void roma();
}

public class Feline extends Animal	{
	void roam();
}

public class Hippo extends Animal	{
	void makeNoise();
	void eat();
}

public class Canine extends Animal	{
	void roam();
}

public class Lion extends Feline	{
	void makeNoise();
	void eat();
}

public class Tiger extends Feline	{
	void makeNoise();
	void eat();
}

public class Cat extends Feline		{
	void makeNoise();
	void eat();

public class Wolf extends Canine	{
	void makeNoise();
	void eat();
}

public class Dog extends Canine		{
	void makeNoise();	
	void eat();
}

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드: 이름만 같을 뿐 서로 다른 메소드
 * 오버로딩:  이름이 같고 인자 목록이 다른 메소드 두 개를 만드는 것

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
public class MonsterTestDrive	{
	public static void main(String[] args)	{
		Monster [] ma = new Monster[3]; //ma 리스트 생성
		ma[0] = new Vampire();
		ma[1] = new Dragon();
		ma[2] = new Moster();
		for(int x=0; x<3; x++)	
			ma[x].frighten(x);
	}
}

class Monster	{  //몬스터 클래스 생성
	boolean frighten(int z)	{
		System.out.println("arrrgh");
		return true;
	}
}

class Vampire extends Monster	{	//몬스터의 하위 클래스 뱀파이어 생성
	boolean frighten(byte b)	{
		System.out.println("a bite?");
		return true;
	}
}

class Dragon extends Monster	{	//몬스터의 하위 클래스 드래곤 생성
	boolean frighten(int degree)	{
		System.out.println("breath fire");
		return true;
	}
}
}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스: 100% 추상 클래스
 * 다형성: 상위클래스로 선언된 레퍼런스를 이용하여 하위 클래스 객체 차모
 * 추상 클래스: 인스턴스를 만들 수 없는 클래스 //반드시 확장해야 하는 클래스
 * 추상 메소드: 반드시 오버라이드를 해야하는 메소드
 * 다중 상속: 상위 클래스를 2개 사용

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수: 지역변수 인스턴스변수
 * 스택에서의 변수: 지역 변수
 * 생성자: 객체를 실제로 사용하기 전에 그 객체를 쓰는 데 필요한 작업을 처리
 * 널 레퍼런스: 레퍼런스가 가리키는 것이 없다!!
 
*298p 집중토론* _요약_

 * 인스턴스 변수: 객체와 힙에 저장. 객체의 상태 저장
 * 지역 변수: 메소드에 있는 알고리즘을 작동시킬려면 메소드에 반드시 필요

*302p 5분 미스터리* _구현후 주석달기_

{{{
import java.util.*;

class V2Radiator	{
	V2Radiator (ArrayList list)	{
		for(int x=0; x<5; x++)
			list.add(new SimUnit("V2Radiator"));//SimUnit 참고 "V2Radiator" 리스트 생성
	}
}

class V3Radiator extends V2Radiator	{
	V3Radiator (ArrayList lglist)	{
		super(lglist);
		for(int g=0; g<10; g++)
			lglist.add(new SimUnit("V3Radiator"));
	} //상위 클래스를 참조하여 SimUnit참고 "V3Radiator"리스트 생성
}

class RetentionBot	{
	RetentionBot(ArrayList rlist)	{
		rlist.add(new SimUnit("Retention"));
	} //SimUnit 참조 "Retention"리스트 생성
{

public class TestLifeSupportSim	{
	public static void main(String[] args)	{
		ArrayList aList = new ArrayList();
		V2Radiator v2 = new V2Radiator(aList);
		V3Radiator v3 = new V3Radiator(aList);
		for(int z=0; z<20; z++)
			RetentionBot ret = new RetentionBot(aList);
	}
}

class SimUnit	{
	String botType;
        int t=0;
	SimUnit(String type)	{
		botType = true;
	}
	int powerUse()	{
		if("Retention".equals(botType))	{
			return 2;
		}	else	{
			return 4;
		}
	}
        t++;
        System.out.println(t); //출력될 때 마다 20씩 더해서 전기 확인
}
}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드: 클래스의 인스턴스없이 메소드를 실행할 수 있다.
 * 정적 메소드를 선언하는 방법: static을 붙여주자
 * static final: final로 지정된 변수는 절대 그 값을 바꾸는 것이 불가능
 * 널 레퍼런스: 초기화
 * 오토 박싱: 원시값과 객체 사이의 경계를 없앤다
 * 정적 임포트: 정적 클래스, 정적 변수, enum 값 등을 사용할 때 정적 임포트를 활용해서 타이핑을 적게 해보자!!

*339p Calendar* _구현후 주석달기_

{{{
public Class Calendar	{
	public static void main(String[] args)	{
		Calendar c = Calendar.getInstance();
		c.set(2012,12,18,12,40); //지금 시간으로 맞춰보자
		long day1 = c.getTimeInMillis(); //시간을 밀리초로 
		day += 1000 * 60 * 60;
		c.setTimeInMillis(day1); // 한 시가에 해당하는 밀리초만큼의 시간을 더하고 시각을 갱신
		System.out.println("new hour " + c.get(c.HOUR_OF_DAY));
		c.add(c.DATE, 35); //35일을 더함
		System.out.println("add 35 days " + c.getTime());
		c.roll(c.DATE, 35); //35일 뒤로 넘김 , 달은 넘어가지 않음.
		System.out.println("roll 35 days " + c.getTime());
		c.set(c.DATE, 1); //날짜를 1로 설정
		System.out.println("set to 1" + c.getTime());
	}
}
}}}

*342p 집중토론* _요약_

 * 인스턴스 변수: ?? 설명이 없음 ...;;;
 * 지역 변수: 새로 만들 필요 없이 메모리 절약 + 편리함!!와우!

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
class StaticSuper()	{ //생성자 생성

	static	{
		System.out.println("super static block");
	}

	StaticSuper	{
		System.out.println(
			"super constructor");
	}
}

public class StatifcTests extends StaticSuper	{
	static int rand;

	static	{
		rand = (int) (Math.random()*6); //랜덤 변수 생성 		        System.out.println("static block" + rand);
	}

	StaticTests()	{
		System.out.println("constructor");
	}

	public static void main(String[] args)	{
		System.out.println("in main");
		StaticTest st = new StaticTests(); // st변수 생성
	}
}
}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{
public class TryCatch	{
	public void takeRise() throws BadException	{ // BadException 이 던질 수있다는것을 외보에 알림
		if(abandonAllHope)	{
			throw new BadException(); //새로운 Exception 객체
		}
	}

	public void vrossFingers()	{
		try	{
			anObject.takeRisk();
			} catch (BadException ex)	{
			System.out.println("Aaargh!");
			ex.printStackTrace(); //스택 트레이스 출력
		}
	}
}
}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{
import javax.sound.midi.*;	//미디패키지 불러오기

public class MiniMiniMusicApp	{
	public static void main(String[] args)	{
		MiniMiniMusicApp mini = new MiniMiniMusicApp();
		mini.play();
	}

	public void play()	{
		try	{
			Sequencer player = MidiSystem.getSequencer(); //sequencer 를 받아서 열기
			player.open();

			Sequencer seq = new Sequence(Sequence.PPQ, 4);

			Track track = seq.createTrack(); //sequencer 에 트랙 요청

			ShortMessage a = new ShortMessage();
			a.setMessage(144, 1, 44, 100);
			MidiEvent noteOn = new MidiEvent(a,1);
			track.add(noteOn);

			ShortMessage b = new ShortMessage();
			a.setMessage(128, 1, 44, 100);
			MidiEvent noteOff = new MidiEvent(b, 16);
			track.add(noteOff); // 트랙에 이벤트 넣기

			player.setSequence(seq);
	
			player.start(); // 플레이 !

		}	catch (Exception ex)	{
				ex.printStackTrace();
		}
	}
}
}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{
import javax.sound.midi.*;	//미디패키지 불러오기

public class MiniMusicCmdeLine()	{
	public static void main(String[] args)	{
		MiniMusicCmdLine mini = new MiniMusicCmdLine();
		if(args.length < 2)
			System.out.println("악기와 음 높이를 지정하는 인자를 입력하세요.");
		else	{
			int instrument = Integer.parseInt(args[0]);
			int note = Integer.parseInt(args[1]);
			mini.play(instrument, note);
		}
	}

	public void play(int instrument, int note)	{
		try	{
			Sequencer player = MidiSystem.getSequencer(); //sequencer를 받아서 연다
			player.open();
			Sequence seq = new Sequence(Sequence.PPQ, 4);
			Track track = seq.createTrack();
		
			MidiEvent event = null;
		
			ShortMessage first = new ShortMessage(); //악기 바꾸기 이벤트!
			first.setMessage(192, 1, instrument, 0);
			MidiEvent changeInstrument = new MidiEvent(first, 1);
			track.add(changeInstrument);

			ShortMessage a = new ShortMessage(); //켜기 이벤트!!
			a.setMessage(144, 1, note, 100);
			MidiEvent noteOn = new MidiEvent(a, 1);
			track.add(noteOn);

			ShortMessage b = new ShortMessage(); //끄기 이벤트!!
			b.setMessage(128, 1, note, 100);
			MidiEvent noteOff = new MidiEvent(b, 16);
			track.add(noteOff);
			player.setSequence(seq);
			player.start();
		}	catch (Exception ex)	{ex.printStackTrace();}
	}
}
}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{
import javax.swing.*;

public class SimpleGuil	{
	public static void main(String[] args)	{
		JFrame frame = new JFrame(); //프레임을 만들어보자
		JButton button = new JButton(); //버튼을 만들어보자

		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //끄기 설정
		frame.getContentPane().add(button); // 버튼추가
		frame.setSize(300,300); // 사이즈 설정
		frame.setVisible(true); //보이는게 사실임?? 사실임!!
	}

}
}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{
import javax.swing.*;
import java.awt.event.*; //event쓰기 위해 필요행!

public class SimpleGuilB implements ActionListener	{
	JButton button;

	public static void main(String[] args)	{
		SimpleGuilB gui = new SimpleGuilB();
		gui.go;
	}

	public void go()	{
		JFrame frame = new JFrame();
		button = new JButton("click me");
		
		button.addActionListener(this); //클릭하면 이벤트로 ㄱㄱ
		
		frame.getContentPane().add(button); //버튼추가
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //끄기 추가
		frame.setSize(300,300); // 사이즈 설정
		frame.setVisible(true); // 보인다!
	}

	public void actionPerformed (ActionEvent event)	{
		button.setText("I've been clicked!"); //이벤트설정
	}
}
}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class SimpleGui3C implements ActionListener	{
	JFrame frame;

	public static void main(String[] args)	{
		SimpleGui3C gui = new SimpleGui3c();
		gui.go;
	}

	public void go()	{
		frame = new JFrame();
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //끄기 기능

		JButton button = new JButton("Change colors"); //버튼에 글씨 적고 추가
		button.addActionListener(this);

		MyDrawPanel drawPanel = new MyDrawPanel();
	
		frame.getContentPane().add(BorderLayout.SOUTH, button); // button 추가
		frame.getContentPane().add(BorderLayout.CENTER, drawPanel); //drawPanel 추가
		frame.setSize(300,300);
		frame.setVisible(true);
	}

	public void actionPerformed(ActionEvent event)	{
		frame.repaint();
	}
}

class MyDrawPanel extends JPanel {
	public void paintComponent(Graphics g)	{
		Graphics2D g2d = (Graphics2D) g;

		int red = (int)(Math.random()*256);
		int green = (int)(Math.random()*256);
		int blue = (int)(Math.random()*256);
		Color startColor = new Color(red, green, blue); // 시작색 랜덤설정

		
		int red = (int)(Math.random()*256);
		int green = (int)(Math.random()*256);
		int blue = (int)(Math.random()*256);
		Color endColor = new Color(red, green, blue); //끝색 랜덤설정

		GradientPaint gradient = new GradientPaint(70,70,startColor,150,150,endColor); //원에 색추가
		g2d.setPaint(gradient);
		g2d.fillOval(70,70,100,100);
	}
}
}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{
public class TwoButtons	{
	JFrame frame;
	JLabel label;

	public static void main(String[] args)	{
		TwoButtons gui = new TwoButtons();
		gui.go();
	}

	public void go()	{
		frame = new JFrame();
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //끄기 설정
		
		JButton labelButton = new JButton("Change Label");
		labelButton.addActionListener(new LabelListener()); // Change Label적힌 버튼 생성후 이벤트로 연결
		
		JButton colorButton = new JButton("Change Circle"); // Change Circle적힌 버튼 생성후 이벤트로 연결
		colorButton.addActionListener(new ColorListener());

		label = new JLabel("I'm a label");
		MyDrawPanel drawPanel = new MyDrawPanel();
		
		frame.getContentPane().add(BorderLayout.SOUTH, colorButton);
		frame.getContentPane().add(BorderLayout.CENTER, drawPanel);
		frame.getContentPane().add(BorderLayout.EAST, labelButton);
		frame.getContentPane().add(BorderLayout.WEST, label); //버튼의 위치설정
		
		frame.setSize(300,300);
		frame.setVisible(true);
	}

	class LabelListener implements ActionListener	{ //label 이벤트
		public void actionPerformed (ActionEvent event)	{
			label.setText("Ouch!");
		}	
	}

	class ColorListener implements ActionListener	{ // color 이벤트
		public void actionPerformed (ActionEvent event)	{
			frame.repaint();
		}
	}
}
}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{
import javax.swing.*;
import java.awt.*;

public class SimpleAnimation	{
	int x = 70;
	int y = 70;

	public static void main(String[] args)	{
		SimpleAnimation gui = new SimpleAnimation();
		gui.go();
	}

	public void go()	{
		JFrame frame = new JFrame();
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	
		MyDrawPanel drawPanel = new MyDrawPanel();

		frame.getContentPane().add(drawPanel);
		frame.setSize(300, 300);
		frame.setVisible(true);
	
		for(int i =0; i<130; i++)	{	//애니매이션 만들기 !!  130번 반복!!
			x++;
			y++; //좌표 더해서 움직이는 효과

			drawPanel.repaint();	//repaint 해서 흔적 x
			
			try	{
				Thread.sleep(50); // 움직이는 속도설정
			}	catch(Exception ex)	{	}
		}
	}

	class MyDrawPanel extends JPanel	{
		public void paintComponent(Graphics g)	{
			g.setColor(Color.green); // 색상 초록!
			g.fillOval(x,y,40,40); // 위치 설정 크기 설정
		}
	}
}
}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{
import javax.sound.midi.*;
import java.io.*;
import javax.swing.*;
import java.awt.*;

public class MiniMusicPlayer3	{
	static JFrame f = new JFrame("My First Music Video"); //프레임 생성
	static MyDrawPanel m1;
	
	public static void main(String[] args)	{
		MiniMusicPlayer3 mini = new MiniMusicPlayer3();
	}

	public void setUpGui()	{ // 설정 크기 등
		m1 = new MyDrawPanel();
		f.setContentPane(m1);
		f.setBounds(30,30,300,300);
		f.setVisible(true);
	}

	public void go()	{
		setUpGui();

		try	{
			Sequencer sequencer = MidiSystem.getSequencer(); 
			sequencer.open(); //시퀀서 만들고 열기
			sequencer.addControllerEventListener(m1. new int[] {127}); 
			Sequence seq = new Sequence(Sequence.PPQ, 4); // 트랙 만들기
			Track track = seq.createTrack();

			int r = 0;
			for(int i = 0; i<60; i+=4)	{ // 음이 올라간다!!
				r = (int)((Math.random()*50)+1);
				track.add(makeEvent(144,1,r,100,i);
				track.add(makeEvent(176,1,127,0,i);
				track.add(makeEvent(128,1,r,100,i+2);
			}
	
			sequencer.setSequence(seq);
			sequencer.start();
			sequencer.setTempoInBPM(120); // 시작!
		}	catch	(Exception ex)	{ex.printStackTrace();	}
	}
	
	public MidiEvent makeEvent(int comd, int chan, int one, int two, int tick)	{
		MidiEvent event = null;
		try	{
			ShortMessage a = new ShortMessage();
			a.setMessage(comd, chan, one, two);
			event = new MidiEvent(a, tick); //매개변수를 써서 메시지 이벤트 생성

		} catch(Exception e)	{ }
		return event;
	}

	class MyDrawPanel extends JPanel implements ControllerEventListener	{
		boolean msg = false;

		public void controlChange(ShortMessage event)	{
			msg = true;
			repaint(); //이벤트 받았으므로 true 후 그린다
		}

		public void paintComponent (Graphics g)	{ //무작위 색상그리기
			if(msg)	{
				Graphics2D g2 = (Graphics2D) g;
				
				int r = (int)(Math.random()*250);
				int gr = (int)(Math.random()*250);
				int b = (int)(Math.random()*250);

				g.setColor(new Color(r,gr,b);
		
				int ht = (int)((Math.random()*120)+10);
				int width = (int)((Math.random()*120)+10);

				int x = (int)((Math.random()*40)+10);
				int y = (int)((Math.random()*40)+10);

				g.fillRect(x, y, ht, width);
				msg = false;
			}
		}
	}
}
}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{
import java.awt.*;
import javax.swing.*;
import javax.sound.midi.*;
import java.util.*;
import java.awt.event.*;

public class BeatBox	{
	JPanel mainPanel;
	ArrayList<JCheckBox> checkboxList; //체크상자를 리스트로 !!
	Sequencer sequencer;
	Sequence sequence;
	Track track;
	JFrame theFrame;

	String[] instrumentNames = {"Bass Drum", "Closed Hi-Hat", "Open Hi-Hat", "Acoustic Snare", "Crash Cymbal", "Hand Clap", "High Tom", "Hi Bongo", "Maracas", "Whistle", "Low Conga", "Cowbell", "Vibraslap", "Low-mid Tom", "High Agogo", "Open Hi Conga"};
	int[] instruments = {35,42,46,38,49,39,50,60,70,72,64,56,58,47,67,63};
	// 종류와 배열 저장
	public static void main(String[] args)	{
		new BeatBox().buldGUI();
	}

	public void buildGUI()	{
		theFrame = new JFrame("Cyber BeatBox");
		theFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		BorderLayout layout = new BorderLayout();
		JPanel background = new JPanel(layout);
		background.setBorder(BorderFactory.createEmptyBorder(10,10,10,10)); // 구성요소가 들어가는 자리에 빈공간

		checkboxList = new ArrayList<JCheckBox>();
		Box buttonBox = new Box(BoxLayout.Y_AXIS);
		
		JButton start = new JButton("Start");
		start.addActionListener(new MyStartListener());
		buttonBox.add(start);
	
		JButton stop = new JButton("Stop");
		stop.addActionListener(new MyStopListener());
		buttonBox.add(stop);

		JButton upTempo = new JButton("Tempo up");
		upTempo.addActionListener(new MyUpTempoListener());
		buttonBox.add(upTempo);

		JButton downTempo = new JButton("Tempo down");
		downTempo.addActionListener(new MyDownTempoListener());
		buttonBox.add(downTempo);

		Box nameBox = new Box(BoxLayout.Y_AXIS);
		for(int i = 0; i < 16; i++)	
			nameBox.add(new Label(instrumentNames[i]));
		
		background.add(BorderLayout.EAST, buttonBox);
		background.add(BorderLayout.WEST, buttonBox);

		theFrame.getContentPane().add(background);

		GridLayout grid = new GridLayout(16,16);
		grid.setVgap(1);
		grid.setHgap(2);
		mainPanel = new Jpanel(grid);
		background.add(BorderLayout.CENTER. mainPanel);

		for(int i=0; i<256; i++)	{
			JCheckBox c = new JCheckBox();
			c.setSelected(false);
			checkboxList.add(c);
			mainPanel.add(c);
		} // 체크상자를 만들고 모든값을 false로 설정, 리스와 GUI패널에 추가

		setUpMidi();

		theFrame.setBounds(50,50,300,300);
		theFrame.pack();
		theFrame.setVisible(true);
	}

	public void setUpMidi()	{
		try	{
			sequencer = MidiSystem.getSequencer();
			sequencer.open();
			sequence = new Sequence(Sequence.PPQ, 4);
			track = sequence.createTrack();
			sequencer.setTempoInBPM(120);
		}	catch(Exception e)	{e.printStackTrace();}
	}

	public void buildTrackAndStart()	{
		int[] trackList = null;
		
		sequence.deleteTrack(track);
		track = sequence.createTrack(); //기존 트랙제거 후 새로운 트랙

		for(int i = 0; i<16; i++)	{
			trackList = new int[16];
			
			int key = instruments[i];
			for(int j = 0; j<16; j++)	{
				JCheckBox jc = checkboxlist.get(j+(16*i));
				if(jc.isSelected())	{
					trackList[j] = key;
				} else {
					trackList[j] = 0;
				}
			}
		
		makeTracks(trackList); // 16가지 악기의 이벤트를 만들고 트랙에 추가
		track.add(makeEvent(176,1,127,0,16));
		}

		track.add(makeEvent(192,9,1,0,15));
		try {
			sequencer.setSequence(sequence);
			sequencer.setLoopCount(sequencer.LOOP_CONTINUOUSLY);
			sequencer.start();
			sequencer.setTempoInBPM(120); // 연주!!!!!!!!!!!!!!!
		} catch (Exception e) {e.printStackTrace();}
	}

	public class MyStartListener implements ActionListener	{
		public void actionPerformed(ActionEvent a)	{
			buldTrackAndStart();
		}
	}

	public class MyStopListener implements ActionListener	{
		public void actionPerformed (ActionEvent e)	{
			float tempoFactor = sequencer.getTempoFactor();
			sequencer.setTempoFactor((float)(tempoFactor *.97));
		}
	}

	public void makeTracks(int[] list)	{
		for(int i = 0; i < 16; i++)	{
			int key = list[i];
		
		if(key != 0)	{
			track.add(makeEvent(144,9,key,100,i));
			track.add(makeEvent(128,9,key,100,i+1)); //Note on/off 이벤트를 만들고 트랙에 추가
		}
	}
	}

	public MidiEvent makeEvent (int comd, int chan, int one, int two, int tick)	{
		MidiEvent event = null;
		try	{
			ShortMessage a = new ShortMessage();
			a.setMessage(comd, chan, one, two);
			event = new MidiEvent(a, tick);
	
		} catch(Exception e) {e.printStackTrace(); }
		return event;
	}
}
}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{
import java.awt.*;
import javax.swing.*;
import javax.sound.midi.*;
import java.util.*;
import java.awt.event.*;

public class BeatBox	{
	JPanel mainPanel;
	ArrayList<JCheckBox> checkboxList; //체크상자를 리스트로 !!
	Sequencer sequencer;
	Sequence sequence;
	Track track;
	JFrame theFrame;

	String[] instrumentNames = {"Bass Drum", "Closed Hi-Hat", "Open Hi-Hat", "Acoustic Snare", "Crash Cymbal", "Hand Clap", "High Tom", "Hi Bongo", "Maracas", "Whistle", "Low Conga", "Cowbell", "Vibraslap", "Low-mid Tom", "High Agogo", "Open Hi Conga"};
	int[] instruments = {35,42,46,38,49,39,50,60,70,72,64,56,58,47,67,63};
	// 종류와 배열 저장
	public static void main(String[] args)	{
		new BeatBox().buldGUI();
	}

	public void buildGUI()	{
		theFrame = new JFrame("Cyber BeatBox");
		theFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		BorderLayout layout = new BorderLayout();
		JPanel background = new JPanel(layout);
		background.setBorder(BorderFactory.createEmptyBorder(10,10,10,10)); // 구성요소가 들어가는 자리에 빈공간

		checkboxList = new ArrayList<JCheckBox>();
		Box buttonBox = new Box(BoxLayout.Y_AXIS);
		
		JButton start = new JButton("Start");
		start.addActionListener(new MyStartListener());
		buttonBox.add(start);
	
		JButton stop = new JButton("Stop");
		stop.addActionListener(new MyStopListener());
		buttonBox.add(stop);

		JButton upTempo = new JButton("Tempo up");
		upTempo.addActionListener(new MyUpTempoListener());
		buttonBox.add(upTempo);

		JButton downTempo = new JButton("Tempo down");
		downTempo.addActionListener(new MyDownTempoListener());
		buttonBox.add(downTempo);

		Box nameBox = new Box(BoxLayout.Y_AXIS);
		for(int i = 0; i < 16; i++)	
			nameBox.add(new Label(instrumentNames[i]));
		
		background.add(BorderLayout.EAST, buttonBox);
		background.add(BorderLayout.WEST, buttonBox);

		theFrame.getContentPane().add(background);

		GridLayout grid = new GridLayout(16,16);
		grid.setVgap(1);
		grid.setHgap(2);
		mainPanel = new Jpanel(grid);
		background.add(BorderLayout.CENTER. mainPanel);

		for(int i=0; i<256; i++)	{
			JCheckBox c = new JCheckBox();
			c.setSelected(false);
			checkboxList.add(c);
			mainPanel.add(c);
		} // 체크상자를 만들고 모든값을 false로 설정, 리스와 GUI패널에 추가

		setUpMidi();

		theFrame.setBounds(50,50,300,300);
		theFrame.pack();
		theFrame.setVisible(true);
	}

	public void setUpMidi()	{
		try	{
			sequencer = MidiSystem.getSequencer();
			sequencer.open();
			sequence = new Sequence(Sequence.PPQ, 4);
			track = sequence.createTrack();
			sequencer.setTempoInBPM(120);
		}	catch(Exception e)	{e.printStackTrace();}
	}

	public void buildTrackAndStart()	{
		int[] trackList = null;
		
		sequence.deleteTrack(track);
		track = sequence.createTrack(); //기존 트랙제거 후 새로운 트랙

		for(int i = 0; i<16; i++)	{
			trackList = new int[16];
			
			int key = instruments[i];
			for(int j = 0; j<16; j++)	{
				JCheckBox jc = checkboxlist.get(j+(16*i));
				if(jc.isSelected())	{
					trackList[j] = key;
				} else {
					trackList[j] = 0;
				}
			}
		
		makeTracks(trackList); // 16가지 악기의 이벤트를 만들고 트랙에 추가
		track.add(makeEvent(176,1,127,0,16));
		}

		track.add(makeEvent(192,9,1,0,15));
		try {
			sequencer.setSequence(sequence);
			sequencer.setLoopCount(sequencer.LOOP_CONTINUOUSLY);
			sequencer.start();
			sequencer.setTempoInBPM(120); // 연주!!!!!!!!!!!!!!!
		} catch (Exception e) {e.printStackTrace();}
	}

	public class MyStartListener implements ActionListener	{
		public void actionPerformed(ActionEvent a)	{
			buldTrackAndStart();
		}
	}

	public class MyStopListener implements ActionListener	{
		public void actionPerformed (ActionEvent e)	{
			float tempoFactor = sequencer.getTempoFactor();
			sequencer.setTempoFactor((float)(tempoFactor *.97));
		}
	}

	public void makeTracks(int[] list)	{
		for(int i = 0; i < 16; i++)	{
			int key = list[i];
		
		if(key != 0)	{
			track.add(makeEvent(144,9,key,100,i));
			track.add(makeEvent(128,9,key,100,i+1)); //Note on/off 이벤트를 만들고 트랙에 추가
		}
	}
	}

	public MidiEvent makeEvent (int comd, int chan, int one, int two, int tick)	{
		MidiEvent event = null;
		try	{
			ShortMessage a = new ShortMessage();
			a.setMessage(comd, chan, one, two);
			event = new MidiEvent(a, tick);
	
		} catch(Exception e) {e.printStackTrace(); }
		return event;
	}

	public class MySendListener implements ActionListener	{
		public void actionPerformed(ActionEvent a)	{
			boolean[] checkboxstate = new boolean[256]; // 각 체크상자의 상태를 담아두기 위한 배열
		
			for(int i = 0; i < 256; i++)	{ //체크상자의 상태 화익 결과를 배열에 넣기
				JCheckBox check = (JCheckBox) checkboxList.get(i);
				if(check.isSelected())	
					checkboxState[i] = true;
			} try { //부울 배열을 직렬화
				FileOutputStream fileStream = new FileOutputStream(new File("Checkbox.ser"));
				ObjectOutputStream os = new ObjectOutputStream(fileStream);
				os.writeObject(checkboxState);
			} catch(Exception ex) {
				ex.printStackTrace();
			}
		}
	}

	public class MyReadInListener implements ActionListener	{
		public void actionPerformed(ActionEvent a)	{
			boolean[] checkboxState = null;
			try {
				FileInputStream fileIn = new FileInputStream(new File("Checkbox.ser"));
				ObjectInputStream is = new ObjectInputStream(fileIn);
				checkboxState = (boolean[]) is.readObject(); //파일에서 객체하나를 읽은 다음 배열로 다시 캐스트
			} catch(Exception ex) {ex.printStackTrace(); }

		for(int i =0; i<256; i++) { //각각의 체크상자의 상태를 원래대로 복구
			JCheckBox check = (JCheckBox) checkboxList.get(i);
			if(checkboxState[i]) {
				check.setSelected(true);
			} else {
				check.setSelected(false);
			}
		}

		sequencer.stop(); //현재 연주 중인것을 멈추고 리스트에 들어있는 체크상자의 새로운 상태를 이용 새로운 시퀀스 재구성
		buildTrackAndStart();
	}
}
}}}