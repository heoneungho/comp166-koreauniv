#summary 2012190701 김근영의 실습 페이지입니다. 코드가 호롤롤롤롤로

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{
public class beersong
{

        public static void main (String[] args)
        {

                int beerNum = 99; //맥주의 개수 99
                String word = "bottles"; //복수형

                while ( beerNum > 0)//맥주의 개수가 0보다 클때까지 while순환문을돌림
                {
                       
                System.out.println(beerNum + " " + word + " of beer on the wall");
                System.out.println(beerNum + " " + word + " of beer.");
                System.out.println("Take on down.");
                System.out.println("Pass it around.");
                        //출력문입니다.         

                beerNum = beerNum - 1;//beerNum을 1개 감소시킨 후 저장합니다
                 if(beerNum == 1)//맥주의 개수가 1이면
                 word = "bottle";//단수형(한 병인 경우)if 문의 위치를 바꾸어주어서 맥주가 1개일때 복수로 출력되는것 방지


                if(beerNum > 0)//beerNum이 0보다 크면
                {
                        System.out.println(beerNum + " " + word + " of beer on the wall");
                }
                else
                {
                        System.out.println("No more bottles of beer on the wall");
                }//else 문 끝
                }//while 순환문 끝
        } //main 클래스 끝
}//클래스 끝

}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{
public class phraseomatic
{
        public static void main (String[] args)
        {
                //세 종류의 단어 목록을 만듭니다. 적당히 필요한 단어를 추가해도 됩니다.
                String[] wordListOne = {"Feel","He","You","Face"};

                String[] wordListTwo = {"So","Are","Arn't","Is"};

                String[] wordListThree = {"Good","Bad","Colorful","Fantastic"};

                //각 단어 목록에 단어가 몇 개씩 들어있는지 확인합니다.
                int oneLength = wordListOne.length;
                int twoLength = wordListTwo.length;
                int threeLength = wordListThree.length;

                //난수 세 개를 발생시킵니다.
                int rand1 = (int) (Math.random() * oneLength);
                int rand2 = (int) (Math.random() * twoLength);
                int rand3 = (int) (Math.random() * threeLength);

                //이제 구문을 만듭니다.
                String phrase = wordListOne[rand1] + " " + wordListTwo[rand2] + " " + wordListThree[rand3];
                //구문을 출력합니다
                System.out.println("What we need is a " + phrase);
        }//main 끝
}//class 끝


}}}

*52p 집중토론* _요약_

 * 자바 가상 머신:  컴파일러가 바이트코드로 변환시켜서 자바 가상머신에게 넘겨주면 자바 가상머신은 그것을 실행시킨다.
 * 컴파일러:  코드를 바이트코드로 변환해줌. 이상한 유형의 데이터를 저장하려고 하면 컴파일러가 막아준다.비공개 메소드나 건드려서는 안되는 메소드를 호출하려고 하는 것을 막아준다.


*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
//big x 를 여러번 출력하는 프로그램이에요
public class Exercise1b 
{
	public static void main(String[] args)
	{
		int x = 1; // x = 1 대입
		while ( x < 10)//x 가 10 미만일때까지 계속	
			{
			x++;//x 를 1씩 증가시킨다
			if ( x > 3)//x가 3 보다 크면 출력한다	
				{
				System.out.println("big x");
				break;//반복문을 빠져나간다.
				}
			}
	}
}


//small x 를 여러번 출력하는 코드
public class Exercise2b	//class 명이 없으므로 넣어줍니다
{
	public static void main(String[] args) {
		int x = 5;
		while (x > 1)	{
			x = x - 1;
			if ( x < 3)	{
				System.out.println("small x");
			}
		}
		
	}
}


//small x 를 여러 번 출력하는 프로그램
public class Exercise3b {
	public static void main(String[] args) {//main 이 없기 때문에 main 을 추가해준다.
		int x = 5;
		while (x > 1)	{
			x = x - 1;
			if(x < 3)	{
				System.out.println("small x");
			}
		}
	}

}
}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체에서 자신에 대해 아는 것
 * 메소드: 객체에서 자신이 하는 것
 * 클래스: 객체를 만들기 위한 청사진
 * 테스트용 클래스: 새로운 클래스 유형의 객체에 들어있는 메소드와 변수를 테스트해본다.
 

*68p Television* _채워넣기_

 * 인스턴스 변수: 시간,채널,볼륨
 * 메소드:채널변경,시간이 지나면 텔레비전 끄기,볼륨 줄이기, 볼륨 키우기,녹화하기


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{
public class GuessGame
{
        Player p1;      //player 변수 4개를 저장하기 위한 인스턴스 변수 네 개
        Player p2;
        Player p3;
        Player p4;

        public void startGame()
        {
                p1 = new Player();
                p2 = new Player();
                p3 = new Player();
                p4 = new Player();//player 객체 네 개를 선언하고 각각을
                                  //player 인스턴수 변수 네 개에 대입한다.

                int guessp1 = 0; //찍은 숫자를 저장해주기 위해 변수를 선언
                int guessp2 = 0;
                int guessp3 = 0;
                int guessp4 = 0;

                boolean p1isRight = false; //정답 여부를 결정하기 위해
                boolean p2isRight = false; //boolean 변수 선언
                boolean p3isRight = false;
                boolean p4isRight = false;

                int targetNumber = (int) (Math.random() * 10);//선수들이 맞출
                                                                //숫자
                System.out.println("0 이상 9 이하의 숫자를 맞춰보세요.");

                while(true)
                {
                System.out.println("맞춰야 할 숫자는 " + targetNumber + "입니다.0");

                p1.guess();//각 선수별로 guess 메소드 호출
                p2.guess();
                p3.guess();
                p4.guess();

                guessp1 = p1.number;
                System.out.println("1번 선수가 찍은 숫자: " + guessp1);

                guessp2 = p2.number;
                System.out.println("2번 선수가 찍은 숫자: " + guessp2);

                guessp3 = p3.number;
                System.out.println("3번 선수가 찍은 숫자: " + guessp3);

                guessp4 = p4.number;
                System.out.println("4번 선수가 찍은 숫자: " + guessp4);

                //각 객체의 인스턴수 변수를 접근하여 각 선수가 찍은 숫자를
                //알아낸다

                if ( guessp1 == targetNumber)
                        p1isRight = true;
                if ( guessp2 == targetNumber)
                        p2isRight = true;
                if ( guessp3 == targetNumber)
                        p3isRight = true;
                if ( guessp4 == targetNumber)
                        p4isRight = true;

                //각 선수가 찍은 숫자 중에서 맞춘 숫자가 있는지 확인
                //맞춘 숫자가 있으면 boolean 변수를 true 로 설정

                if ( p1isRight || p2isRight || p3isRight || p4isRight)
                {
                        System.out.println("맞춘 선수가 있습니다.");
                        System.out.println("1번 선수: " + p1isRight);
                        System.out.println("2번 선수: " + p2isRight);
                        System.out.println("3번 선수: " + p3isRight);
                        System.out.println("4번 선수: " + p4isRight);
                        System.out.println("게임 끝.");
                break;
                }
                else
                {
                //아직 아무도 못 맞췄기 때문에 계속 해야 합니다.
                System.out.println("다시 시도해야 합니다.");

                }//if else 순환문 끝
        }//순환문 끝
        }//메소드 끝
}//클래스 끝


public class Player
{
        int number = 0; //찍은 숫자를 저장할 변수

        public void guess()
        {
                number = (int) (Math.random() * 10);
                System.out.println("찍은 숫자: " + number);
        }
}


public class GameLauncher
{
        public static void main(String[] args)
        {
                GuessGame game = new GuessGame();//GuessGame 형 game 객체를 생성한다
                game.startGame();//game객체에서 startGame 을 실행시킨다
        }
}



}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

A :
public class TapeDeck 
{

	boolean canRecord = false; //canRecord = false로 세팅
	
	void playTape()//playTape 메소드 생성
	{
		System.out.println("tape playing");		
	}
	
	void recordTape()//recordTape 메소드 생성
	{
		System.out.println("tape recording");
		
	}	

}

public class TapeDeckTestDrive 
{
	public static void main(String[] args) 
	{
		TapeDeck t = new TapeDeck();
		//TapeDeck 타입의 변수 객체t를 만들어줍니다
		t.canRecord = true;//t의 canRecord를 true로
		t.playTape();//t의 playTape메소드 실행
		
		if(t.canRecord == true)
		{
			t.recordTape();
		}
	}
}

B:

public class DVDPlayer
{
	boolean canRecord = false;//canRecord = false로 세팅
	
	void recordDVD()//recordDVD메소드 생성
	{
		System.out.println("DVD recording");
		
	}
	void playDVD()//playDVD메소드 생성
	{
		System.out.println("DVD Playing");
	}
        //playDVD method 를 만들어줍니다
}

public class DVDPlayerTestDrive 
{
	public static void main(String[] args) {
		
		DVDPlayer d = new DVDPlayer();//DVDPlayer형의 새로운 객체 생성
		d.canRecord = true;//d의 canRecord에 true를 넣어줌
		d.playDVD();
		
		if(d.canRecord == true)
		{
			d.recordDVD();
		}
	}
}
}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수:

 원시변수 : 정수, 부울, 부동소수점 수와 같은 기초적인 값이 들어갑니다.

 레퍼런스 변수 : 객체에 대한 레퍼런스가 들어갑니다.

 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{
public class Dog {
	
	String name;
	
	public static void main(String[] args) {
		//Dog 
		Dog dog1 = new Dog();
		dog1.bark();
		dog1.name = "bart";
	
				
		//
		Dog[] myDogs = new Dog[10];
		//
		myDogs[0] = new Dog();
		myDogs[1] = new Dog();
		myDogs[2] = dog1;
		int y = 3;
		while(y < 10)
		{
			myDogs[y++] = new Dog();
		}
		
		//
		//
		myDogs[0].name = "Fred";
		myDogs[1].name = "Marge";
		myDogs[3].name = "Yoshi";
		myDogs[4].name = "Grand";
		myDogs[5].name = "Season";
		myDogs[6].name = "Hong";
		myDogs[7].name = "SABU";
		myDogs[8].name = "OU";
		myDogs[9].name = "JiRooHae";
		
		//
		System.out.print();
		System.out.println(myDogs[2].name);
		
		//
		//
		int x = 0;
		while(x < myDogs.length)
		{
			myDogs[x].bark();
			x = x + 1;
			
		}
		
			
	}
	
	public void bark()
	{
		System.out.println(name + "");
		
	}
	
	public void eat(){}
	public void chaseCat() {}

}


}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
class Books
{
        String title;
        String author;
}



class BooksTestDrive
{
        public static void main(String[] args)
        {
                Books[] myBooks = new Books[3];
                int x = 0;

                for(;x < 3; x++)
                        myBooks[x] = new Books();

                myBooks[0].title = "The Grappes of Java";
                myBooks[1].title = "The Java Gatsby";
                myBooks[2].title = "The Java  Cookbook";
                myBooks[0].author = "bob";
                myBooks[1].author = "sue";
                myBooks[2].author = "ian";


                for(x = 0 ; x < 3 ; x++)
                {
                        System.out.print(myBooks[x].title);
                        System.out.print(" by ");
                        System.out.println(myBooks[x].author);
                }
        }
}

}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?:밥
 * 문제가 된 부분은 어딘가요?:켄트의 메소드에서는 순환문을 돌 때마다 새로운 객체를 레퍼런스 변수 하나에 대입했기 때문에 전에 참조하고 있던 객체는 버림받게 되는 문제가 있었다.

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:
 * 게터와 세터:
 * 인스턴스 변수 vs 지역 변수:
 
*107p Dog* _실행_

{{{
public class Dog {

	int size;
	String name;
	
	void bark()
	{
		if ( size > 60)
		{
			System.out.println("Wooof! Wooof!");
			
		}
		else if ( size > 14)
		{
			System.out.println("Ruff! Ruff!");
			
		}
		else
		{
			System.out.println("Yip! Yip!");
		}
	}

}

public class DogTestDrive {

	public static void main(String[] args) {
		Dog one = new Dog();
		one.size = 70;
		Dog two = new Dog();
		two.size = 8;
		Dog three = new Dog();
		three.size = 35;
		
		
		one.bark();
		two.bark();
		three.bark();

	}

}

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
public class Clock {

	String name;
	
	void setTime(String t)
	{
		time = t;
	}
	
	String getTime()
	{
		return time;
	}

}

public class ClockTestDrive {

	public static void main() {
		
		Clock c = new Clock();
		
		c.setTime("1245");
		String tod = c.getTime();
		System.out.println("Time: " + tod);
		
	}
}

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:
 * 다형성:

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}