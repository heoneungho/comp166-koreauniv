#summary 수업중 실습하는 내용을 올리게 되는 실습페이지입니다. 페이지의 내용은 각 학생에 의해서 관리됩니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{

public class BeerSong{
	
        public static void main (String[] args) 
        { 
 
                int beerNum = 99; //맥주의 개수 99 
                String word = "bottles"; //복수형 
 
                while ( beerNum > 0)//맥주의 개수가 0보다 클때까지 while순환문을돌림 
                { 
                        
                System.out.println(beerNum + " " + word + " of beer on the wall"); 
                System.out.println(beerNum + " " + word + " of beer."); 
                System.out.println("Take on down."); 
                System.out.println("Pass it around."); 
                        
 
                beerNum = beerNum - 1;//beerNum을 1개 감소시킨 후 저장합니다 
                 if(beerNum == 1)//맥주의 개수가 1이면 
                 word = "bottle";//한 병일 경우 복수로 출력되는것 방지 
 
 
                if(beerNum > 0)//beerNum이 0보다 크면
                { 
                        System.out.println(beerNum + " " + word + " of beer on the wall"); 
                } 
                else 
                { 
                        System.out.println("No more bottles of beer on the wall"); 
                }//else 문 끝 
                }//while 순환문 끝 
        } //main 클래스 끝 
}//클래스 끝

}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{
public class PhraseOMatic {
	public static void main(String[] args) {
		
		String[] wordListOne = {"동혁","근영","종하","진범"}; //단어 목록 1에들어갈 단어를 지정합니다.
		
		String[] wordListTwo = {"is","will be","was","should"	}; //단어 목록 2에 들어갈 단어를 지정합니다.
		
		String[] wordListThree = {"ugly","handsome","sexy","cute"}; //단어 목록 3에 들어갈 단어를 지정합니다.
		
		int oneLength = wordListOne.length; //단어 목록1에 몇개의 단어가 있는지 확인 합니다.
		int twoLength = wordListTwo.length; //단어 목록2에 몇개의 단어가 있는지 확인 합니다.
		int threeLength = wordListThree.length; //단어 목록3에 몇개의 단어가 있는지 확인 합니다.
		
		
		int rand1 = (int) (Math.random() * oneLength); //단어 목록1에 대한 난수를 발생시킵니다.
		int rand2 = (int) (Math.random() * twoLength); //단어 목록2에 대한 난수를 발생시킵니다.
		int rand3 = (int) (Math.random() * threeLength); //단어 목록3에 대한 난수를 발생시킵니다.
		
		String phrase = wordListOne [rand1] + " " + wordListTwo [rand2] + " " + wordListThree[rand3]; // 구문을 만듭니다.
		
		System.out.println("What we need is a " + phrase); //출력문
	}

}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 프로그램(자바)을 실행시킨다.
 * 컴파일러:언어를 해석해서 실행시킨다.

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
public class ExerciseA {
	
	public static void main(String[] args) {
		int x = 1;
		
		while (x < 10) {
			
			x = x + 1; //변경된 부분 x를 증가시켜 while문이 무한으로 돌아가는 것을 방지
			
			if ( x > 3) {
				
				System.out.println("big x");
			}
		}
	}
}

public class ExerciseB { //클래스 선언이 빠짐
	public static void main(String[] args) {
		int x = 5;
		
		while (x > 1){
			x = x-1;
			
			if (x < 3){
				System.out.println("small x");
			}
		}
	}

}


public class ExerciseC {
	public static void main(String[] args) {//메소드가 빠짐
		int x = 5;
		
		while (x > 1){
			x = x-1;
			
			if (x < 3){
				System.out.println("small x");
			}
		}
	}
}
}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수:객체의 데이터를 나타내는 것.
 * 메소드:객체에서 할수 있는일.
 * 클래스:유형의 객체를 만드는 법을 알려주는 역하을 함.
 * 테스트용 클래스: 다른 클래스를 테스트 하기 위한 클래스.
 

*68p Television* _채워넣기_

 * 인스턴스 변수: channel,sound,power
 * 메소드:channelup(),channeldown(),soundup(),sounddown(),on(),off()


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{ 
public class GuessGame { 
        Player p1; 
        Player p2; 
        Player p3; 
        Player p4; 
         
        public void startGame() { 
                p1 = new Player(); 
                p2 = new Player(); 
                p3 = new Player(); 
                p4 = new Player(); 
                 
                int guessp1 = 0; 
                int guessp2 = 0; 
                int guessp3 = 0; 
                int guessp4 = 0; 
                 
                boolean p1isRight = false; 
                boolean p2isRight = false; 
                boolean p3isRight = false; 
                boolean p4isRight = false; 
                 
                int targetNumber = (int) (Math.random() * 10); 
                System.out.println("0 이상 9 이하의 숫자를 맞춰보아라."); 
                 
                while(true) { 
                        System.out.println("맞춰야 한 숫자는 "  + targetNumber + "입니다."); 
                         
                        p1.guess(); 
                        p2.guess(); 
                        p3.guess(); 
                        p4.guess(); 
                         
                        guessp1 = p1.number; 
                        System.out.println("1번 선수가 찍은 숫자: " + guessp1); 
                         
                        guessp2 = p2.number; 
                        System.out.println("2번 선수가 찍은 숫자: " + guessp2); 
                         
                        guessp3 = p3.number; 
                        System.out.println("3번 선수가 찍은 숫자: " + guessp3); 
                         
                        guessp3 = p4.number; 
                        System.out.println("4번 선수가 찍은 숫자: " + guessp3); 
                         
                        if (guessp1 == targetNumber) { 
                                p1isRight = true; 
                        } 
                         
                        if (guessp2 == targetNumber) { 
                                p2isRight = true; 
                        } 
                         
                        if (guessp3 == targetNumber) { 
                                p3isRight = true; 
                        } 
                         
                        if (guessp4 == targetNumber) { 
                                p4isRight = true; 
                        } 
                         
                        if (p1isRight || p2isRight || p3isRight || p4isRight) { 
                                 
                                System.out.println("맞춘 선수가 있습니다."); 
                                System.out.println("1번 선수: " + p1isRight); 
                                System.out.println("2번 선수: " + p2isRight); 
                                System.out.println("3번 선수: " + p3isRight); 
                                System.out.println("4번 선수: " + p4isRight); 
                                System.out.println("게임 끝."); 
                                break; // 게임이 끝났으므로 break문으로 순환문을 빠져나갑니다. 
                        } else { 
                                // 아직 아무도 못맞췄기 때문에 계속 해야 합니다. 
                                System.out.println("다시 시도해야 합니다."); 
                        }  // if/else 부분 끝 
                } // 순환문 끝 
        } // 메소드 끝 
} // 클래스 끝 
 
 
public class Player { 
        int number = 0; 
         
        public void guess() { 
                number = (int) (Math.random() * 10); 
                System.out.println("찍은 숫자: " + number); 
        } 
}

public class GameLauncher { 
        public static void main(String[] args) { 
                GuessGame game = new GuessGame(); 
                game.startGame(); 
        } 
} 

}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

public class TapeDeck {
	boolean canRecord = false;
	
	void playTape() {
		System.out.println("tape playing");
	}
	
	void recordTape() {
		System.out.println("tape recording");
	}
}

 class TapeDeckTestDrive{
	public static void main(String[] args) {
		
		TapeDeck t = new TapeDeck(); //레퍼런스 변수 t의 부재 
		
		t.canRecord = true;
		t.playTape();
		
		if (t.canRecord == true) {
			t.recordTape();
		}
	}
}


public class DVDPlayer {
	boolean canRecord = false;
	void recordDVD() {
		System.out.println("DVD recording");
	}
	
	void playDVD(){          //playDVD를 정의해 줘야함
		System.out.println("DVD playing");
	}
}

class DVDPlayerTestDrive {
	public static void main(String[] args) {
		DVDPlayer d = new DVDPlayer();
		
		d.canRecord = true;
		d.playDVD();
		
		if (d.canRecord == true) {
			d.recordDVD();
		}
	}
}

}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수: 원시 변수는 정수, 부울, 부동소수점과 같은 기초적인 값이 들어가는 반면 레퍼런스변수는 객체에 대한 레퍼런스가 들어간다. 

 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{
public class Dog {
	String name;
	public static void main(String[] args) {
		//Dog 객체를 만듭니다.
		Dog dog1 = new Dog();
		dog1.bark();
		dog1.name = "동혁";
	
	//Dog 배열을 만들어 봅시다.!
		Dog[] myDogs = new Dog[3];
	//개를 몇마리 만들어 봅시다!
		myDogs[0] = new Dog();
		myDogs[1] = new Dog();
		myDogs[2] = dog1;
	
	//배열 레퍼런스로 Dog객체에 접근 ㄱㄱ
		myDogs[0].name = "종하";
	        myDogs[1].name = "근영";
	    
		System.out.println("마지막개의 이름:");
		System.out.println(myDogs[2].name);
		
	
		int x = 0;
		while(x < myDogs.length){
			myDogs[x].bark();
			x = x + 1;
			}
		}
	
	public void bark() {
		System.out.println(name + "이(가) 왈!하고 짖습니다.");
	}
	
	public void eat() {}
	public void chasecat() {}

}


}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

public class Books {
	String title;
	String author;
}

class BooksTestDrive {
	public static void main(String[] args) {
		Books [] myBooks = new Books[3];
		
		myBooks[0] = new Books();
		myBooks[1] = new Books();
		myBooks[2] = new Books();  //배열에 대한 객체를 생성해줘야함!!
		
		myBooks[0].title = "자바의 포도";
		myBooks[1].title = "위대한 자바";
		myBooks[2].title = "자바 요리책";
		myBooks[0].author = "밥";
		myBooks[1].author = "수";
		myBooks[2].author = "이안";
		
		int x = 0;
		while (x < 3) {
			System.out.print(myBooks[x].title);
			System.out.print(" by ");
			System.out.println(myBooks[x].author);
			x = x + 1;
		}
	}
}



public class Hobbits {
	String name;
	
	public static void main(String[] args) {
		
		Hobbits [] h = new Hobbits[3];
		int z = -1;  //배열의 인덱스는 0 부터 시작하므로 z=-1로 설정함 ! 
		
		while (z < 3) {   //배열의 인덱스가 2까지이므로 z<3으로 설정함 !
			z = z + 1;
			h[z] = new Hobbits();
			h[z].name = "빌보";
			
			if (z == 1) {
				h[z].name = "프로도";
			}
			if (z == 2) {
				h[z].name = "샘";
			}
			
			System.out.print(h[z].name + "은(는)");
			System.out.println(" 좋은 호빗의 이름이다!");
			}
		
	}
}


}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?:밥
 * 문제가 된 부분은 어딘가요?:켄트는 while문이 시작할때 마다 refc변수를 초기화 시켰으므로 사용할 수있는 변수는 마지막 10번째 변수 뿐이다.


= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:인스턴스 변수를 private로 게터와 세터를 public으로 지정하여 다른 코드에서 그 데이터를 직접 접근 할 수없도록 막는 것.
 * 게터와 세터:게터=가져오는 값을 리턴값 형태로 받기위한 용도로 쓰임
               세터=인자로 받아서 인스턴스 변수를 설정할 값으로 바꾸는 용도로 쓰임
 * 인스턴스 변수 vs 지역 변수: 인스턴스 변수는 클래스 내에서 선언 되고 지역변수는 메소드 내에서 선언 되며 인스턴스 변수는 기본값이 있지만 지역 변수는 기본값이 없으므로 초기화가 필요하다.
 
*107p Dog* _실행_

{{{
public class Dog {
	int size;
	String name;

	void bark() { 
		if (size > 60) {
			System.out.println("wooof! wooof!");
		} else if (size > 14) {
			System.out.println("Ruff! Ruff");
		}else {
			System.out.println("Yip! Yip!");
		}
	}
}

class DogTestDrive {
	
	public static void main(String[] args) {
		Dog one = new Dog();
		one.size = 70; //큰 사이즈의 개
		Dog two = new Dog();
		two.size = 8;  //작은 사이즈의 개
		Dog three = new Dog();
		three.size = 35;  //중간 사이즈의 개
		
		one.bark();
		two.bark();
		three.bark(); //실행
		
	}
}

실행 결과 :wooof! wooof!
          Yip! Yip!
          Ruff! Ruff


}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
public class XCopy {
	public static void main(String[] args) {
		int orig = 42;  //orig 를 42 로 지정
		
		XCopy x = new XCopy();
		
		int y = x.go(orig); //go메소드 실행후 arg의 값
		
		System.out.println(orig + " " + y); //실행문
	}

	int go (int arg){
		
		arg = arg * 2;
		
		return arg;
		}
	}

// 결과적으로 orig는 실행 할때 42로 일정 함 왜냐하면 go메소드로 인자를 보낼 때
// 인자는 orig의 복사본이기 때문이다.

public class Clock {
	String time;
	
	void setTime(String t){
		time = t;
	}
	
	String getTime(){  //게터메소드에는 리턴 유형인 String이 있어야 한다.
		return time;
	}
}

class ClockTestDrive {
	public static void main(String[] args) {
		
		Clock c = new Clock();
		
		c.setTime("1245");
		String tod = c.getTime();
		System.out.println("time: " + tod);
	}
}
}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
소프트웨어 개발 방법으로, 비즈니스의 요구가 시시각각 변동이 심할 경우에 적합. 고객이 원하는 양질의 소프트웨어를 빠른 시간안에 전달하는 것을 목적으로 하며 일련의 규칙들이 있음
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{
package SimpleDotCom; 
 
import java.io.*; 
 
public class GameHelper { 
        public String getUserInput(String prompt){ 
                String inputLine = null; 
                System.out.print(prompt + " "); 
                 
                try{ 
                        BufferedReader is = new BufferedReader(new InputStreamReader(System.in)); 
                        inputLine = is.readLine(); 
                        if(inputLine.length() == 0) 
                                return null; 
                } 
                 
                catch(IOException e){ 
                        System.out.println("IOException: " + e); 
                } 
                 
                return inputLine; 
        } 
} 
 
 
public class SimpleDotCom { 
        int [] locationCells;  
        int numOfHits = 0; // 맞춘 횟수 초기화 
         
        public void setLocationCells(int [] locs){ 
                locationCells = locs; 
        } 
 
        public String checkYourself(String stringGuess){ 
                int guess = Integer.parseInt(stringGuess); // String 을 int 로 변환 
                String result = "miss"; // 기본 값 지정 
                 
                for(int i=0; i<locationCells.length; i++){ // 맞춘 횟수 확인하는 반복문 
                        if(guess == locationCells[i]){ 
                                result = "hit"; 
                                numOfHits++; 
                                break; 
                        } 
                } 
                 
                if(numOfHits == locationCells.length){  
                        result = "kill"; 
                } 
                 
                System.out.println(result); 
                 
                return result; 
        } 
} 
 
 
public class SimpleDotComTestDrive { 
        public static void main(String[] args) { 
                 
                int numOfGuesses = 0; // 사용자 추측 횟수 초기화 
                GameHelper helper = new GameHelper();  
                         
                SimpleDotCom theDotCom = new SimpleDotCom(); // 닷컴 객체 생성 
                int randomNum = (int)(Math.random()*5); // 난수 써서 셀 위치 배열 
                         
                int[] locations = {randomNum, randomNum+1, randomNum+2}; 
                theDotCom.setLocationCells(locations); // 닷컴 위치 지정 
                boolean isAlive = true; 
                         
                while(isAlive == true){ 
                        String guess = helper.getUserInput("enter a number"); 
                        String result = theDotCom.checkYourself(guess); 
                        numOfGuesses++; 
                        if(result.equals("kill")){ 
                                isAlive = false; 
                                System.out.println(numOfGuesses + " guesses"); 
                        } 
                } 
                 
        } 
}

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{
package DotCom1; 
 
import java.io.*; 
 
public class GameHelper { 
        public String getUserInput(String prompt){ 
                String inputLine = null; 
                System.out.print(prompt + " "); 
                 
                try{ 
                        BufferedReader is = new BufferedReader(new InputStreamReader(System.in)); 
                        inputLine = is.readLine(); 
                        if(inputLine.length() == 0) 
                                return null; 
                }catch(IOException e){ 
                        System.out.println("IOException: " + e); 
                } 
                 
                return inputLine; 
        } 
} 
 
 
public class SimpleDotCom1 { 
    int[] locationCells; 
    boolean[] hitCells; // 새로운 행렬 설정 
    int numOfHits = 0; 
     
    public void setLocationCells(int[] locs) { 
        locationCells = locs; 
    } 
     
    public void setHitCells(boolean[] hits) { 
        hitCells = hits; 
    } 
     
    public String checkYourself (String stringGuess) { 
        int guess = Integer.parseInt(stringGuess); 
        String result = "miss"; 
         
        for(int i = 0; i < locationCells.length; i++) { 
                if ((guess == locationCells[i])) { 
                        if (hitCells[i] == true) 
                                break; // 맞췄을 때 빠져나오기 
                result = "hit"; 
                numOfHits++; 
                hitCells[i] = true; // 맞았으면 true로 바뀜. 
                break; 
            } 
        } 
         
        if (numOfHits == locationCells.length) { 
                result = "kill"; 
        } 
         
        System.out.println(result); 
         
        return result; 
    } 
} 
 
 
public class SimpleDotCom1TestDrive { 
        public static void main(String[] args) { 
                int numOfGuesses = 0; 
                GameHelper helper = new GameHelper();  
                         
                SimpleDotCom1 theDotCom1 = new SimpleDotCom1(); 
                int randomNum = (int)(Math.random()*5); 
                         
                int[] locations = {randomNum, randomNum+1, randomNum+2}; 
                theDotCom1.setLocationCells(locations); 
                boolean[] hits = {false, false, false}; // 초기값 설정 
                theDotCom1.setHitCells(hits); // 새로운 배열 추가 
                boolean isAlive = true; 
                         
                while(isAlive == true){ 
                        String guess = helper.getUserInput("enter a number"); 
                        String result = theDotCom1.checkYourself(guess); 
                        numOfGuesses++; 
                        if(result.equals("kill")){ 
                                isAlive = false; 
                                System.out.println(numOfGuesses + " guesses"); 
                        } 
                } 
        } 
}

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{
package DotCom2;

import java.io.*;

public class GameHelper {
	public String getUserInput(String prompt){
		String inputLine = null;
		System.out.print(prompt + " ");
		
		try{
			BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
			inputLine = is.readLine();
			if(inputLine.length() == 0)
				return null;
		}catch(IOException e){
			System.out.println("IOException: " + e);
		}
		
		return inputLine;
	}
}


public class SimpleDotCom2 {
    int[] locationCells;
    int numOfHits = 0;
    
    public void setLocationCells(int[] locs) {
    	locationCells = locs;
    }
    
    public String checkYourself (String stringGuess) {
    	int guess = Integer.parseInt(stringGuess);
    	String result = "miss";
    	
    	for(int i = 0; i < locationCells.length; i++) {
    		if ((guess == locationCells[i])) {
            	result = "hit";
            	numOfHits++;
            	locationCells[i] = -1; // 값을 -1로 바꿈
            	break;
            }
    	}
    	
    	if (numOfHits == locationCells.length) {
    		result = "kill";
    	}
    	
    	System.out.println(result);
    	
    	return result;
    }
}


public class SimpleDotCom2TestDrive {
	public static void main(String[] args) {
		int numOfGuesses = 0;
		GameHelper helper = new GameHelper(); 
			
		SimpleDotCom2 theDotCom2 = new SimpleDotCom2();
		int randomNum = (int)(Math.random()*5);
			
		int[] locations = {randomNum, randomNum+1, randomNum+2};
		theDotCom2.setLocationCells(locations);
		boolean isAlive = true;
			
		while(isAlive == true){
			String guess = helper.getUserInput("enter a number");
			String result = theDotCom2.checkYourself(guess);
			numOfGuesses++;
			if(result.equals("kill")){
				isAlive = false;
				System.out.println(numOfGuesses + " guesses");
			}
		}
	}
}



}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{
package DotCom3;

import java.io.*;

public class GameHelper {
	public String getUserInput(String prompt){
		String inputLine = null;
		System.out.print(prompt + " ");
		
		try{
			BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
			inputLine = is.readLine();
			if(inputLine.length() == 0)
				return null;
		}catch(IOException e){
			System.out.println("IOException: " + e);
		}
		
		return inputLine;
	}
}


import java.util.ArrayList;

public class SimpleDotCom3 {
	private ArrayList<String> locationCells;
    
    public void setLocationCells(ArrayList<String> loc) {
            locationCells = loc;
    }
    
    public String checkYourself (String userInput) {
    	String result = "miss";
    	int index = locationCells.indexOf(userInput);
    	
    	if (index >= 0) {
    		locationCells.remove(index);
    		if (locationCells.isEmpty()) {
    			result = "kill";
    		}else{
    			result = "hit";
    		}
    	} 
    	
    	System.out.println(result);
    	return result;
    }
}


import java.util.ArrayList;

public class SimpleDotCom3TestDrive {
	public static void main(String[] args){
		int numOfGuesses = 0;
		GameHelper helper = new GameHelper();
                
		SimpleDotCom3 theDotCom3 = new SimpleDotCom3();
		int randomNum = (int) (Math.random() * 5);
                
		ArrayList<String> locations = new ArrayList();
		locations.add(String.valueOf(randomNum));
		locations.add(String.valueOf(randomNum+1));
		locations.add(String.valueOf(randomNum+2));
        theDotCom3.setLocationCells(locations);
        boolean isAlive = true;
                
        while(isAlive == true) {
        	String guess = helper.getUserInput("enter a number");
        	String result = theDotCom3.checkYourself(guess);
        	numOfGuesses++;
        	if(result.equals("kill")) {
        		isAlive = false;
        		System.out.println(numOfGuesses + " guesses");
        	}
        }
    }
}



}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:공통적인 코드를 어떤 클래스에 넣은 다음, 다른 더 구체적인 클래스에 공통적인 클래스가 상위클래스라는 것을 알려주는 것이다.
 * 다형성: 상위클래스로 선언된 레퍼런스를 이용하여 하위클래스 객체를 참조하는 것이다.


*208p 클래스 계층 구조* _클래스로 구현_

{{{
public class Animal {
        String picture;
        boolean food;
        int hunger;
        float boundaries;
        float location;

        void makeNoise(){
        }
        
        void eat(boolean food){
        }
        
        void sleep(){
        }
        
        void roam(){
        }
}

class Feline extends Animal{
        void roam(){
        }
}

class Lion extends Feline{
        void makeNoise(){
        }
        
        void eat(boolean food){
        }
}

class Tiger extends Feline{
        void makeNoise(){
        }
        
        void eat(boolean food){
        }
}

class Cat extends Feline{
        void makeNoise(){
        }
        
        void eat(boolean food){
        }
}

class Hippo extends Animal{
        void makeNoise(){
        }
        
        void eat(boolean food){
        }
}

class Canine extends Animal{
        void roam(){
        }
}

class Wolf extends Canine{
        void makeNoise(){
        }

        void eat(boolean food){
        }
}

class Dog extends Canine{
        void makeNoise(){
        }
        
        void eat(boolean food){
        }
}

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드: 상위 클래스의 메소드를 하위 클래스에서 상속받아 재정의하는 것.

 * 오버로딩: 이름이 같고 인자 목록이 다른 메소드 두 개를 만드는 것.

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

// 정답은 1번.
public class MonsterTestDrive {
	public static void main(String[] args) {
		
		Monster [] ma = new Monster[3];
		ma[0] = new Vampire();
		ma[1] = new Dragon();
		ma[2] = new Monster();

		for(int x=0; x<3; x++){
			ma[x].frighten(x);
		}

	}
}

class Monster{
	boolean frighten(int d){
		System.out.println("arrrgh");
		return true;
	}
} // 세 번째 줄 결과가 "arrrgh"출력이고, frighten() 메소드가 오버라이드 된 형태이므로

class Vampire extends Monster{
	boolean frighten(int x){
		System.out.println("a bite?");
		return false;
	}
} // 첫 번째 줄 결과가 "a bite?"출력이고, frighten() 메소드를 오버라이드한 형태

class Dragon extends Monster{
	boolean frighten(int degree){
		System.out.println("breath fire");
		return true;
	}
}

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 *인터페이스: 100% 추상 클래스(인스턴스를 만들 수 없는 클래스), 서로 다른 클래스간의 공통 부분을 정의할 때 사용하며 인터페이스를 상속받는 클래스에서 메소드를 세부적으로 구현 가능.
 *다형성: 상위클래스 유형을 메소드의 인자나 리턴 유형 또는 배열 유형을 쓸 수 있게 만드는 능력 필요. 추상 메소드, 추상 클래스를 통해 이룸.
 *추상 클래스: 반드시 확장해야하는 클래스, 추상 메소드 혹은 구상 메소드를 가질 수 있음.
 *추상 메소드: 반드시 오버라이드해야하는 메소드, 하위클래스에서 프로토콜을 정의할 수 있음.
 *다중 상속: 여러 상위클래스에서 상속받는 것.


= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 *힙에서의 변수: 모든 객체 가능. 
 *스택에서의 변수: 지역 변수, 객체 레퍼런스 변수.
 *생성자: 객체를 생성할 때 실행되는 코드가 들어있음. 즉, 어떤 클래스 유형에 대해 new 키워드를 사용했을 대 실행되는 코드가 들어있음.
 *널 레퍼런스: 레퍼런스를 null로 설정하는 것은 리모컨의 기능을 해제하는 것. 널 레퍼런스에 대해 점 연산자를 사용하면 실행 중에 NullPointerException이 생김.
 
*298p 집중토론* _요약_

 *인스턴스 변수: 클래스 내에서 선언한 것, 각각의 개별 객체가 가지고 있는 필드를 나타냄.
 *지역 변수: 스택 변수, 메소드 안에서 선언한 것, 메소드 매개변수도 포함. 

*302p 5분 미스터리* _구현후 주석달기_

{{{

import java.util.*;

class V2Radiator{
	V2Radiator(ArrayList list){
		for(int x=0; x<5; x++){
			list.add(new SimUnit("V2Radiator"));
		}	
	}
}

class V3Radiator{ //불필요한 상속을 제거
	V3Radiator(ArrayList lglist){ //super(lglist) 삭제
		for(int g=0; g<10; g++){
			lglist.add(new SimUnit("V3Radiator"));
		}
	}
}

class RetentionBot{
	RetentionBot(ArrayList rlist){
		rlist.add(new SimUnit("Retention"));
	}
}

public class TestLifeSupportSim {
	public static void main(String[] args) {
		ArrayList aList = new ArrayList();
		V2Radiator v2 = new V2Radiator(aList);
		V3Radiator v3 = new V3Radiator(aList);
		
		for(int z=0; z<20; z++){
			RetentionBot ret = new RetentionBot(aList);
		}
	}
}

class SimUnit{
	String botType;
	
	SimUnit(String type){
		botType = type;
	}
	
	int powerUse(){
		if("Retention".equals(botType)){
			System.out.println("2 energy"); // 에너지 소모량 표현
			return 2;
		} else{
			System.out.println("4 energy");
			return 4;
		}
	}
}

// 상속을 제거해야 사라가 의도한 대로 결과를 얻음

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}