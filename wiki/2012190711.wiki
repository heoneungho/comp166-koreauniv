#summary 수업중 실습하는 내용을 올리게 되는 실습페이지입니다. 페이지의 내용은 김 정곤에 의해서 관리됩니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{

public class BeerSong {
	public static void main (String[] args) {
		int beerNum = 99;
		String word = "bottles"; //복수형
		
		while (beerNum > 0) {
			
			
			System.out.println(beerNum + " " + word + " of beer on the wall");
			System.out.println(beerNum + " " + word + " of beer.");
			System.out.println("Take one down.");
			System.out.println("Pass it around.");
			beerNum = beerNum - 1;

			if (beerNum == 1) {
				word = "bottle";	//단수형(한 병인 경우)
			}
			
			if (beerNum > 0) {
				System.out.println(beerNum + " " + word + " of beer on the wall");
			} else {
				System.out.println("No more bottles of beer on the wall");
			}	// else 문 끝
		} // while 순환문 끝
	}	// main 클래스 끝
} // 클래스 끝

/* if 문 을 beerNum = beerNum - 1; 밑으로 내려주어 한병이 되었을 때 단수형으로 표현*/
}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{
public class PhraseOMatic       //PhraswOMatic 이란 클래스를 만듭니다.
{
        public static void main(String[]args)
        {

                String[]wordListOne={"Gon ", "Young-Hyun ", "Chai-Won ","Seo-Yeon ", "Dong-Hyuk ", "Bong-Woo ", "Sung-Ho ", "Jong-Han ", "Dong-Gi ", "Neung-Ho ", "Jong-Ha "};

                String[]wordListTwo={"Hates ", "Loves ", "Likes ", "Hits ", "Kills ", "Kisses ", "Punches "};

                String[]wordListThree={"Hye-Won", "Hyun-Joo", "Ji-Hyun", "Min-Hyung", "Geun-Young", "Yoo-Yeon", "Seung-Won", "Young-Joo"};
                //각각의 단어 리스트를 만듭니다
                int oneLength = wordListOne.length;
                int twoLength = wordListTwo.length;
                int threeLength = wordListThree.length;
                //각각의 정수변수를 만들고 각 그룹의 단어수만큼 대입합니다.

                int rand1 = (int) (Math.random()*oneLength);
                int rand2 = (int) (Math.random()*twoLength);
                int rand3 = (int) (Math.random()*threeLength);
                //난수를 발생시킵니다.

                String phrase=wordListOne[rand1]+""+wordListTwo[rand2]+""+wordListThree[rand3];
                //그룹에서 랜덤하게 하나씩뽑아서 단어를 만듭니다.
                System.out.println("I know that "+phrase);
        }//단어를 출력합니다.
}
}}}

*52p 집중토론* _요약_

 * 자바 가상 머신:
실행.
ClassCast Exception 을 발생.
보안 관련 작업
바이트코드가 만들어진 다음 실행되기 전까지 다른 사람이 건드리는지 확인한다.

 * 컴파일러: 
바이트 코드 컴파일러로 프로그램의 실행 속도를 빠르게한다.
변수에 이상한 유형의 데이터를 저장하지 못하게 막는다.
실행 할 때 일어나면 안 되는 일을 방지한다.
비공개 메소드 호출과 바꾸면 안 되는 메소드 변경과 같은 접근 위반을 방지한다.
클래스의 핵심 내용에 접근하는 코드와 함부로 보면 안 되는 코드를 건드리는 것도 방지한다.
우선적으로 문제점을 잡아낸다. 


*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수:
 * 메소드:
 * 클래스:
 * 테스트용 클래스:
 

*68p Television* _채워넣기_

 * 인스턴스 변수:
 * 메소드:


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{

GuessGame.java :

public class GuessGame {
	Player p1;
	Player p2;
	Player p3;
	Player p4;

	public void startGame() {
		p1 = new Player();
		p2 = new Player();
		p3 = new Player();
		p4 = new Player();

		int guessp1 = 0;
		int guessp2 = 0;
		int guessp3 = 0;
		int guessp4 = 0;

		boolean p1isRight = false;
		boolean p2isRight = false;
		boolean p3isRight = false;
		boolean p4isRight = false;

		int targetNumber = (int) (Math.random() * 10);
		System.out.println("Correct 0 ~ 9");

		while(true) {
			System.out.println("Correct number is " + targetNumber + ".");
			p1.guess();
			p2.guess();
			p3.guess();
			p4.guess();

			guessp1 = p1.number;
			System.out.println("No.1 choice:" + guessp1);

			guessp2 = p2.number;
			System.out.println("No.2 choice:" + guessp2);

			guessp3 = p3.number;
			System.out.println("No.3 choice:" + guessp3);

			guessp4 = p4.number;
			System.out.println("No.4 choice:" + guessp4);

			if (guessp1 == targetNumber) {
				p1isRight = true;
			}

			if (guessp2 == targetNumber) {
				p2isRight = true;
			}

			if (guessp3 == targetNumber) {
				p3isRight = true;
			}

			if (guessp4 == targetNumber) {
				p4isRight = true;
			}

			if (p1isRight || p2isRight || p3isRight || p4isRight) {

				System.out.println("Someone is correct!");
				System.out.println("No.1: " + p1isRight);
				System.out.println("No.2: " + p2isRight);
				System.out.println("No.3: " + p3isRight);
				System.out.println("No.4: " + p4isRight);
				System.out.println("Game set.");
				break;
			} else {
			System.out.println("Replay.");
			}
		}
	}
}


GameLauncher.java :

public class GameLauncher {
	public static void main (String[] args) {
		GuessGame game = new GuessGame();
		game.startGame();
	}
}

Player.java :

public class Player {
	int number = 0;

	public void guess() {
		number = (int) (Math.random() * 10);
		System.out.println("Choice No: " + number);
	}
}

}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수:
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{

}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?:
 * 문제가 된 부분은 어딘가요?:

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:
 * 게터와 세터:
 * 인스턴스 변수 vs 지역 변수:
 
*107p Dog* _실행_

{{{

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:
 * 다형성:

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}