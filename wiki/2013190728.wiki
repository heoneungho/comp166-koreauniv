#summary 이지현의 실습 페이지입니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{

public class BeerSong {

     public static void main (String[] args) {
          int beerNum = 99;
          String word = "bottles";//복수형이 사용되었다.

     while (beerNum > 0) {

     if (beerNum == 1) {
          word = "bottle";//한 병, 즉 단수형을 의미한다.
     }

     System.out.println(beerNum + " " + word + " of beer on the wall");
     System.out.println(beerNum + " " + word + " of beer.");
     System.out.println("Pass it around");
     beerNum = beerNum -1;

     if (beerNum > 0) {
          if(beerNum ==1) {
               word = "bottle";//this is edited part.
          }
          System.out.println(beerNum + " " + word + " of beer on the wall");
          }else {
          System.out.println("No more bottles of beer on the wall");
               }
          }
     }
}



}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{

public class PhraseOMatic {
	public static void main (String[] args) {

	String[] Animalword = {"Dog", "Cat", "Tiger", "Monkey", "Lion", "Shark", "Whale", "Bird"};

	String[] Stationeryword = {"Pencil", "Pen", "Eraser", "Pencilcase", "Notebook", "Highlightpen", "book"};

	String[] Feelingword = {"Happy", "Sad", "Angry", "Interesting", "jealous", "impressed", "Nice", "Tired", "zealous", "excited", "Bad"};

	int AnimalLength = Animalword.length;
	int StationeryLength = Stationeryword.length;
	int FeelingLength = Feelingword.length;

	int rand1 = (int) (Math.random() * AnimalLength);
	int rand2 = (int) (Math.random() * StationeryLength);
	int rand3 = (int) (Math.random() * FeelingLength);

	String phrase = Animalword[rand1] + " " + Stationeryword[rand2] + " " + Feelingword[rand3];

	System.out.println("What we need is a " + phrase);
	}
}

}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 1. 프로그램을 실행하게 한다. 2. 바이트 코드가 만들어진 다음 바이트코드가 실행되기 전까지 다른 누군가가 그걸 건드리지 않았는지 확인하는 작업을 한다. 3. 유형에 엄격하다.

 * 컴파일러: 1. 자바 언어를 해석한다. 2. 동적 바인딩을 지원한다. 3. 실행 시 오류를 막아준다. 4. 클래스 및 메소드의 보안을 담당한다. 

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

<A>

class Exercise1b {
     public static void main (String [] args) {
     
     int x = 1;

     while (x < 10) {
          if (x > 3) 
               System.out.println("big x");
                  
               x++; //while문 내에서 x를 증가 시켜 무한루프를 방지한다.
          }
     }
}

<B>

public class Exercise1b { //Exercise1b 클래스에 대한 선언을 해준다.
public static void main(String [] args) {

	int x = 5;

	while (x > 1) 
        {
		x = x - 1;
	
        if (x <3) 
        {
		System.out.println("small x");

		}
	}
}
}

<C>

public class Exercise1b { // Exercise1b 클래스를 선언한다.

	public static void main(String [] args) { //메인 메소드에 대한 선언을 한다.
	
	int x = 5;

	while (x > 1) {
	
	x = x -1;

	if (x <3) {
		System.out.println("small x");
		}
	}
}
}

}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체의 상태(데이터)를 나타내며 그 유형에 속하는 각 객체마다 값이 다르다
 * 메소드: 객체에서 할 수 있는 일
 * 클래스: 객체를 만들기 위한 청사진(blueprint)
 * 테스트용 클래스: 새로운 클래스를 테스트하기 위한 클래스
 

*68p Television* _채워넣기_

 * 인스턴스 변수: title, cast,해상도, 전력
 * 메소드: setTitle(), setCast(); TurnOn(), TurnOff() 

*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{

public class GuessGame { //GuessGame 클래스를 선언한다.

	Player p1;
	Player p2;
	Player p3;
	Player p4;

	public void startGame() {
	  p1 = new Player();
	  p2 = new Player();
	  p3 = new Player();
	  p4 = new Player();

	  int guessp1 = 0;
	  int guessp2 = 0;
	  int guessp3 = 0;
	  int guessp4 = 0;

	  boolean p1isRight = false;
	  boolean p2isRight = false;
	  boolean p3isRight = false;
	  boolean p4isRight = false;

	  int targetNumber = (int) (Math.random()*10);//0부터 9까지 난수를 설정한다.
	  System.out.println("Guess the number from 0 to 9");

	while(true) {
	  System.out.println("The number you should guess is" + targetNumber);

	  p1.guess();
	  p2.guess();
	  p3.guess();
	  p4.guess();
          //클래스의 랜덤한 넘버를 불러온다.

	  guessp1 = p1.number;
	  System.out.println("Player 1 pick the number:" + guessp1);

	  guessp2 = p2.number;
	  System.out.println("Player 2 pick the number:" + guessp2);

	  guessp3 = p3.number;
	  System.out.println("Player 3 pick the number:" + guessp3);

	  guessp4 = p4.number;
	  System.out.println("Player 4 pick the number:" + guessp4);

	if (guessp1 == targetNumber) {
	  p1isRight = true;
	}

	if (guessp2 == targetNumber) {
	  p2isRight = true;
	}

	if (guessp3 == targetNumber) {
	  p3isRight = true;
	}

	if (guessp4 == targetNumber) {
	  p4isRight = true;
	}//각각 답이 맞으면 true가 된다.

	if (p1isRight || p2isRight || p3isRight ||p4isRight) {

		System.out.println("There are some players who pick the right number.");
		System.out.println("Player1 :" + p1isRight);
		System.out.println("Player2 :" + p2isRight);
		System.out.println("Player3 :" + p3isRight);
		System.out.println("Player4 :" + p4isRight);
		System.out.println("Game over.");
		break;
	} else {
		System.out.println("Try again");
	}//정답을 맞춘사람이 없다면 "Try again"이 출력되며 재시도하게 된다.
	}
	}
}

public class Player {
	int number = 0;
	
	public void guess() {
		number = (int) (Math.random()*10);//선수의 숫자를 랜덤으로 발생시킨다.
		System.out.println("The number you pick up" +number);
		}
	}

public class GameLauncher {
	public static void main (String[] args) {
		GuessGame game = new GuessGame();
		game.startGame();
	}
}

}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

<A>

class TapeDeck {

	boolean canRecord = false;
	
	void playTape() {//tape를 실행한다.

	  System.out.println("tape playing"); //tape playing을 출력한다.
	}

	void recordTape() { // tape를 기록한다.

	  System.out.println("tape recording");//tape recording을 출력한다.
	}
  }

class TapeDeckTestDrive {
	public static void main(String [] args) {

	TapeDeck t = new TapeDeck();
	t.canRecord = true;
	t.playTape();

	if (t.canRecord == true) { //플레이 되지 않는다면 기록된다.
	  t.recordTape();
	  }
	}
}
class DVDPlayer {

    boolean canRecord = false; 

    void playDVD() {

        System.out.println("DVD playing"); 

    } 

    void recordDVD() {

        System.out.println("DVD recording"); 

    } 

}

class DVDPlayerTestDrive {

    public static void main(String args) {

        DVDPlayer d = new DVDPlayer(); // DVD class를 만든다.
 d.canRecord = true; d.playDVD(); 

    if(d.canRecord == true)

        d.recordDVD(); // 플레이 되지 않으면 기록한다.

    } 

} 

}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수: 원시변수에는 넝수, 부울, 부동소수점 수와 같은 기초적인 값 즉, 단순한 비트 패턴으로 나타낼 수 있는 값이 들어간다. 객체 레퍼런스에는 객체에 대한 레퍼런스가 들어간다. 즉, 객체에 접근할 수 있게 알려주는 비트가 들어있다.
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{

class Dog {
	String name;
	public static void main (String[] args) {
        //Dog라는 객체를 만들고 접근한다.

	Dog dog1 = new Dog();
	dog1.bark();
	dog1.name = "Bart";

	Dog[] myDogs = new Dog[3];
        //Dog 배열을 만든다.
	
	myDogs[0] = new Dog();
	myDogs[1] = new Dog();
	myDogs[2] = dog1;
        //개를 여러 마리 집어 넣는다.

	//배열 레퍼런스를 써서 Dog 객체에 접근합니다.
	myDogs[0].name = "Fred";
	myDogs[1].name = "Marge";
	myDogs[2].name = "BaBo";

	//myDogs[3]의 이름이 궁금하다.
	System.out.print("What is the name of the last Dog:");
	System.out.println("myDogs[2].name");
	
	int x =0;
	while(x <myDogs.length){
		myDogs[x].bark();
		x = x+1;
		}
	}

	pubilc void bark() {
		System.out.println(name + "barks.");
	}
	public void eat(){
                System.out.println(name + "eats something.");
        } 
	public void chaseCat(){
                System.out.println(name + "chases some cats.");
        }
	}


	
}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
< A >

class Books {
	String title;
	String author;
	}

public class BooksTestDrive {
		public static void main(String [] args) {

		Books [] myBooks = new Books[3];//Books 배열을 만든다.
		int x = 0;
		myBooks[0] = new Books();
		myBooks[1] = new Books();
		myBooks[2] = new Books();//각각의 개체를 새롭게 만든다.

		myBooks[0].title = "The Grapes of Java";
		myBooks[1].title = "The Java Gatsby";
		myBooks[2].title = "The Java Cookbook";
		myBooks[0].author = "bob";
		myBooks[1].author = "sue";
		myBooks[2].author = "ian";

		while (x < 3) {//반복문을 돌린다.
		
		System.out.print(myBooks[x].title);
		System.out.print("by");
		System.out.println(myBooks[x].author);
		x = x + 1;
		}
	}
}

< B >

class Hobbits {

	String name;

	public static void main(String [] args) {

	  Hobbits [] h = new Hobbits[3];
	  int z = -1;

	  while (z < 2) {
		z = z + 1;//z의 값을 증가시켜야 된다.0을 나타내기 위해
		h[z] = new Hobbits();
		h[z].name = "bilbo";
		if (z==1) {
		  h[z].name = "frodo";
		}
		if (z==2) {
		  h[z].name = "sam";
		}
		System.out.print(h[z].name + " is a ");
		System.out.println("good Hobbit name");

                
		}
	}
}

}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?: 밥
 * 문제가 된 부분은 어딘가요?: 켄트의 메소드는 contact 객체 중 마지막 객체에만 접근 가능하여 아무 쓸모가 없다.

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화: 클래스의 인스턴트 변수와 메소드에 제한을 걸어 외부에서 인스턴트 변수와 메소드에 접근 못하게 하여 적절하지 않은 값으로 설정하지 못하게 한다.
 * 게터와 세터: 게터-인스턴트 변수의 값을 알아내기 위한 메소드와 세터-인스턴트 변수의 값을 설정하기 위한 메소드이다.
 * 인스턴스 변수 vs 지역 변수: 인스턴트 변수-클래스 안, 메소드 밖에서 설정한 변수이고 지역 변수-메소드 안에서 설정한 변수이다
 
*107p Dog* _실행_

{{{
class Dog {
	int size;
	String name;

	void bark() {
	  if (size > 60) {
		System.out.println("Wooof! Wooof!");
	  } else if (size >14) {
		System.out.println("Ruff! Ruff!");
	  } else {
		System.out.println("Yip! Yip!");
	  }
	}
}



class DogTestDrive {

	public static void main (String[] args) {
		Dog one = new Dog();
		one.size = 70;
		Dog two = new Dog();
		two.size = 8;
		Dog three = new Dog();
		three.size = 35;

		one.bark();
		two.bark();
		three.bark();
	}
}

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
< A >
class XCopy {

	public static void main(String [] args) {
		
		int orig = 42;
		XCopy x = new XCopy();
		int y = x.go(orig);
		System.out.println(orig + " " + y);
	}

		int go(int arg) {

			arg = arg*2;
			return arg;
		}
}

< B >

class Clock {

	String time;

	void setTime(String t) {
	  time = t;
	}

	String getTime() {
	  return time;//return의 종류를 string으로 한다.
	}
}

class ClockTestDrive {
	public static void main(String [] args) {

	Clock c = new Clock();

	c.setTime("1245");
	String tod = c.getTime();
	System.out.println("time: " + tod);
	}
}

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란? 최근의 소프트웨어 개발 방법론 분야에 새로 등장하였다. 
XP의 가장 큰 장점은 막판에 스펙이 변경되는 일이 있어도 고객이 원하는 것을 고객이 원하는 기한에 맞춰서 제공할 수 있다는 점이다.
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{
public class SimpleDotCom {

	int[] locationCells;//위치를 저장하는 인스턴스 변수이다.
	int numOfHits = 0;
	
	public void setLocationCells(int[] locs) {
			locationCells = locs;//세터로 설정한다.
	}
	
	public String checkYourself(String stringGuess) {//배열을 확인한다.
		int guess = Integer.parseInt(stringGuess);//int로 변환
		String result = "miss";
		for(int i = 0; i < locationCells.length; i++) {
			if(guess == locationCells[i]) {
				result = "hit";
				numOfHits++;
				break;
			}
		}//순환문 끝
		
		if(numOfHits == locationCells.length) {//hits의 개수가 닷컴의 길이와 같은지 보는 if문이다.
			result = "kill";
		}
		System.out.println(result);
		return result;
	}
}

public class SimpleDotComGame {
	public static void main(String[] args) {

		int numOfGuesses = 0;
		GameHelper helper = new GameHelper();
		
		SimpleDotCom theDotCom = new SimpleDotCom();
		int randomNum = (int) (Math.random()*5);
		
		int[] locations = {randomNum, randomNum+1, randomNum+2};
		theDotCom.setLocationCells(locations);
		boolean isAlive = true;
		
		while(isAlive == true) {
			
			String guess = helper.getUserInput("enter a number");
			String result = theDotCom.checkYourself(guess);
			numOfGuesses++;
			
			if(result.equals("kill")) {
				isAlive = false;
				
				System.out.println(numOfGuesses + "guesses");
				
			}
		}
	}
}

import java.io.*;
public class GameHelper {
	public String getUserInput(String prompt) {
		String InputLine = null;
		System.out.print(prompt + " ");
		try {
			BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
			InputLine = is.readLine();
			if (InputLine.length() == 0) return null;
		} catch(IOException e) {
			System.out.println("IOException: "+ e);
		}
		return InputLine;
	}

}

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기
{{{
public class DotcomFirstOption
{
                public static void main(String[] args) 
                {
                        int Guessnumber = 0;
                        GameHelper helper = new GameHelper();
                        SimpleDotCom theDotCom = new SimpleDotCom(); // 새로운 객체를 만든다.
                        int randomNum = (int) (Math.random() * 5);
                        int[] locations = {randomNum, randomNum + 1,randomNum + 2};
                        theDotCom.setLocationCells(locations);
                        boolean Alivedotcom = true;
                        
                        while(Alivedotcom == true)
                        {
                                String guess = helper.getUserInput("enter a number");
                                String result = theDotCom.checkYourself(guess);
                                Guessnumber++;
                                
                                if(result.equals("kill"))
                                {
                                        Alivedotcom = false;
                                        System.out.println(Guessnumber + " guesses");
                                }
                        }
                        
                }

        }




}}}

*163p 닷컴 게임:두번째 옵션*

{{{
public class DotComSecondoption
{
        int[] locationCells;
        int numOfHits = 0;
        boolean[] hitCells = {false, false,false };//hitCells을 정의한다.
        
        public void setLocationCells(int [] locs)
        {
                locationCells = locs;
        }
        
        public String checkYourself(String stringGuess)
        {
                int guess = Integer.parseInt(stringGuess);
                String result = "miss";
                for(int i = 0 ;i < locationCells.length; i++)
                {
                        if(guess == locationCells[i]&& hitCells[i] == false)
                        {
                        
                                result = "hit";
                                hitCells[i] = -1; //틀리면 -1로 만든다.
                                numOfHits++;
                                break;
                        }
                }

        
        if(numOfHits == locationCells.length)
        {
                result = "kill";
        }
        System.out.println(result);
        return result;

        }
}

import java.io.*;


}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{
import java.util.ArrayList;

public class DotCom {
     
     private ArrayList<String> locationCells;

     public void setLocationCells(ArrayList<String> loc) {
          locationCells = loc;
     }//배열 말고 string이 들어가는 ArrayList를 사용한다.

     public void setLocationCells(ArrayList<String>loc)
    {
                locationCells = loc;
    }

     public String checkYourself(String userInput) {

          String result = "miss";
          
               int index = locatios 훈훈 nCells.indexOf(userInput);

               if (index >= 0 ) {

                    locationCells.remove(index);//인덱스의 정보를 지워주는 메소드

                    if (locationCells.isEmpty()) {
                         result = "kill";
                    } else {
                          result = "hit";
                    }
               }
                    return result;
          }
}


            

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{
import java.util.*;

public class DotCom
{
        private ArrayList<String> locationCells;//DotCom의 인스턴스 변수
        private String name;//DotCom의 인스턴스 변수이다.

        public void setLocationCells(ArrayList<String> loc)
        {
                locationCells = loc;//DotCom의 위치를 새롭게 한다
        }
        
        public void setName(String n)
        {
                name = n;//이름을 설정한다.
        }
        
        public String checkYourself(String userInput)
        {
                String status = "miss";//처음에 miss로 초기화한다.
                int index = locationCells.indexOf(userInput);
                //indexOf()메소드를 사용하여 추측한 위치가 ArrayList에 들어있으면 인덱스를 그렇지 않으면 -1을 리턴합니다.

                if(index >= 0)
                {
                        locationCells.remove(index);
                        //remove 메소드를 써서 그 항목을 지운다.
                        if(locationCells.isEmpty())//isEmpty를 써서 모든 위치를 맞췄는지 확인한다
                        {
                                status = "kill";
                                System.out.println("Ouch! You sunk " + name + "    : ( ");
                                //DotCom이 가라앉았다고 알려준다.
                        }
                        else
                        {
                                status = "hit";
                        }
                }

        return status;
        }
        //어떤 값이 나왔는지 알려준다.
}

import java.util.*;

public class DotComBust 
{
        private GameHelper helper = new GameHelper();//GameHelper객체를 생성한다
        private ArrayList<DotCom> dotComsList = new ArrayList<DotCom>();
        private int numOfGuesses = 0;//추측한 숫자를 나타내는 변수를 선언하고 0으로 초기화한다
        
        private void setUpGame()//닷컴 객체 몇 개를 만들고 위치를 지정한다.
        {
                DotCom one = new DotCom();
                one.setName("Pets.com");
                DotCom two = new DotCom();
                two.setName("eToys.com");
                DotCom three = new DotCom();
                three.setName("Go2.com");
                dotComsList.add(one);
                dotComsList.add(two);
                dotComsList.add(three);
                //DotCom 객체 세 개를 만들고 각각 이름을 부여하고 ArrayList에 저장한다
                
                System.out.println("Your goal is to sink three dot coms.");
                System.out.println("Pets.com, eToys.com, Go2.com");
                System.out.println("Try to sink them all in the fewest number of guesses");
                //간단한 게임 방법을 설명한다
                
                for(DotCom dotComToSet : dotComsList)
                {
                        ArrayList<String> newLocation = helper.placeDotCom(3);
                        //DotCom의 위치를 지정하기 위한 보조 메소드를 호출한다
                        dotComToSet.setLocationCells(newLocation);
                        //이 DOtCom 객체의 세터 메소드를 호출하여 방금 보조 메소드에서 받아온 위치를 지정한다.
                        
                }
        }
        
        private void startPlaying()
        {
                while(!dotComsList.isEmpty())//dotComsList가 비어있지 않으면 계속 반복
                {
                        String userGuess = helper.getUserInput("Enter a guess");
                        //사용자가 입력하라고 출력한다.
                        checkUserGuess(userGuess);
                        //메소드를 호출한다
                        
                }
                finishGame();
        }

        private void checkUserGuess(String userGuess)
        {
                numOfGuesses++;//메소드가 호출되면 사용자 추측 횟수를 증가
                String result = "miss";//miss 설정
                
                for(DotCom dotComToTest : dotComsList)
                {
                        result = dotComToTest.checkYourself(userGuess);
                        
                        if(result.equals("hit"))//결과가 hit 면 break
                        {
                                break;
                        }
                        if(result.equals("kill"))//결과가 kill이면 
                        {
                                dotComsList.remove(dotComToTest);//DotCom 목록에서 빼고
                                break;//순환문을 나간다.
                        }
                }
        }
        
        private void finishGame()//게임 결과를 알려주는 메시지를 출력한다.
        {
                System.out.println("All Dot Coms are dead! Your stock is now worthless");
                if(numOfGuesses <= 18)
                {
                        System.out.println("It only took you " + numOfGuesses + " guesses.");
                        System.out.println("You got out before your options sank");
                }
                else
                {
                        System.out.println("Took you long enough. " + numOfGuesses + " guesses.");
                        System.out.println("Fish are dancing with your options");
                }
        }

        public static void main(String[] args)
        {
                DotComBust game = new DotComBust();//DotComBust 객체를 만든다
                game.setUpGame();//게임 객체에 게임을 설정하라는 명령을 내린다.
                game.startPlaying();
                //게임 객체에서 주 게임 진행 순환문을 돌리라는 명령을 내린다.
        }

}


import java.io.*;
import java.util.*;

public class GameHelper
{
        private static final String alphabet = "abcdefg";
        private int gridLength = 7;
        private int gridSize = 49;
        private int[] grid = new int[gridSize];
        private int comCount = 0;
        
        public String getUserInput(String prompt)
        {
                String inputLine = null;
                System.out.println(prompt +" ");
                try
                {
                        BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
                        inputLine = is.readLine();
                        if(inputLine.length() == 0)
                                return null;    
                }
                catch(IOException e)
                {
                        System.out.println("IOException: " + e);
                }
        
                return inputLine.toLowerCase();
                
        }
        
        public ArrayList<String> placeDotCom(int comSize)
        {
                ArrayList<String> alphaCells = new ArrayList<String>();//F6과 같은 좌표가 들어간다
                String temp = null;//나중에 연결하기 위한 임시 String배열
                int[] coords = new int[comSize];//현재 후보 좌표
                int attempts = 0;//시도 횟수를 세기 위한 카운터
                boolean success = false;//적당한 위치를 찾았느지 표시하기 위한 플래그
                int location = 0;//현재 시작 위치
                
                comCount++;//n번째 닷컴
                int incr = 1;//수평 방향으로 증가시킬 값 설정
                if((comCount % 2)==1)//홀수 번째 닷컴인 경우
                {
                        incr = gridLength;//수직 방향으로 증가시킬 값 결정
                }
                
                while(!success & attempts++ < 200)//주 검색 순환문(32)
                {
                        location = (int) (Math.random() * gridSize);//임의 시작 위치를 구함
                        //System.out.print(" try " + location);
                        
                        int x = 0;//위치시킬 닷컴의 n번째 위치
                        success = true;//성공할 것으로 가정함
                        while(success && x < comSize)//닷컴이 들어갈 자리가 비었는지 확인
                        {
                                if(grid[location] == 0)//아직 사용하지 않았으면
                                {
                                        coords[x++] = location;//위치 저장
                                        location += incr;//다음 칸 확인
                                        if(location >= gridSize)//경계를 벗어난 경우
                                                success = false;//실패
                                        if(x > 0 & (location % gridLength == 0))//경계를 벗어난 경우(오른쪽)
                                                success = false;//실패
                                        else//이미 사용중인 경우
                                                //System.out.print(" used " + location)
                                                success = false;//실패
                                }
                        }
                        
                }//while 끝

        int x = 0;//위치를 알파벳 좌표로 바꿈
        int row = 0;
        int column = 0;
        
        while(x < comSize)
        {
                grid[coords[x]] = 1;//기본 그리드 좌표를 사용중 으로 표시
                row = (int) (coords[x] / gridLength);//행 값을 구함
                column = coords[x]&gridLength;//열 값을 구함
                temp = String.valueOf(alphabet.charAt(column));//숫자가 된 열을 알파벳으로 변환
                
                alphaCells.add(temp.concat(Integer.toString(row)));
                x++;
                //System.out.println("   coord  " + x + " = "  + alphaCells.get(x-1));
                //DotCom의 위치를 알려주는 메소드
                                
        }
        
        return alphaCells;
        }
        
}


}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:하위 클래스가 상위 클래스의 인스턴스 변수와 메소드를 려받는다는 의미이다.
 * 다형성:여러가지 형태의 변수들이나 객체를 하나의 배열같은 것 안에서 나타낼 수 있다. 부모의 레퍼런스 변수가 자식을 가리키도록 하는 것이다. 


*208p 클래스 계층 구조* _클래스로 구현_

{{{
class Animal
{
        String picture;
        Boolean food;
        int hunger;
        float boundaries;
        float location;

        void makeNoise()
        {
                //소리를 낼 때의 행동을 나타낸다
        }

        void eat()
        {
                //그 동물이 음식을 접했을 때의 행동을 나타낸다.
        }

        void sleep()
        {
                //그 동물이 잠들어 있을 때의 행동을 나타낸다
        }

        void roam()
        {
                //그 동물이 돌아다닐 때의 행동을 나타낸다.
        }

}
class Feline extends Animal//Feline은 Animal을 상속받는다.
{
        void roam()
        {
                //roam을 오버라이드한다.
        }
}

class Canine extends Animal//Canine은 Animal을 상속받습니다.
{
        void roam()
        {
                //roam을 오버라이드한다.
        }
}

class Lion extends Feline//Lion은 Feline을 확장
{
        void makeNoise()
        {
                //makeNoise를 오버라이드한다.
        }

        void eat()
        {
                //eat를 오버라이드한다.
        }
}

class Tiger extends Feline//Tiger은 Feline을 확장합니다.
{
        void makeNoise()
        {
                //makeNoise를 오버라이드합니다.
        }

        void eat()
        {
                //eat를 오버라이드합니다.
        }
}



class Cat extends Feline//Cat은 Feline을 확장합니다.
{
        void makeNoise()
        {
                //makeNoise를 오버라이드합니다.
        }

        void eat()
        {
                //eat를 오버라이드합니다.
        }
}

class Hiippo extends Animal//Hippo는 Animal을 확장합니다.
{
        void makeNoise()
        {
                //makeNoise를 오버라이드합니다.
        }

        void eat()
        {
                //eat를 오버라이드합니다.
        }
}

class Wolf extends Canine//Wolf는 Canine를 확장합니다.
{
        void makeNoise()
        {
                //makeNoise를 오버라이드합니다.
        }

        void eat()
        {
                //eat를 오버라이드합니다.
        }
}

class Dog extends Canine//Dog는 Canine를 확장합니다.
{
        void makeNoise()
        {
                //makeNoise를 오버라이드합니다.
        }

        void eat()
        {
                //eat를 오버라이드합니다.
        }
}

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:하위 클래스에서 상위 클래스의 함수의 동작을 변경하기 위해 상위 클래스의 함수를 재정의 하는것이다.오버로드는 특성상 한 클래스에서 몇번이고 중복 정의 할수 있지만, 오버라이드는 한 하위 클래스에서 '한번만' 정의 할 수 있다.
 * 오버로딩: 비슷한 일을 하는 함수를 같은 함수이름으로 인자의 갯수를 다르게 하거나, 타입을 다르게 함으로서 구현하는 방법이다.단, 리턴형은 같아도 달라도 무관하다.  오버로딩된 메소드들은 서로 무관한 함수 취급한다.

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
public class MonsterTestDrive {
	public static void main(String [] args) {
	  Monster [] ma = new Monster[3];//Monster 배열을 만든다.
	  ma[0] = new Vampire();
	  ma[1] = new Dragon();
	  ma[2] = new Monster();
	  for(int x = 0; x <3; x++) {
		ma[x].frighten(x);//배열이 각각 frighten을 하도록 만드는 반복문 이다.
	  }
	}
}

class Monster {
	boolean frighten(int d) {
	  System.out.println("arrrgh");//"arrrgh"를 출력한다
	  return true;
	}
}

class Vampire extends Monster { //Vampire는 Monster를 확장한 것이다.
	boolean frighten(int x) {
	  System.out.println("a bite?");//"a bite?"를 출력한다.
	  return false;
	}
}

class Dragon extends Monster {//Dragon은 Monster를 확장한 것이다.
	boolean frighten(int degree) {
	  System.out.println("breath fire");//"breath fire"를 출력한다.
	  return true;
	}
}

//결과적으로 
a bite?
breath fire
arrrgh
가 출력된다.
}}}

public class MonsterTestDrive {
        public static void main(String [] args) {
                Monster [] ma = new Monster[3];
                ma[0] = new Vampire();
                ma[1] = new Dragon();
                ma[2] = new Monster();
                for(int x = 0 ;x<3;x++) {
                        ma[x].frighten(x);
                }
        }
}

class Monster {

boolean frighten(int d) {
        System.out.println("arrrgh");
        return true;
}
}

class Vampire extends Monster {

int frighten(int x){
        System.out.println("a bite?");
        return 1;//return 유형이 int인데(1) 상위클래스는 boolean이기 때문에 오버로딩 불가하다.
}
}

class Dragon extends Monster {
        boolean fighten (int degree ) {
                System.out.println("breath fire");
                return true;
        }
}
}}}

{{{
3.

public class MonsterTestDrive {
        public static void main(String [] args) {
                Monster [] ma = new Monster[3];
                ma[0] = new Vampire();
                ma[1] = new Dragon();
                ma[2] = new Monster();
                for(int x = 0 ;x<3;x++) {
                        ma[x].frighten(x);
                }
        }
}

class Monster {

boolean frighten(int d) {
        System.out.println("arrrgh");
        return false;
}
}

class Vampire extends Monster {

boolean scare(int x){//메소드가 frighten이 아닌 scare. 때문에 이 클래스에서는 상위클래스의 메소드를 사용하게 된다.
        System.out.println("a bite?");
        return true;
}
}

class Dragon extends Monster {
        boolean fighten (int degree ) {
                System.out.println("breath fire");
                return true;
        }
}

//결과는  

arrrgh
breath fire
arrrgh
가 나온다.

}}}

{{{
4. public class MonsterTestDrive {
        public static void main(String [] args) {
                Monster [] ma = new Monster[3];
                ma[0] = new Vampire();
                ma[1] = new Dragon();
                ma[2] = new Monster();
                for(int x = 0 ;x<3;x++) {
                        ma[x].frighten(x);
                }
        }
}

class Monster {

boolean frighten(int d) {
        System.out.println("arrrgh");
        return false;
}
}

class Vampire extends Monster {

boolean frighten(byte b){//상위클래스의 메소드와 매개변수가 다르다. 때문에 오버로드 하지 않는다.

        System.out.println("a bite?");
        return true;
}
}

class Dragon extends Monster {
        boolean fighten (int degree ) {
                System.out.println("breath fire");
                return true;
        }
}

//결과는
arrrgh
breath fire
arrrgh
이 나온다.
}}}


= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:추상 클래스를 의미합니다.
 * 다형성:여러가지 형태를 의미합니다.
 * 추상 클래스:아무도 그 클래스의 새로운 인스턴스를 만들 수 없는 클래스이다.
 * 추상 메소드:추상 메소드는 반드시 오버라이드해야만 하는 메소드이다. 추상메소드를 만들 때에는 클래스도 반드시 추상 클래스로 만들어야 한다. 추상 클래스가 아닌 클래스에 추상 메소드를 집어넣을 수는 없다.
 * 다중 상속:상위 클래스를 두 개 사용하는 접근법이다.

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:힙은 모든 객체가 사는 곳이다.
 * 스택에서의 변수:스택은 메소드가 호출되면 쌓이는 곳이다.
 * 생성자:생성자에는 객체를 생성할 때 실행되는 코드가 들어있다.
 * 널 레퍼런스:널 레퍼런스를 설정하면 리모컨의 기능을 해제하는 것과 같다. 널 레퍼런스에는 널(아무것도 없음)을 나타내는 비트들이 들어있다. 
 
*298p 집중토론* _요약_

 
 * 인스턴스 변수: 인스턴스 변수는 객체의 상태를 저장하는 변수이다.
 * 지역 변수: 지역 변수는 인스턴스 변수에 비해서 수명이 짧다. 지역 변수는 자신의 프레임이 스택 맨 위로 올라갈 때 까지 아무것도 하지 않는다. 인스턴스가 변수가 들어있는 객체를 지역 변수에서만 참조할 수도 있다.


*302p 5분 미스터리* _구현후 주석달기_

{{{
import java.util.*;
class V2Radiator{ // V2Radiator 클래스 선언한다.
        V2Radiator(ArrayList list){
                for(int x=0; x<5; x++){ // 심플유닛 생성
                        list.add(new SimUnit("V2Radiator"));
                }
        }
}

class V3Radiator extends V2Radiator{ // V3Radiator는 V2Fadiator를 확장한다.
        V3Radiator(ArrayList lglist){
                super(lglist); // 상위클래스에서 가져옴
                for(int g=0; g<10; g++){ // 심플유닛 생성
                        lglist.add(new SimUnit("V3Radiator"));
                }
        }
}

class RetentionBot{ // Retention Bot 클래스 선언
        RetentionBot(ArrayList rlist){ 
                rlist.add(new SimUnit("Retention"));//심플유닛 생성
        }
}

public class TestLifeSupportSim{
        public static void main(String [] args){
                ArrayList aList = new ArrayList(); // 배열을 생성
                V2Radiator v2 = new V2Radiator(aList);
                V3Radiator v3 = new V3Radiator(aList);
                for(int z=0; z<20; z++){ // 실행될때마다 메세지를 출력
                        RetentionBot ret = new RetentionBot(aList);
                        System.out.println(z+1 + "unit");
                }
        }
}

class SimUnit{
        String botType;
        SimUnit(String type){
                botType = type;
        }
        int powerUse(){
                if("Retention".equals(botType)){
                        return 2;
                }else{
                        return 4;
                }
        }
}


}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

  * 정적 메소드:클래스의 인스턴스없이 메소드를 실행할 수 있는 메소드이다.
 * 정적 메소드를 선언하는 방법:static을 붙여줍니다.
 * static final: static final 로 선언된 변수는 상수입니다. 한번 초기화되고 나면 절대 바꿀 수 없다.
 * 널 레퍼런스:레퍼런스 변수에 NULL을 대입함으로써 아무것도 참조하지 않는 레퍼런스이다.
 * 오토 박싱:원시값과 래퍼 객체 사이의 변환을 자동으로 처리해주는 기능이다.
 * 정적 임포트:정적 클래스, 정적 변수, enum값 등을 사용할 때 정적 임포트를 활용해서 타이핑을 더 적게 함을 위한 것이다.


*339p Calendar* _구현후 주석달기_

{{{
import java.util.*;
public class Calender{
        public static void main(String[] args){
                Calendar c = Calendar.getInstance();
                c.set(2004,0,7,15,40); // 시각을 2004년 1월 7일 15:40으로 설정
                   long day1 = c.getTimeInMillis(); // 1970년 1월 1일부터 경과한 시간을 밀리초 단위로 표현한 값을 리턴
                   day1 += 1000*60*60;
                c.setTimeInMillis(day1); // 한 시간에 해당하는 밀리초 만큼의 시간을 더하고 시간을 갱신.
                System.out.println("new hour " + c.get(c.HOUR_OF_DAY));
                c.add(c.DATE, 35); // 35일을 더한다.
                System.out.println("add 35 days " + c.getTime());
                c.roll(c.DATE, 35); // 35일 뒤로 넘긴다.
                System.out.println("roll 35 days " + c.getTime());
                c.set(c.DATE, 1); // 날짜를 1로 설정
                   System.out.println("set to 1 " + c.getTime());
}
}


}}}

*342p 집중토론* _요약_

 * 인스턴스 변수: 인스턴스마다 하나씩 있다. 
 * 지역 변수: 클래스마다 하나씩 있어서 메모리가 많이 절약된다. 한 클래스에 속하는 모든 인스턴스에 의해서 공유된다. 


*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
class StaticSuper{ // 클래스 선언

  static{
    System.out.println("super static block");
  }

  StaticSuper{
    System.out.println(
      "super constructor");
  }
}

public class StaticTests extends StaticSuper{ // 클래스 확장
  static int rand;

  static{
    rand = (int) (Math.random() * 6);
    System.out.println("static block " + rand);
  }

  staticTests(){
    System.out.println("constructor");
  }

  public static void main(String [] args){ // 메인메소드
    System.out.println("in main");
    StaticTests st = new StaticTests();
  }
}



}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{
public class Test
{

        public static void main()
        {
                
        
        public void takeRisk() throws BadException
        {
                if(abandonAllHope)
                {
                        throw new BadException();
                }
        }
        
        public void crossFingers()
        {
                try
                {
                        anObject.takeRisk();
                }
                catch(BadException ex)//오류가 떴을  밑에 부분이 실행되도록 합니다.
                {
                        System.out.println("Aaargh!");
                        ex.printStackTrace();
                }
        }
        
        }
}



}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{
import javax.sound.midi.*;

public class MiniMiniMusicApp
{
        public static void main(String[] args)
        {
                MiniMiniMusicApp mini = new MiniMiniMusicApp();
                mini.play();
        }
        
        public void play()
        {
                try
                {
                        Sequencer player = MidiSystem.getSequencer();
                        player.open();//Sequencer를 연다.
                        
                        Sequence seq = new Sequence(Sequence.PPQ, 4);
                        
                        //Sequence에 Track을 요청
                        Track track = seq.createTrack();
                        //MidiEvent를 집어넣는다.
                        ShortMessage a = new ShortMessage();
                        a.setMessage(144, 1, 44, 100);
                        MidiEvent noteOn = new MidiEvent(a, 1);
                        track.add(noteOn);
                        
                        ShortMessage b = new ShortMessage();
                        b.setMessage(128, 1, 44, 100);
                        MidiEvent noteOff = new MidiEvent(b, 16);
                        track.add(noteOff);
                        
                 
                      
              
                        
                        player.setSequence(seq);//Sequencer에 Sequence를 보낸다.
                        
                        player.start();
                        
                }
                catch(Exception ex)
                {
                        ex.printStackTrace();
                        
                }
                
        }
}


}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{
import javax.sound.midi.*;

public class MiniMusicCmdLine { 

        public static void main(String[]args){
                MiniMusicCmdLine mini = new MiniMusicCmdLine();//MiniMusicCmdLine의 새로운 객체를 생성
                if(args.length<2){
                        System.out.println("악기와 음 높이를 지정하는 인자를 입력하세요.");
                }else{
                        int instrument = Integer.parseInt(args[0]);
                        int note = Integer.parseInt(args[1]);
                        mini.play(instrument, note);//인자 전달과 동시에  play 메소드를 호출
                }
        } 

         
        public void play (int instrument, int note){
                try{
                        Sequencer player = MidiSystem.getSequencer();
                        player.open();
                        Sequence seq = new Sequence(Sequence.PPQ, 4);
                        Track track = seq.createTrack();//Track을 생성

                        MidiEvent event = null; //null값을 집어 넣습니다.

                        ShortMessage first = new ShortMessage();
                        first.setMessage(192,1,instrument,0);
                        MidiEvent changeInstrument = new MidiEvent(first, 1);
                        track.add(changeInstrument);

                        ShortMessage a = new ShortMessage();
                        a.setMessage(144,1,note,100);
                        MidiEvent noteOn = new MidiEvent(a,1);
                        track.add(noteOn);

                        ShortMessage b = new ShortMessage();
                        a.setMessage(128,1,note,100);
                        MidiEvent noteOff = new MidiEvent(b,16);
                        track.add(noteOff);
                        player.setSequence(seq);
                        player.start();
                }catch(Exception ex){ex.printStackTrace();}
        } 
}



}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}