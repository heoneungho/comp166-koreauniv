#summary 최수아의 실습 페이지입니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{
public class BeerSong{
	public static void main (String[] args) {
		int beerNum = 99;
		string word = "bottles"; //복수형

		while (beerNum > 0) {

			if (beerNum == 1){
				word = "bottle"; //단수형(한 병인 경우)
			}

			System.out.println(beerNum + " " + word + " of beer on the wall");
			System.out.println(beerNum + " " + word + " of beer.");
			System.out.println("Take one down.");
			System.out.println("Pass it around.");
			beerNum = beerNum - 1;

			if (beerNum > 0) {
				if (beerNum == 1)
					word = "bottle";
				System.out.println(beerNum + " " + word + " of beer on the wall");
			} else {
				System.out.println("No more bottles of beer on the wall");
			} //else 문 끝
		} //while 순환문 끝
 	}//main 클래스 끝
}// 클래스 끝
}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{
public class PhraseOMatic{
	public static void main (String[] args) {

	String[] wordListOne = {"print", "open", "smart", "length", "world", "document"};
	
	String[] wordListTwo = {"class", "keyboard", "mouse", "phone"};

	String[] wordListThree = {"apple", "kiwi", "orange", "strawberry", "banana"};

	int oneLength = wordListOne.length;
	int twoLength = wordListTwo.length;
	int threeLength = wordListThree.length;

	int rand1 = (int) (Math.random() * oneLength);
	int rand2 = (int) (Math.random() * twoLength);
	int rand3 = (int) (Math.random() * threeLength);

	String phrase = wordListOne[rand1] + " " + wordListTwo[rand2] + " " + wordListThree[rand3];

	System.out.println("What we need is a " + phrase);	
	}
}
}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 프로그램 실행. 바이트코드가 만들어진 다음 바이트코드가 실행되기 전까지 다른 누군가가 그것을 건드리지 않았는지 확인함. 
 * 컴파일러:가상머신에서 텍스트 편집기로 만든 소스 코드를 해석하고 문법이 맞았는지를 확인함. 변수에 이상한 유형의 데이터를 저장할 수 없도록 함. 보호되는 메소드를 바꾸는 것을 막아줌. 

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A
class Exercise1b {
        public static void main(String [] args) {
        int x=1;
        while (x<10){
                x=x+1; //add x so that end the loop
                if(x>3) {
                        System.out.println("big x");
                        }
                }
        }
}


B
class Exercise1b { //need class
        public static void main(String []args) {
        int x = 5;
        while(x>1){
                x=x-1;
                if (x<3){
                        System.out.println("small x");
                        }
                }
        }
}

C
class Exercise1b {
        public static void main(String [] args) { //need main method
        int x=5;
        while(x>1) {
                x=x-1;
                if(x>3) {
                        System.out.println("small x");
                        }
                }
        }
}
}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수:아는 것. 클래스의 인스턴스 변수용으로 쓰기 위한 변수를 가질 수 있음. 객체. 
 * 메소드:하는 것. 
 * 클래스:객체를 만들기 위한 틀. 가상머신에 그 유형의 객체를 만드는 방법을 알려줌. 
 * 테스트용 클래스:새로운 클래스를 테스트하기 위한 클래스
 

*68p Television* _채워넣기_

 * 인스턴스 변수:Light, Volume, Channel, Power, Size 
 * 메소드:Light(), Volumeup(), Volumedown(), Poweron(), Poweroff() 


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{
public class GuessGame {
                Player p1;
                Player p2;
                Player p3;
                Player p4;
        
                public void startGame(){
                        p1 = new Player();
                        p2 = new Player();
                        p3 = new Player();
                        p4 = new Player();

                        int guessp1 = 0;
                        int guessp2 = 0;
                        int guessp3 = 0;
                        int guessp4 = 0;

                        boolean p1isRight = false;
                        boolean p2isRight = false;
                        boolean p3isRight = false;
                        boolean p4isRight = false;

                        int targetNumber = (int) (Math.random() *10);
                        System.out.println("0 over 9 under");
                        
                        while(true){
                                System.out.println("right number " + targetNumber + ".");

                        p1.guess();
                        p2.guess();
                        p3.guess();
                        p4.guess();

                        guessp1 = p1.number;
                        System.out.println("player 1 picked: "+guessp1);
                        
                        
                        guessp2 = p2.number;
                        System.out.println("player 2 picked: "+guessp2);

                        guessp3 = p3.number;
                        System.out.println("player 3 picked: "+guessp3);


                        guessp4 = p4.number;
                        System.out.println("player 4 picked: "+guessp4);


                        if (guessp1 == targetNumber){
                                p1isRight = true;
                        }

                        if (guessp2 == targetNumber){
                                p2isRight = true;
                        }

                        if (guessp3 == targetNumber){
                                p3isRight = true;
                        }

                        if (guessp4 == targetNumber){
                                p4isRight = true;
                        }

                        if (p1isRight || p2isRight || p3isRight || p4isRight) {

                                System.out.println("Right number!");
                                System.out.println("player 1 : "+ p1isRight);
                                System.out.println("player 2 : "+ p2isRight);
                                System.out.println("player 3 : "+ p3isRight);
                                System.out.println("player 4 : "+ p4isRight);
                                System.out.println("Game set.");

                                break;

                        } else {
                
                                System.out.println(" Try again ");
                         }
                        }
                     }
                }

pubilc class Player{
        int number = 0;

        public void guess() {
                number = (int) (Math.random() *10);
                System.out.println("Selected number: "+number);
        }
      }

public class GameLauncher {
        public static void main (String[] args) {
                GuessGame game = new GuessGame();
                game.startGame();
        }
      }                 

}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A
public class TapeDeck {

        boolean canRecord = false;
    
    void playTape() {
            System.out.println("tape playing");
    }
    
    void recordTape() {
            System.out.println("tape recording");
    }
}

class TapeDeckTestDrive {
    public static void main(String [] args) {
    
            TapeDeck t = new TapeDeck(); //t라는 TapeDeck 객체 선언

            t.canRecord = true;
            t.playTape();
            
            if(t.canRecord == true ) {
                    t.recordTape();
                    }
            }
}
B
public class DVDPlayer {
        
        boolean canRecord = false ;
        
        void recordDVD() {
                System.out.println("DVD recording");
        }
        void playDVD() {//playDVD메소드 선언
                System.out.println("DVD playing");

        }
}
public class DVDPlayerTestDrive {
        public static void main(String [] args) {
        
        DVDPlayer d = new DVDPlayer ();
        d.canRecord = true;
        d.playDVD ();
        
        if(d.canRecord == true) {
                d.recordDVD();
                }
        }
}

}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수: 원시변수에는 넝수, 부울, 부동소수점 수와 같은 기초적인 값이 들어감. 객체 레퍼런스에는 객체에 대한 레퍼런스가 들어감.
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{
class Dog{
        String name;
        public static void main(String[] args){
                Dog dog1 = new Dog();
                dog1.bark();
                dog1.name = "Bart";

                Dog[] myDogs = new Dog[3];
                myDogs[0] = new Dog();
                myDogs[1] = new Dog();
                myDogs[2] = dog1;

                myDogs[0].name = "Fred";
                myDogs[1].name = "Marge";

                System.out.print("The name of the last Dog : ");
                System.out.println(myDogs[2].name);

                int x = 0;
                while(x<myDogs.length){
                        myDogs[x].bark();
                        x = x+1;
                }

        }

        public void bark(){
                System.out.println(name + " barks.");
        }
}


}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A

class Books{
        String title;
        String author;
}

class BooksTest{
        public static void main(String[] args){
                Books[] myBooks = new Books[3];

                myBooks[0] = new Books();
                myBooks[1] = new Books();
                myBooks[2] = new Books();//각자 개체를 추가해주어야 한다.

                int x = 0;
                myBooks[0].title = "The Grapes of Java";
                myBooks[1].title = "The Java Gatsby";
                myBooks[2].title = "The Java Cookbook";
                myBooks[0].author = "bob";
                myBooks[1].author = "sue";
                myBooks[2].author = "ian";

                while(x<3) {
                        System.out.print(myBooks[x].title);
                        System.out.print(" by ");
                        System.out.println(myBooks[x].author);
                        x = x+1;
                }
        }
}

B

class Hobbits{
        String name;
}
class HobbitsTest{
        public static void main(String[] args){
                Hobbits[] h = new Hobbits[3];
                int z=0;

                while(z<3){
                        h[z] = new Hobbits();
                        h[z].name = "bilbo";
                        if(z==1)
                                h[z].name = "frodo";
                        if(z==2)
                                h[z].name = "sam";
                        
                        System.out.print(h[z].name + " is a ");
                        System.out.println("good Hobbit name.");

                        z = z+1;//마지막에 증가시켜야 한다. 그대로 실행하면 h[0]이 없다.

                }
        }
}
}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?: 밥이 이겼다
 * 문제가 된 부분은 어딘가요?:켄트는 메모리를 절약하기 위해 동일한 변수명을 사용하여 연락처 객체를 10개를 만들었지만 만들어진 객체 중 마지막 객체를 제외한 나머지에는 접근할 수 없다는 문제가 생겼기 때문이다.

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:데이터와 자신이 구현한 코드를 나중에 수정할 권한을 보호할 수 있도록 구현하는 방법
 * 게터와 세터:
     게터 : 인스턴트 변수의 값을 알아내기 위한 메소드
     세터 : 인스턴트 변수의 값을 설정하기 위한 메소드
 * 인스턴스 변수 vs 지역 변수:
     인스턴트 변수는 클래스 내에서 선언되고, 선언 시 초기화 값을 지정해주지 않아도 항상 기본값이 들어간다.
 
*107p Dog* _실행_

{{{
클래스 Dog

public class Dog {
        int size;
        String name;
        
        void bark() {
                if(size > 60) {
                        System.out.println("Wooof! Wooof!");
                } else if(size > 14) {
                        System.out.println("Ruff! Ruff!");
                } else {
                        System.out.println("Yip! Yip!");
                } //if-else문 종료
        }  //메소드 bark종료
}  //클래스 Dog종료
클래스 DogTestDrive

public class DogTestDrive {
        
        public static void main(String[] args) {
                Dog one = new Dog();
                one.size = 70;
                Dog two = new Dog();
                two.size = 8;
                Dog three = new Dog();
                three.size = 35;
                
                one.bark();
                two.bark();
                three.bark();
        }  //메인 메소드 종료

}  //클래스 DogTestDrive 종료

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A 


class XCopy {
        public static void main(String[] args) {
                
                int orig = 42;
                
                XCopy x = new XCopy();
                
                int y = x.go(orig);
                
                System.out.println(orig + " " + y);
        }  // 메인 메소드 종료
        
        int go(int arg) {
                
                arg = arg * 2;
                
                return arg;
        }  //메소드 go 종료
}  //클래스 XCopy 종료
* A의 연산 결과
  
    42 84 

B

클래스 Clock


class Clock {
        String time;
        
        void setTime(String t) {
                time = t;
        }
        
        String getTime() {   /*리턴형을 String으로 수정 */ 
                return time;
        }
}

클래스 ClockTestDrive


class ClockTestDrive {
        public static void main(String[] args) {
                
                Clock c = new Clock();
                
                c.setTime("1245");
                String tod = c.getTime();
                System.out.println("time : " + tod);
        }

}
}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
    
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{
public class SimpleDotCom
{
        int[] locationCells;
        int numOfHits = 0;

        public void setLocationCells(int[] locs)
        {
                locationCells = locs;
        }

        public String checkYourself(String stringGuess)
        {
                int guess = Integer.parseInt(stringGuess);
                /* String을 int로 변환 */
                String result = "miss";
                /* 리턴할 결과를 저장할 변수 만든다. 기본값은 miss */
                for(int i = 0; i< locationCells.length; i++)
                {
                        if (guess == locationCells[i])
                        {
                                result = "hit";
                                numOfHits++;
                                break;
                        }
                } // 순환문 끝

                if (numOfHits == locationCells.length)
                {
                        result = "kill";
                }
                System.out.println(result);
                        return result; 
                        /* 메소드를 호출할 메소드로 결과를 리턴 */
        } // 메소드 끝
} // 클래스 끝

public class SimpleDotComGame {
public static void main(String[] args)
{
        int numOfGuesses = 0; // 사용자가 추측한 횟수 추측하는 변수
        GameHelper helper = new GameHelper();  /* 사용자로부터 입력을 받기 위한 메소드가 들어있는 클래스 만든다. */

        SimpleDotCom theDotCom = new SimpleDotCom(); /* 닷컴 객체를 만든다.*/

        int randomNum = (int) (Math.random() * 5); 
        int[] locations = {randomNum, randomNum+1, randomNum+2}; 
        /* 첫번째 셀 위치를 정하기 위한 난수를 만들고 그 값을 써서 셀 위치 배열을 만든다 */

        theDotCom.setLocationCells(locations); // 닷컴의 위치 지정
        boolean isAlive = true;

        while(isAlive == true)
        {
                String guess = helper.getUserInput("enter a number");
                /* 사용자가 입력한 String을 받아온다*/
                String result = theDotCom.checkYourself(guess);
                /* 닷컴 객체를 통해 추측한 값이 맞는지 확인 */
                numOfGuesses++;
                if (result.equals("kill"))
                {
                        isAlive = false;
                        System.out.println(numOfGuesses + " guesses");
                } // if 문 끝
        } // while 문 끝
} // main 문 끝
}

import java.io.*
public class GameHelper
{
        public String getUserInput(String prompt)
        {
                String inputLine = null;
                System.out.print(prompt + " ");
                try
                {
                        BufferedReader is = new BufferedReader ( new InputStreamReader(System.in));
                inputLine = is.readLine();
                if(inputLine.length() == 0) return null;
                }
                catch (IOException e)
                {
                        System.out.println("IOException: "+ e);
                }
                return inputLine;
        }
}
}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{
import java.io.*;

public class GameHelper {
        
        public String getUserInput(String prompt) {
                
                String inputLine = null;
                
                System.out.print(prompt + " " );
                
                try{
                
                        BufferedReader is = new BufferedReader (
                        
                        new InputStreamReader(System.in));
                        
                inputLine = is.readLine();
        
                if(inputLine.length()==0) return null;
                        
                } catch (IOException e) {
                        
                        System.out.println("IOExceoption:  " + e);
                }
                
                return inputLine;
        }
}



public class SimpleDotCom {
        
        int[] locationCells;
        boolean[] hitCells = new boolean[3];//hitCells이라는 boolean형 배열을 생성
        int numOfHits = 0 ;

        public void setLocationCells(int[] locs) {
                locationCells = locs;
        }
        
        public void sethitCells(boolean[] hit) {//위의 setLocationCells처럼 sethitCells메소드를 추가
                hitCells = hit;
        }
        public String checkYourself(String stringGuess) {
                int guess = Integer.parseInt(stringGuess);
                String result = "miss";
                for(int i=0;i<locationCells.length;i++) {
                        if(guess==locationCells[i]&&hitCells[i]==false) {//이미 맞췃는지에대한 확인추가
                                result = "hit";
                                numOfHits++;
                                hitCells[i]=true;//맞췃다는 표시를함
                                break;
                        }
                }
                
                if(numOfHits == locationCells.length) {
                        result = "kill";
                }
                System.out.println(result);
                return result;
        }
}


public class SimpleDotComTestDrive { 

        public static void main(String[] args) {

                int numOfGuesses = 0;
                GameHelper helper = new GameHelper();

                SimpleDotCom theDotCom = new SimpleDotCom();

                int randomNum = (int) (Math.random() * 5); // 난수를 발생합니다.

                int[] locations = { randomNum, randomNum + 1, randomNum + 2 };
        
                boolean[] hitCells = new boolean[3];//첫번째 옵션에 필요한 boolean배열을 생성
                theDotCom.sethitCells(hitCells);//boolean배열을 닷컴클래스로 보내줌
                theDotCom.setLocationCells(locations);
                boolean isAlive = true;

                while (isAlive == true) {
                        String guess = helper.getUserInput("enter a number");
                        String result = theDotCom.checkYourself(guess);
                        numOfGuesses++;

                        if (result.equals("kill")) {
                                isAlive = false;
                                System.out.println(numOfGuesses + " guesses");
                        }

                } 

        } 
}
}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{
import java.io.*;

public class GameHelper {
	
	public String getUserInput(String prompt) {
		
		String inputLine = null;
		
		System.out.print(prompt + " " );
		
		try{
		
			BufferedReader is = new BufferedReader (
			
			new InputStreamReader(System.in));
			
		inputLine = is.readLine();
	
		if(inputLine.length()==0) return null;
			
		} catch (IOException e) {
			
			System.out.println("IOExceoption:  " + e);
		}
		
		return inputLine;
	}
}

public class SimpleDotCom {
	
	int[] locationCells;
	int numOfHits = 0 ;

	public void setLocationCells(int[] locs) {
		locationCells = locs;
	}
	
	public String checkYourself(String stringGuess) {
		int guess = Integer.parseInt(stringGuess);
		String result = "miss";
		for(int i=0;i<locationCells.length;i++) {
			if(guess==locationCells[i]&&locationCells[i]!=-1) {//-1이면 맞춘자리 이므로 이에대한 확인
				result = "hit";
				numOfHits++;
				locationCells[i]=-1;//맞췃다는 표시로 -1을 넣어줌
				break;
			}
		}
		
		if(numOfHits == locationCells.length) {
			result = "kill";
		}
		System.out.println(result);
		return result;
	}
}

public class SimpleDotComTestDrive { 

        public static void main(String[] args) {

                int numOfGuesses = 0;
                GameHelper helper = new GameHelper();

                SimpleDotCom theDotCom = new SimpleDotCom();

                int randomNum = (int) (Math.random() * 5); // 난수를 발생합니다.

                int[] locations = { randomNum, randomNum + 1, randomNum + 2 };
                theDotCom.setLocationCells(locations);
                boolean isAlive = true;

                while (isAlive == true) {
                        String guess = helper.getUserInput("enter a number");
                        String result = theDotCom.checkYourself(guess);
                        numOfGuesses++;

                        if (result.equals("kill")) {
                                isAlive = false;
                                System.out.println(numOfGuesses + " guesses");
                        }

                } 

        } 
}

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{
import java.util.ArrayList;

public class DotCom {

  private ArrayList<String> locationCells;
  //private int numOfHits;
  //(없어도 됩니다.)

  public void setLocationCells(ArrayList<String> loc) {
    locationCells = loc;
  }

  public String checkYourself(String userInput) {

    String result = "miss";

      int index = locationCells.indexOf(userInput);

       if(index>=0) {

          locationCells.remove(index);

          if(locationCells.isEmpty()){
            result = "kill";
          } else {
            result = "hit";
          }//if문 끝

         }//바깥쪽if문 끝

      return result;

   }//메소드 끝
 }//클래스끝

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{
import java.util.*;

public class DotCom
{
        private ArrayList<String> locationCells;//DotCom의 인스턴스 변수 셀위치
        private String name;//DotCom의 인스턴스 변수  DotCom의 이름

        public void setLocationCells(ArrayList<String> loc)
        {
                locationCells = loc;//DotCom의 위치를 받음
        }
        
        public void setName(String n)
        {
                name = n;//이름을 설정
        }
        
        public String checkYourself(String userInput)
        {
                String status = "miss";//올바른 실행을 위해 초기값은 miss
                int index = locationCells.indexOf(userInput);
                //ArrayList의 indexOf()메소드를 사용하여  사용자가 추측한 위치가 ArrayList에 들어있으면 인덱스를 그렇지 않으면 -1을 리턴
                if(index >= 0)
                {
                        locationCells.remove(index);
                        //삭제합니다.
                        if(locationCells.isEmpty())//모두 비엇는지 확인
                        {
                                status = "kill";
                                System.out.println("Ouch! You sunk " + name + "    : ( ");
                                //영어여서 짜증나지만 맞춘것 표시
                        }
                        else
                        {
                                status = "hit";
                        }
                }//if문 끝

        return status;
        }
        //status에는 miss나 kiil이나 hit이 저장됩니다.
}

import java.util.*;

public class DotComBust 
{
        private GameHelper helper = new GameHelper();//객체를 생성합니다.
        private ArrayList<DotCom> dotComsList = new ArrayList<DotCom>();//DotCom객체로 이루어진 ArrayList를 만듭니다.
        private int numOfGuesses = 0;
        
        private void setUpGame()//닷컴 객체를 만들고 위치를 지정
        {
                DotCom one = new DotCom();
                one.setName("Pets.com");
                DotCom two = new DotCom();
                two.setName("eToys.com");
                DotCom three = new DotCom();
                three.setName("Go2.com");
                dotComsList.add(one);
                dotComsList.add(two);
                dotComsList.add(three);
                //DotCom 객체 세 개를 만들고 각각 이름을 부여하고 ArrayList에 저장합니다.
                
                System.out.println("Your goal is to sink three dot coms.");
                System.out.println("Pets.com, eToys.com, Go2.com");
                System.out.println("Try to sink them all in the fewest number of guesses");
                //사용자에게 간단한 게임 방법을 설명합니다.
                
                for(DotCom dotComToSet : dotComsList)//모든 dotCom에 반복
                {
                        ArrayList<String> newLocation = helper.placeDotCom(3);
                        
                        dotComToSet.setLocationCells(newLocation);
                        //이 DOtCom 객체의 세터 메소드를 호출하여 방금 보조 메소드에서 받아온 위치를 지정
                        
                }//for 순환문 끝
        }//setUpgame 메소드 끝
        
        private void startPlaying()
        {
                while(!dotComsList.isEmpty())//dotComsList가 비어있지 않으면 계속 반복합니다.
                {
                        String userGuess = helper.getUserInput("Enter a guess");
                        //추측시작
                        checkUserGuess(userGuess);
                        //checkUserGuess 메소드를 호출
                        
                }//while문 끝
                finishGame();
        }//startPlaying 메소드 끝

        private void checkUserGuess(String userGuess)
        {
                numOfGuesses++;//메소드가 호출되면 사용자 추측 횟수를 증가
                String result = "miss";//일단 miss라고 초기화
                
                for(DotCom dotComToTest : dotComsList)//목록의 모든 DotCom 객체에 대해 반복합니다.
                {
                        result = dotComToTest.checkYourself(userGuess);
                        //결과확인?
                        if(result.equals("hit"))//hit일때
                        {
                                break;//부레이쿠!
                        }
                        if(result.equals("kill"))//kill일때
                        {
                                dotComsList.remove(dotComToTest);//지움!
                                break;
                        }
                }//for 문 끝
        }//checkUserGuess 메소드 끝
        
        private void finishGame()//게임이 끝난후 사용하는 메소드
        {
                System.out.println("All Dot Coms are dead! Your stock is now worthless");
                if(numOfGuesses <= 18)
                {
                        System.out.println("It only took you " + numOfGuesses + " guesses.");
                        System.out.println("You got out before your options sank");
                }
                else
                {
                        System.out.println("Took you long enough. " + numOfGuesses + " guesses.");
                        System.out.println("Fish are dancing with your options");
                }
        }

        public static void main(String[] args)
        {
                DotComBust game = new DotComBust();//객체생성
                game.setUpGame();//게임설정
                game.startPlaying();
                //게임시작
        }

}


import java.io.*;
import java.util.*;

public class GameHelper
{
        private static final String alphabet = "abcdefg";
        private int gridLength = 7;
        private int gridSize = 49;
        private int[] grid = new int[gridSize];
        private int comCount = 0;
        
        public String getUserInput(String prompt)
        {
                String inputLine = null;
                System.out.println(prompt +" ");
                try
                {
                        BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
                        inputLine = is.readLine();
                        if(inputLine.length() == 0)
                                return null;    
                }
                catch(IOException e)
                {
                        System.out.println("IOException: " + e);
                }
        
                return inputLine.toLowerCase();
                
        }
        
        public ArrayList<String> placeDotCom(int comSize)
        {
                ArrayList<String> alphaCells = new ArrayList<String>();//좌표
                String temp = null;//temp의 용도로 사용되는 String
                int[] coords = new int[comSize];//현재 후보 좌표
                int attempts = 0;//카운터
                boolean success = false;//적당한 위치를 찾았느지 표시하기 위한 플래그
                int location = 0;//현재 시작 위치
                
                comCount++;//n번째 닷컴
                int incr = 1;//수평 방향으로 증가시킬 값 설정
                if((comCount % 2)==1)//홀수 번째 닷컴인 경우
                {
                        incr = gridLength;//수직 방향으로 증가시킬 값 결정
                }
                
                while(!success & attempts++ < 200)//주 검색 순환문(32)
                {
                        location = (int) (Math.random() * gridSize);//임의 시작 위치를 구함
                        //System.out.print(" try " + location);
                        
                        int x = 0;//위치시킬 닷컴의 n번째 위치
                        success = true;//성공할 것으로 가정함
                        while(success && x < comSize)//닷컴이 들어갈 자리가 비었는지 확인
                        {
                                if(grid[location] == 0)//아직 사용하지 않았으면
                                {
                                        coords[x++] = location;//위치 저장
                                        location += incr;//다음 칸 확인
                                        if(location >= gridSize)//경계를 벗어난 경우
                                                success = false;//실패
                                        if(x > 0 & (location % gridLength == 0))//경계를 벗어난 경우(오른쪽)
                                                success = false;//실패
                                        else//이미 사용중인 경우
                                                //System.out.print(" used " + location)
                                                success = false;//실패
                                }
                        }
                        
                }//while 끝

        int x = 0;
        int row = 0;
        int column = 0;
        
        while(x < comSize)
        {
                grid[coords[x]] = 1;//기본 그리드 좌표를 사용중 으로 표시
                row = (int) (coords[x] / gridLength);//행 값을 구함
                column = coords[x]&gridLength;//열 값을 구함
                temp = String.valueOf(alphabet.charAt(column));//숫자가 된 열을 알파벳으로 변환
                
                alphaCells.add(temp.concat(Integer.toString(row)));
                x++;
                //System.out.println("   coord  " + x + " = "  + alphaCells.get(x-1));
                //DotCom의 위치를 알려주는 메소드
                                
        }
        
        return alphaCells;
        }
        
}
}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속: 공통적인 코드를 어떤 클래스에 넣은 다음,다른 더 구체적인 클래스에 공통적인(더 추상적인) 클래스가 상위클래스라는 것을 알려주면 됩니다. 한 클래스가 다른 클래스를 상속하는 것을 하위클래스가 상위클래스로부터 상속받는다고 말합니다.
 * 다형성: 다형성을 사용하면 레퍼런스 유형을 실제 객체 유형의 상위클래스 유형으로 지정할 수 있습니다. 다형성은 하나의 변수와 메소드가 다양한 의미로 사용 가능하다는 것이고 인자와 리턴 유형에 대해서도 다형성을 적용할 수 있습니다.

*208p 클래스 계층 구조* _클래스로 구현_

{{{
class Animal
{
        String picture; //그 동물의 모습을 보여주는 JPEG파일명
        Boolean food;//그 동물이 먹는 음식의 형식,초식과 육식
        int hunger;//동물이 배고픈 정도
        float boundaries;//동물이 돌아다니는 공간
        float location;//동물의 위치를 나타내는 좌표

        void makeNoise()
        {
//동물이 소리를 낼 떄의 행동
        }

        void eat()
        {
//동물이 음식을 접했을 때의 행동
        }

        void sleep()
        {
//동물이 잠들어 있을 때의 행동
        }

        void roam()
        {
//동물이 배회할때의 행동
        }

}
//Animal을 상속받습니다.
class Feline extends Animal
{
        void roam()
        {
            // roam를 오버라이드합니다.
        }
}
//Animal을 상속받습니다.
class Canine extends Animal
{
        void roam()
        {
             // roam을 오버라이드합니다.
        }
}
//Feline을 상속받습니다.
class Lion extends Feline
{
        void makeNoise()
        {
              // makeNoise를 오버라이드합니다.
        }

        void eat()
        {
              //eat를 오버라이드합니다.
        }
}
//Feline을 상속받습니다.
class Tiger extends Feline
{
        void makeNoise()
        {
           // makeNoise를 오버라이드합니다.
        }

        void eat()
        {
           // eat를 오버라이드합니다.
        }
}


//Feline을 상속받습니다.
class Cat extends Feline
{
        void makeNoise()
        {
              
        }

        void eat()
        {
             //eat를 오버라이드합니다.
        }
}
//Animal을 상속받습니다.
class Hiippo extends Animal
{
        void makeNoise()
        {
             // makeNoise를 오버라이드합니다.
        }

        void eat()
        {
              //eat를 오버라이드합니다.
        }
}
//Canine을 상속받습니다.
class Wolf extends Canine
{
        void makeNoise()
        {
           // makeNoise를 오버라이드합니다.
        }

        void eat()
        {
           //eat를 오버라이드합니다.
        }
}
//Canine을 상속받습니다.
class Dog extends Canine
{
        void makeNoise()
        {
           // makeNoise를 오버라이드합니다.
        }

        void eat()
        {
            //eat를 오버라이드합니다.
        }
}

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:  오버라이드를 사용하여 상위클래스의 메소드를 하위클래스에서 재 정의하여 사용할수 있습니다.
 * 오버로딩: 메소드 오버로딩은 이름이 같고 인자 목록이 다른 메소드 두개를 만드는 것입니다. 오버로드된 메소드는 다형성과 전혀 관계가 없습니다. 오버로딩을 활용하여 같은 메소드를 서로 다른 인자 목록을 가진 여러 버전으로 만들 수 있습니다. 
오버로딩의 경우는 리턴 유형이 달라도 되지만 리턴 유형만 달라서는 안됩니다. 또한 접근 단계를 마음대로 바꿀 수 있습니다.

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
1.

public class MonsterTestDrive {
	public static void main(String [] args) {
		Monster [] ma = new Monster[3];
		ma[0] = new Vampire();
		ma[1] = new Dragon();
		ma[2] = new Monster();
		for(int x = 0 ;x<3;x++) {
			ma[x].frighten(x);
		}
	}
}

class Monster {

boolean frighten(int d) {
	System.out.println("arrrgh");
	return true;
}
}

class Vampire extends Monster {

boolean frighten(int x){
	System.out.println("a bite?");
	return false;
}
}

class Dragon extends Monster {
	boolean fighten (int degree ) {
		System.out.println("breath fire");
		return true;
	}
}

제대로 작동합니다.

결과값 : 
a bite?
breath fire
arrrgh
}}}

{{{

2.

public class MonsterTestDrive {
	public static void main(String [] args) {
		Monster [] ma = new Monster[3];
		ma[0] = new Vampire();
		ma[1] = new Dragon();
		ma[2] = new Monster();
		for(int x = 0 ;x<3;x++) {
			ma[x].frighten(x);
		}
	}
}

class Monster {

boolean frighten(int d) {
	System.out.println("arrrgh");
	return true;
}
}

class Vampire extends Monster {

int frighten(int x){
	System.out.println("a bite?");
	return 1;//return 유형이 int인데 상위클래스는 boolean이기 때문에 오버로딩 불가
}
}

class Dragon extends Monster {
	boolean fighten (int degree ) {
		System.out.println("breath fire");
		return true;
	}
}

}}}

{{{

3.

public class MonsterTestDrive {
	public static void main(String [] args) {
		Monster [] ma = new Monster[3];
		ma[0] = new Vampire();
		ma[1] = new Dragon();
		ma[2] = new Monster();
		for(int x = 0 ;x<3;x++) {
			ma[x].frighten(x);
		}
	}
}

class Monster {

boolean frighten(int d) {
	System.out.println("arrrgh");
	return false;
}
}

class Vampire extends Monster {

boolean scare(int x){//메소드가 frighten이 아닌 scare입니다. 따라서 본 클래스에서 
상위클래스의 메소드를 사용하게 됩니다.
	System.out.println("a bite?");
	return true;
}
}

class Dragon extends Monster {
	boolean fighten (int degree ) {
		System.out.println("breath fire");
		return true;
	}
}

결과값 : 

arrrgh
breath fire
arrrgh

}}}

{{{

public class MonsterTestDrive {
	public static void main(String [] args) {
		Monster [] ma = new Monster[3];
		ma[0] = new Vampire();
		ma[1] = new Dragon();
		ma[2] = new Monster();
		for(int x = 0 ;x<3;x++) {
			ma[x].frighten(x);
		}
	}
}

class Monster {

boolean frighten(int d) {
	System.out.println("arrrgh");
	return false;
}
}

class Vampire extends Monster {

boolean frighten(byte b){//상위클래스의 메소드와 매개변수가 다릅니다. 따라서 오버
로드 하지 않습니다.
	System.out.println("a bite?");
	return true;
}
}

class Dragon extends Monster {
	boolean fighten (int degree ) {
		System.out.println("breath fire");
		return true;
	}
}

결과값 : 
arrrgh
breath fire
arrrgh
}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:100% 추상클래스 이다. 인터페이스를 사용하면 다중 상속으로 인한 죽음의 다이아몬드라는 부작용을 없애 다중 상속의 효과를 누릴 수 있습니다. 모든 메소드를 추상 메소드로 정의하여 자식 클래스에서는 무조건 오버라이드 해야합니다.
 * 다형성: 다형성을 사용하면 레퍼런스 유형을 실제 객체 유형의 상위클래스 유형으로 지정할 수 있습니다. 다형성은 하나의 변수와 메소드가 다양한 의미로 사용 가능하다는 것이고 인자와 리턴 유형에 대해서도 다형성을 적용할 수 있습니다.
 * 추상 클래스:추상 클래스를 지정하면 인스턴스를 만들수가 없다. 추상 메소드를 만들기 위해서는 클래스 또한 추상 클래스이어야 한다.추상 클래스는 확장하지 않으면 쓸모가 없습니다.
 * 추상 메소드:추상 클래스처럼 메소드도 추상 메소드로 지정할수 있다. 이러한 추상 메소드는 반드시 오버라이드 해야한다는 특징이 있다. 추상 메소드를 사용하는 이유는 반드시 오버라이드 해야한다는 특징으로 하위클래스에서 필요한 메소드를 강제로 지정함으로 인하여 놓치지 않고 지정할수 있다는 장점이 있다.
 * 다중 상속:여러 부모 객체에게 상속을 받는것 자바는 지원하지 않는다. 따라서 이를 하기 위해서는 인터페이스를 사용해야한다. 다중 상속을 지원하게 되면 상위클래스의 메소드에 접근을 할때 그 위치가 불분명하게 되는 '죽음의 다이아몬드'라는 문제가 생기게 됩니다.

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:힙은 모든 객제가 사는곳 입니다. 인스턴스 변수는 객체안에 존재하
므로 힙에 산다고 할수 있습니다.
 * 스택에서의 변수:: 메소드를 호출하면 그 메소드는 호출스택 맨위에 올라갑니다. 실제로는 스택 프레임이 올라가며 모든 지역변수를 포함한 메소드가 들어있습니다. 지역변수가 객체에대한 레퍼런스인 경우에는 레퍼런스만 스택에 들어가고 객체 자체는 힙안에 들어갑니다.
 * 생성자:생성자는 메소드와 비슷한 형태로 객체를 만드는 역할을 합니다. 생성자는 컴파일러에서 알아서 만들어 줍니다. 생성자는 new를 한후 호출해줍니다.생성자를 통해서 객체의 상태를 초기화합니다.즉 객체의 인스턴스 변수에 값을 대입하는 작업을 합니다.
 * 널 레퍼런스: 레퍼런스에 NULL을 대입하여 가리키는 레퍼런스가 없게합니다. 이때 이 레퍼런스는 점 연산자를 사용할수 없게되며 사용하려고 할시에는 에러를 출력합니다.
 
*298p 집중토론* _요약_

 * 인스턴스 변수:객제를 지원하는 역할,객체와 함께 힙에 존재,객체의 상태를 저장
자신이 속한 객체가 가비지 컬렉터에의하여 삭제되면 같이 삭제됨, 객체를 참조하는 인스턴스가 지역변수에만 존재하면 지역변수가 끝날시에 같이 사라진다.
 * 지역 변수: 메소드에 존재,기간이 짧아서 임시 변수라고도 함, 스택 프레임에 빼곡 쌓여있음, 프레임이 맨 위로 올라갈때까지 기다리고 있음,메소드가 끝나면 스택에서 튕겨나감

*302p 5분 미스터리* _구현후 주석달기_

{{{
import java.util.*;
class V2Radiator
{
        V2Radiator(ArrayList<SimUnit> list) //ㅣist를 받아옵니다.
        {
                for(int x = 5; x < 5 ; x++) 
                {
                        list.add(new SimUnit("V2Radiator"));//받아온 List에 5번 SimUnit을 추가하고 V2Radiator를 줍니다.
                }
        }
}

class V3Radiator //extends V2Radiator 불필요한 부분입니다.
{
        V3Radiator(ArrayList<SimUnit> lglist)//lglist를 받아옵니다.
        {
                //super(lglist); 불필요한 부분입니다. 이부분에서 불필요하게 5개의 SimUnit이 생성됩니다.
                for(int g = 0; g < 10 ; g++)
                {
                        lglist.add(new SimUnit("V3Radiator"));//lglist에 10번 SimUnit을 추가하고 V3Radiator를 줍니다.
                }
        }
}

class RetentionBot
{
        RetentionBot(ArrayList<SimUnit> rlist)
        {
                rlist.add(new SimUnit("Rention"));
        }
}

public class TestLifeSupportSim 
{
        public static void main(String[] args)
        {
                ArrayList<SimUnit> aList = new ArrayList<SimUnit>();//aList의 ArrayList생성
                V2Radiator v2 = new V2Radiator(aList);//v2객체 생성
                V3Radiator v3 = new V3Radiator(aList);//v3객체 생성
                for(int z = 0 ; z < 20 ; z++)
                {
                        RetentionBot ret = new RetentionBot(aList); //20번 ret객체를 생성합니다.
                }
        }
}

class SimUnit
{
        String botType;
        SimUnit(String type)
        {
                botType = type;
        }
        int powerUse()
        {
                if("Retention".equals(botType))
                {
                        return 2;                       
                }
                else
                {
                        return 4;
                }
        }
}
}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:클래스의 인스턴스없이 메소드를 실행할 수 있습니다. 인스턴스 변수에 따라 행동이 달라지지 않기 때문에 인스턴스나 객체가필요하지 않습니다. 클래스만 있어도 됩니다.
 * 정적 메소드를 선언하는 방법:메소드에 static이라는 키워드를 붙여줍니다.
 * static final:static final 로 선언된 변수는 상수입니다. 초기화되고나면 절대 그 값을 바꿀 수 없습니다.static으로 선언되어 있기때문에 인스턴스를 만들지 않아도 됩니다. 보통 상수의 변수명은 모두 대문자로 씁니다.
 * 널 레퍼런스:레퍼런스에 NULL을 대입하여 아무것도 가르키지 않게합니다. NULL을 가리키는 레퍼런스는 점 연산자를 사용할수 없습니다.
 * 오토 박싱:자바 5.0이전에는 원시변수와 객체 레퍼선스가 엄격하게 구분되어 있었기에 절대로 서로 맞바꿔 사용 불가능했습니다. 사용하려면 원시값을 감싸고 포장을 풀어야했습니다. 자바 5.0부터 도입된 오토박싱을 통하여 이러한 과정을 손쉽게 할수 있게 되었습니다. 
 * 정적 임포트: 자바 5.0에서 도입된 개념으로 모든 코드를 다 쓰지 않고 짧게 쓸수 있습니다. 하지만 가독성이 떨어질수 있습니다.

*339p Calendar* _구현후 주석달기_

{{{
import java.util.*;
public class CalendarII/*클래스 이름을 Calendar라고하면 객체생성에 에러가 떠서 II
를 붙였습니다.*/
{
        public static void main(String[] args)
        {
                Calendar c = Calendar.getInstance();
                c.set(2004,0,7,15,40);//시각을 2004년 1월 7일 15:40 으로 설정
                long day1 = c.getTimeInMillis();//1970년 1월1일부터 경과한 시간을 밀리초 단위로 표현한 값을 리턴합니다.
                day1 += 1000 * 60 * 60;
                c.setTimeInMillis(day1);//한 시간에 해당하는 밀리초 만큼의 시간을 더하고 시각을 갱신합니다.
                System.out.println("new hour" + c.get(c.HOUR_OF_DAY));
                c.add(c.DATE, 35);//35일을 더합니다.
                System.out.println("add 35 days " + c.getTime());
                c.roll(c.DATE, 35);//35일 뒤로 넘깁니다. 하지만 달은 바뀌지 않습니다.
                System.out.println("roll 35 days " + c.getTime());
                c.set(c.DATE, 1);//날짜를 1로 설정합니다.
                System.out.println("set to 1 " + c.getTime());
                
        
        }
}
}}}

*342p 집중토론* _요약_

 * 인스턴스 변수: 정적 변수는 상수에 불가, 특변한 경우에만 많이 사용, 디버깅할때에
만 특별한경우로 사용, 객체지향적이 아님, 전역변수랑 비슷함, 옛 관습에 익숙한 사람
들만 사용함, 가끔 익숙하긴 하지만 여전히 옛습관의 폐해, 프로시저 위주
 * 지역 변수: API에서 많이 사용, 상수만 사용하는 클래스도 존재 특별한 경우라도 중
요함 정적변수가 더 효율적, 전역변수가 아님, 클래스 안에서 존재,필수적인것도 있음

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
class StaticSuper{

        static { 
        System.out.println("super static block");
        }

        StaticSuper() { //생성자이므로 ()를 붙입니다.
        System.out.println("super constructor");
        }
}

public class StaticTests extends StaticSuper {//StaticSuper를 상속

        static int rand; 

        static { 
        rand=(int_ (Math.random()*6);
        System.out.println("static block " + rand);
        }

        StaticTests(){ 
        System.out.println("constructor");
        {

        public static void main(String [] args) {
        System.out.println("in main");
        StaticTests st = new StaticTests ();//객체 생성
        }
}
}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{
public void takeRisk() throws BadException
        {
                if(abandonAllHope)//만약 모든 희망을 버리면으로 오류가 생기는 부분입니다.
                {
                        throw new BadException();//BadException이라는 오류를 throw합니다.
                }
        }
        
 public void crossFingers()
        {
                try
                {
                        anObject.takeRisk();//오류가 발생할수 있는 부분입니다.
                }
                catch(BadException ex)//BadException을 잡습니다. 오류가 뜨면 밑의 
부분이 실행됩니다.
                {
                        System.out.println("Aaargh!");
                        ex.printStackTrace();
/*예외 상황을 해결할수 없을때 모든 예외 객체에서 물려받는 printStackTrace()메소드
를 써서 스택 트레이스를 출력합니다.*/
                }
        
        
        }
}
}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{
import javax.sound.midi.*;//미디 패키지를 import합니다.

public class MiniMiniMusicApp {
 
	public static void main(String[] args) {
		MiniMiniMusicApp mini = new MiniMiniMusicApp();
		mini.play();
	}

	
	public void play() {
		try{
/*Sequencer를 받아서 엽니다.그래야만 열립니다.*/
			Sequencer player = MidiSystem.getSequencer();
			player.open();
/*Sequencer 생성자로 넘기는 인자에 대해서는 신경 쓰지 않아도 됩니다.*/
			Sequence seq = new Sequence(Sequence.PPQ,4);
/*Sequence에 Track을 요청합니다.*/
			Track track = seq.createTrack();
/*Track에 MidiEvent를 집어넣습니다.*/
			ShortMessage a = new ShortMessage();
			a.setMessage(144, 1, 44, 100);
			MidiEvent noteon = new MidiEvent(a,1);
			track.add(noteon);
			
			ShortMessage b = new ShortMessage();
			b.setMessage(128,1,44,100);
			MidiEvent noteOff = new MidiEvent(b,16);
/*Sequencer에 Sequence를 보냅니다.*/
			player.setSequence(seq);
/*Sequencer의 start()메소드를 호출합니다.*/
			player.start();
		} catch ( Exception ex) {
			ex.printStackTrace();
		}
	}
}
}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{
import javax.sound.midi.*;


public class MiniMusicCmdLine
{//첫번째
        public static void main(String[] args)
        {
                MiniMusicCmdLine mini = new MiniMusicCmdLine();
                
                if(args.length < 2 )
                        System.out.println("악기와 음 높이를 지정하는 인자를 입력하세요.");
                else
                {
                        int instrument = Integer.parseInt(args[0]);
                        int note = Integer.parseInt(args[1]);
                        mini.play(instrument,note);
                        
                }
        }
        
        public void play(int instrument, int note)
        {
                try
                {
                        Sequencer player = MidiSystem.getSequencer();//시퀀서를 생성
                        player.open();
                        Sequence seq = new Sequence(Sequence.PPQ,4);
                        Track track = seq.createTrack();//track 을 생성
                        
                        MidiEvent event = null;//event 생성, null값을 대입
                        
                        ShortMessage first = new ShortMessage();
            first.setMessage(192,1,instrument,0);
            MidiEvent changeInstrument = new MidiEvent(first, 1);
            track.add(changeInstrument);

            ShortMessage a = new ShortMessage();
            a.setMessage(144,1,note,100);
            MidiEvent noteOn = new MidiEvent(a,1);
            track.add(noteOn);

            ShortMessage b = new ShortMessage();
            a.setMessage(128,1,note,100);
            MidiEvent noteOff = new MidiEvent(b,16);
            track.add(noteOff);
            player.setSequence(seq);
            player.start();
                }
                
                catch(Exception ex)
                {
                        ex.printStackTrace();
                }
        }//play 메소드 끝
}//클래스 끝
}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}