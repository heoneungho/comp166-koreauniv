#summary 최수아의 실습 페이지입니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{
public class BeerSong{
	public static void main (String[] args) {
		int beerNum = 99;
		string word = "bottles"; //복수형

		while (beerNum > 0) {

			if (beerNum == 1){
				word = "bottle"; //단수형(한 병인 경우)
			}

			System.out.println(beerNum + " " + word + " of beer on the wall");
			System.out.println(beerNum + " " + word + " of beer.");
			System.out.println("Take one down.");
			System.out.println("Pass it around.");
			beerNum = beerNum - 1;

			if (beerNum > 0) {
				if (beerNum == 1)
					word = "bottle";
				System.out.println(beerNum + " " + word + " of beer on the wall");
			} else {
				System.out.println("No more bottles of beer on the wall");
			} //else 문 끝
		} //while 순환문 끝
 	}//main 클래스 끝
}// 클래스 끝
}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{
public class PhraseOMatic{
	public static void main (String[] args) {

	String[] wordListOne = {"print", "open", "smart", "length", "world", "document"};
	
	String[] wordListTwo = {"class", "keyboard", "mouse", "phone"};

	String[] wordListThree = {"apple", "kiwi", "orange", "strawberry", "banana"};

	int oneLength = wordListOne.length;
	int twoLength = wordListTwo.length;
	int threeLength = wordListThree.length;

	int rand1 = (int) (Math.random() * oneLength);
	int rand2 = (int) (Math.random() * twoLength);
	int rand3 = (int) (Math.random() * threeLength);

	String phrase = wordListOne[rand1] + " " + wordListTwo[rand2] + " " + wordListThree[rand3];

	System.out.println("What we need is a " + phrase);	
	}
}
}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 프로그램 실행. 바이트코드가 만들어진 다음 바이트코드가 실행되기 전까지 다른 누군가가 그것을 건드리지 않았는지 확인함. 
 * 컴파일러:가상머신에서 텍스트 편집기로 만든 소스 코드를 해석하고 문법이 맞았는지를 확인함. 변수에 이상한 유형의 데이터를 저장할 수 없도록 함. 보호되는 메소드를 바꾸는 것을 막아줌. 

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A
class Exercise1b {
        public static void main(String [] args) {
        int x=1;
        while (x<10){
                x=x+1; //add x so that end the loop
                if(x>3) {
                        System.out.println("big x");
                        }
                }
        }
}


B
class Exercise1b { //need class
        public static void main(String []args) {
        int x = 5;
        while(x>1){
                x=x-1;
                if (x<3){
                        System.out.println("small x");
                        }
                }
        }
}

C
class Exercise1b {
        public static void main(String [] args) { //need main method
        int x=5;
        while(x>1) {
                x=x-1;
                if(x>3) {
                        System.out.println("small x");
                        }
                }
        }
}
}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수:아는 것. 클래스의 인스턴스 변수용으로 쓰기 위한 변수를 가질 수 있음. 객체. 
 * 메소드:하는 것. 
 * 클래스:객체를 만들기 위한 틀. 가상머신에 그 유형의 객체를 만드는 방법을 알려줌. 
 * 테스트용 클래스:새로운 클래스를 테스트하기 위한 클래스
 

*68p Television* _채워넣기_

 * 인스턴스 변수:Light, Volume, Channel, Power, Size 
 * 메소드:Light(), Volumeup(), Volumedown(), Poweron(), Poweroff() 


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{
public class GuessGame {
                Player p1;
                Player p2;
                Player p3;
                Player p4;
        
                public void startGame(){
                        p1 = new Player();
                        p2 = new Player();
                        p3 = new Player();
                        p4 = new Player();

                        int guessp1 = 0;
                        int guessp2 = 0;
                        int guessp3 = 0;
                        int guessp4 = 0;

                        boolean p1isRight = false;
                        boolean p2isRight = false;
                        boolean p3isRight = false;
                        boolean p4isRight = false;

                        int targetNumber = (int) (Math.random() *10);
                        System.out.println("0 over 9 under");
                        
                        while(true){
                                System.out.println("right number " + targetNumber + ".");

                        p1.guess();
                        p2.guess();
                        p3.guess();
                        p4.guess();

                        guessp1 = p1.number;
                        System.out.println("player 1 picked: "+guessp1);
                        
                        
                        guessp2 = p2.number;
                        System.out.println("player 2 picked: "+guessp2);

                        guessp3 = p3.number;
                        System.out.println("player 3 picked: "+guessp3);


                        guessp4 = p4.number;
                        System.out.println("player 4 picked: "+guessp4);


                        if (guessp1 == targetNumber){
                                p1isRight = true;
                        }

                        if (guessp2 == targetNumber){
                                p2isRight = true;
                        }

                        if (guessp3 == targetNumber){
                                p3isRight = true;
                        }

                        if (guessp4 == targetNumber){
                                p4isRight = true;
                        }

                        if (p1isRight || p2isRight || p3isRight || p4isRight) {

                                System.out.println("Right number!");
                                System.out.println("player 1 : "+ p1isRight);
                                System.out.println("player 2 : "+ p2isRight);
                                System.out.println("player 3 : "+ p3isRight);
                                System.out.println("player 4 : "+ p4isRight);
                                System.out.println("Game set.");

                                break;

                        } else {
                
                                System.out.println(" Try again ");
                         }
                        }
                     }
                }

pubilc class Player{
        int number = 0;

        public void guess() {
                number = (int) (Math.random() *10);
                System.out.println("Selected number: "+number);
        }
      }

public class GameLauncher {
        public static void main (String[] args) {
                GuessGame game = new GuessGame();
                game.startGame();
        }
      }                 

}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A
public class TapeDeck {

        boolean canRecord = false;
    
    void playTape() {
            System.out.println("tape playing");
    }
    
    void recordTape() {
            System.out.println("tape recording");
    }
}

class TapeDeckTestDrive {
    public static void main(String [] args) {
    
            TapeDeck t = new TapeDeck(); //t라는 TapeDeck 객체 선언

            t.canRecord = true;
            t.playTape();
            
            if(t.canRecord == true ) {
                    t.recordTape();
                    }
            }
}
B
public class DVDPlayer {
        
        boolean canRecord = false ;
        
        void recordDVD() {
                System.out.println("DVD recording");
        }
        void playDVD() {//playDVD메소드 선언
                System.out.println("DVD playing");

        }
}
public class DVDPlayerTestDrive {
        public static void main(String [] args) {
        
        DVDPlayer d = new DVDPlayer ();
        d.canRecord = true;
        d.playDVD ();
        
        if(d.canRecord == true) {
                d.recordDVD();
                }
        }
}

}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수: 원시변수에는 넝수, 부울, 부동소수점 수와 같은 기초적인 값이 들어감. 객체 레퍼런스에는 객체에 대한 레퍼런스가 들어감.
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{
class Dog{
        String name;
        public static void main(String[] args){
                Dog dog1 = new Dog();
                dog1.bark();
                dog1.name = "Bart";

                Dog[] myDogs = new Dog[3];
                myDogs[0] = new Dog();
                myDogs[1] = new Dog();
                myDogs[2] = dog1;

                myDogs[0].name = "Fred";
                myDogs[1].name = "Marge";

                System.out.print("The name of the last Dog : ");
                System.out.println(myDogs[2].name);

                int x = 0;
                while(x<myDogs.length){
                        myDogs[x].bark();
                        x = x+1;
                }

        }

        public void bark(){
                System.out.println(name + " barks.");
        }
}


}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A

class Books{
        String title;
        String author;
}

class BooksTest{
        public static void main(String[] args){
                Books[] myBooks = new Books[3];

                myBooks[0] = new Books();
                myBooks[1] = new Books();
                myBooks[2] = new Books();//각자 개체를 추가해주어야 한다.

                int x = 0;
                myBooks[0].title = "The Grapes of Java";
                myBooks[1].title = "The Java Gatsby";
                myBooks[2].title = "The Java Cookbook";
                myBooks[0].author = "bob";
                myBooks[1].author = "sue";
                myBooks[2].author = "ian";

                while(x<3) {
                        System.out.print(myBooks[x].title);
                        System.out.print(" by ");
                        System.out.println(myBooks[x].author);
                        x = x+1;
                }
        }
}

B

class Hobbits{
        String name;
}
class HobbitsTest{
        public static void main(String[] args){
                Hobbits[] h = new Hobbits[3];
                int z=0;

                while(z<3){
                        h[z] = new Hobbits();
                        h[z].name = "bilbo";
                        if(z==1)
                                h[z].name = "frodo";
                        if(z==2)
                                h[z].name = "sam";
                        
                        System.out.print(h[z].name + " is a ");
                        System.out.println("good Hobbit name.");

                        z = z+1;//마지막에 증가시켜야 한다. 그대로 실행하면 h[0]이 없다.

                }
        }
}
}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?: 밥이 이겼다
 * 문제가 된 부분은 어딘가요?:켄트는 메모리를 절약하기 위해 동일한 변수명을 사용하여 연락처 객체를 10개를 만들었지만 만들어진 객체 중 마지막 객체를 제외한 나머지에는 접근할 수 없다는 문제가 생겼기 때문이다.

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:데이터와 자신이 구현한 코드를 나중에 수정할 권한을 보호할 수 있도록 구현하는 방법
 * 게터와 세터:
     게터 : 인스턴트 변수의 값을 알아내기 위한 메소드
     세터 : 인스턴트 변수의 값을 설정하기 위한 메소드
 * 인스턴스 변수 vs 지역 변수:
     인스턴트 변수는 클래스 내에서 선언되고, 선언 시 초기화 값을 지정해주지 않아도 항상 기본값이 들어간다.
 
*107p Dog* _실행_

{{{
클래스 Dog

public class Dog {
        int size;
        String name;
        
        void bark() {
                if(size > 60) {
                        System.out.println("Wooof! Wooof!");
                } else if(size > 14) {
                        System.out.println("Ruff! Ruff!");
                } else {
                        System.out.println("Yip! Yip!");
                } //if-else문 종료
        }  //메소드 bark종료
}  //클래스 Dog종료
클래스 DogTestDrive

public class DogTestDrive {
        
        public static void main(String[] args) {
                Dog one = new Dog();
                one.size = 70;
                Dog two = new Dog();
                two.size = 8;
                Dog three = new Dog();
                three.size = 35;
                
                one.bark();
                two.bark();
                three.bark();
        }  //메인 메소드 종료

}  //클래스 DogTestDrive 종료

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:
 * 다형성:

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}