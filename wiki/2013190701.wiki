#summary 이미현의 실습 페이지입니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{
public class BeerSong {
     public static void main (String[] args) {
          int beerNum = 99;
          String word = "bottles"; //복수형

     while (beerNum > 0) {

     if (beerNum == 1) {
          word = "bottle"; //단수형(한병인 경우)
     }

     System.out.println(beerNum + " " + word + " of beer on the wall");
     System.out.println(beerNum + " " + word + " of beer.");
     System.out.println("Pass it around");
     beerNum = beerNum -1;

     if (beerNum > 0) {
          if(beerNum ==1) {
               word = "bottle";
          }
          System.out.println(beerNum + " " + word + " of beer on the wall");
          }else {
          System.out.println("No more bottles of beer on the wall");
               } //else문 끝
          }//while순환문 끝
     }//main 클래스 끝
}//클래스 끝


}}}
*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{
public class PhraseOMatic {
	public static void main(String[] args) {

	String[] FruitList = {"Apple","Banana","Watermelon","Strawberry","Pear"};

	String[] AnimalList = {"Elephant", "Lion", "Tiger", "Dolphin", "Cat"};

	String[] ColorList = {"Red", "Green", "Blue", "Yellow", "White"};

	int oneLength = FruitList.length;
	int twoLength = AnimalList.length;
	int threeLength = ColorList.length;

	int rand1 = (int)(Math.random()*oneLength);
	int rand2 = (int)(Math.random()*twoLength);
	int rand3 = (int)(Math.random()*threeLength);
	
	String phrase = FruitList[rand1] + " " + AnimalList[rand2] + " " + ColorList[rand3];

	System.out.println("What we need is a " + phrase);

	}
}
}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 프로그램을 실행 후, 바이트 코드가 만들어지고 실행되기 전까지 외부에서의 접근을 확인하는 작업을 수행함. 

 * 컴파일러: 자바 언어를 해석, 동적 바인딩을 지원, 실행 시 오류를 막아줌, 클래스 및 메소드의 보안을 담당.


*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A
class Exercise1b {
        public static void main(String [] args) {
	int x=1;
	while (x<10){
		x=x+1;
		if(x>3) {
			System.out.println("big x");
			}
		}
	}
}


B
class Exercise1b {
	public static void main(String []args) {
	int x = 5;
	while(x>1){
		x=x-1;
		if (x<3){
			System.out.println("small x");
			}
		}
	}
}

C
class Exercise1b {
	public static void main(String [] args) {
	int x=5;
	while(x>1) {
		x=x-1;
		if(x>3) {
			System.out.println("small x");
			}
		}
	}
}
}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체에서 자신에 대해 아는것
 * 메소드: 객체에서 자신이 하는 것
 * 클래스: 객체를 만들기 위한 용도, 청사진
 * 테스트용 클래스: 새로운 클래스를 테스트하기 위한 클래스. <클래스명>TestDrive와 같은 이름이 붙는다. 새로운 클래스 유형의 객체에 들어있는 메소드와 변수를 테스트하는 클래스
 

*68p Television* _채워넣기_

 * 인스턴스 변수: channel, volume
 * 메소드: Upchannel(), Downchannel(), Upvolume(), Downvolume()


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{

public class GuessGame {
	Player p1;
	Player p2;
	Player p3;
	Player p4;
	
	public void startgame () {
		p1=new player();
		p2=new player();
		p3=new player();
		p4=new player();
		
		int guessp1=0;
		int guessp2=0;
		int guessp3=0;
		int guessp4=0;
		
		boolean p1isRight=false;
		boolean p2isRight=false;
		boolean p3isRight=false;
		boolean p4isRight=false;
		
		int targetNumber=(int)(Math.random()*10);
		System.out.println("0이상 9이하의 숫자를 맞춰보세요.");
		
		while(true) {
			System.out.println("맞춰야 할 숫자는 "+targetNumber + "입니다.");
			
			p1.guess();
			p2.guess();
			p3.guess();
			p4.guess();
			
			guessp1=p1.number;
			System.out.println("1번 선수가 찍은 숫자:" + guessp1);
			
			guessp2=p2.number;
			System.out.println("2번 선수가 찍은 숫자:" + guessp2);
			
			guessp3=p3.number;
			System.out.println("3번 선수가 찍은 숫자:" + guessp3);
			
			guessp4=p4.number;
			System.out.println("4번 선수가 찍은 숫자:" + guessp4);
			
			if(guessp1==targetNumber){
				p1isRight=true;
			}
			
			if(guessp2==targetNumber){
				p2isRight=true;
			}
			
			if(guessp3==targetNumber){
				p3isRight=true;
			}
			
			if(guessp4==targetNumber){
				p4isRight=true;
			}
			
			if(p1isRight || p2isRight || p3isRight|| p4isRight) {
				System.out.println("맞춘 선수가 있습니다.");
				System.out.println("1번 선수:" + p1isRight);
				System.out.println("2번 선수:" + p2isRight);
				System.out.println("3번 선수:" + p3isRight);
				System.out.println("4번 선수:" + p4isRight);
				System.out.println("게임 끝.");
				break;
			} else {
				System.out.println("다시 시도해야합니다.");
			} // if/else 부분끝
		} //순환문 끝
	} // 메소드 끝
} // 클래스 끝

public class Player {
	int number=0;
	
	public void guess() {
		number=(int)(Math.random()*10);
		System.out.println("찍은 숫자:" + number);
	}
}

public class GameLauncher {
	public static void main (String[] args) {
		GuessGame game = new GuessGame();
		game.startgame();
	}
}

}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A
class TapeDeck {
	
	boolean canRecord = false;
	
	void playTape() {
		System.out.println("tape playing");
	}
	
	void recordTape() {
		System.out.println("tape recording");
	}
}

class TapeDeckTestDrive {
	public static void main(String [] args) {
		TapeDeck t = new Tapedeck();
		t.canRecord=true;
		t.playTape();
		
		if(t.canRecord == true) {
			t.recordTape();
		}
	}
}

B

class DVDPlayer {
	
	boolean canRecord = false;
	
	void recordDVD() {
		System.out.println("DVD recording");
	}
	
	void playDVD() {
		System.out.println("DVD playing");
	}
}

class DVDPlayerTestDrive {
	public static void main(String [] args) {
		
		DVDPlayer d = new DVDPlayer ();
		d.canRecord = true;
		d.playDVD();
		
		if(d.canRecord == true) {
			d.recordDVD();
		}
	}
}
}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수: 원시 변수에는 정수,부울,부동소수점 수와 같은 기초적인 값(단순한 비트 패턴으로 나타낼 수 있는 값)이 들어갑니다. 레퍼런스변수는 힙에 들어있는 객체를 건드릴 수 있는 방법을 나타내는 비트입니다. 
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{
class Dog {
        String name;
        public static void main (String[] args) {
                Dog dog1 = new Dog();
                dog1.bark() ;
                dog1.name = "Bill" ;
                
                Dog[] myDogs = new Dog[8];
                myDogs[0] = new Dog() ;
                myDogs[1] = new Dog() ;
                myDogs[2] = new Dog() ;
                myDogs[3] = new Dog() ;
                myDogs[4] = new Dog() ;
                myDogs[5] = new Dog() ;
                myDogs[6] = new Dog() ;
                myDogs[7] = dog1;
        
                //배열 레퍼런스를 써서 Dog객체에 접근합니다.
                myDogs[0].name = "Amy";
                myDogs[1].name = "Teemo";
                myDogs[2].name = "Penta";
                myDogs[3].name = "Roy";
                myDogs[4].name = "Fido";
                myDogs[5].name = "Goerge" ;
                myDogs[6].name = "Bella";
                //myDogs[7] 개의 이름이 뭐였지?
                System.out.print("마지막 개의 이름: ");
                System.out.println(myDogs[7].name);
                
        
                //이제 순환문을 써서 배열에 들어있는
                   //모든 개가 짖도록 합시다.
                int x = 0;
                while(x < myDogs.length) {
                        myDogs[x].bark();
                        x = x + 1;
                }
        }
        public void bark() {
                System.out.println(name + "이(가) 왈! 하고 짖습니다.");
        }
        public void eat() { }
        public void chaseCat() { }
}
}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A
class Books {
        String title ;
        String author ;
}

class BooksTestDrive {
        public static void main(String [] args) {
        
                Books [] myBooks = new Books[3] ;
                myBooks[0] = new Books();
                myBooks[1] = new Books();
                myBooks[2] = new Books(); //Books라는 객체 생성
                int x = 0;
                myBooks[0].title = "The Grapes of Java";
                myBooks[1].title = "The Java Gatsby";
                myBooks[2].title = "The Java Cookbook";
                myBooks[0].author = "bob";
                myBooks[1].author = "sue";
                myBooks[2].author = "ian";
        
                while(x<3) {
                        System.out.print(myBooks[x].title);
                        System.out.print(" by ");
                        System.out.println(myBooks[x].author);
                        x = x + 1;
                }
        }
}

B
class Hobbits {
        
        String name ;
        
        public static void main(String [] args) {
        
                Hobbits [] h = new Hobbits[3];
                int z = 0 ;

                while(z<3) {//이름의 수가 3이므로 3으로 바꿈
        
                        h[z] = new Hobbits();
                        h[z].name = "bilbo";
                        if(z==1) {
                                h[z].name = "frodo";
                        }
                        if(z==2) {
                                h[z].name = "sam";
                        }
                        System.out.print(h[z].name + " is a " );
                        System.out.println("good Hobbit name");
                        z=z+1;//맨앞에 있으면 0번째가 의미가 없으므로                }
        }
}
}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?: 밥
 * 문제가 된 부분은 어딘가요?: 켄트의 방법은 메모리를 약간 절약할 수는 있었지만, 매번 순환문을 돌 때마다 새로운 값으로 초기화되서 밥의 방법보다 효용성이 없다.

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화: 외부에 노출되어있는 변수를 보호하기 위하여 인스턴스 변수를 private로 지정하고 접근 제어를 위해 public으로 지정된 게터와 세터를 만든다. 
 * 게터와 세터: 게터는 게터가 가져오기로 한 값을 리턴값 형태로 받아오기 위한 용도 / 세터는 세터가 설정할 값을 인자로 받아서 인스턴스 변수를 그 값으로 설정하기 위한 용도 
 * 인스턴스 변수 vs 지역 변수: 인스턴스 변수는 클래스 내에서 선언됨 / 지역변수는 메소드 내에서 선언되며, 사용하기 전에 반드시 초기화 해야함.
 
*107p Dog* _실행_

{{{
class Dog {
        int size ;
        String name;

        void bark() {
                if(size > 60) {
                        System.out.println("Wooof! Wooof!");
                } else if (size > 14) {
                        System.out.println("Ruff! Ruff!");
                } else {
                        System.out.println("Yip! Yip!");
                }
        }
}

class DogTestDrive {
        
        public static void main(String [] args) {
                Dog one = new Dog();
                one.size = 70;
                Dog two = new Dog();
                two.size = 8;
                Dog three = new Dog();
                three.size = 35;
        
                one.bark();
                two.bark();
                three.bark();
        }
}
}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A

class XCopy {
        
        public static void main(String []args) {
        
                int orig = 42;
        
                XCopy x = new XCopy(); // XCopy유형의 객체 x선언

                int y = x.go(orig);//객체x에서 go를 호출하고 이때 orig값을 보낸후 메소드를 실행해 y에 그값을 리턴
        
                System.out.println(orig + " " + y );
        }
        
        int go(int arg) { //함수를 int값으로 리턴을 받게됨
        
                arg=arg*2;
                
                return arg;//arg를 리턴
        }
} //결과 : 42 84 즉 고칠 부분 없음.

B

class Clock {
        String time;
        
        void setTime(String t) {
                time = t;
        }
        
        String getTime() { //time을 리턴받는 게터이고 받을 time은 String이므로 String으로 선언
                return time;
        }
}

class ClockTestDrive {
        public static void main(String [] args) {
        
                Clock c = new Clock();
                
                c.setTime("1245");
                String tod = c.getTime();
                System.out.println("time :  "  + tod);
        }
} // 결과 time : 1245
}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란? 프로그래머들이 코딩을 할때에 테스트 코드를 작성하도록함과 동시에 테스트를 기반으로 프로젝트를 완성시켜 나가도록 하는 프로그래밍 방법. 다음과 같은 방법을 따른다. 
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{
public class simpledotcomtestdrive {
        
    public static void main(String[] args)  {
        int numofGuesses = 0;
        GameHelper helper = new GameHelper();
        
        simpledotcom thedotcom = new simpledotcom();
        
        int randomNum = (int)(Math.random()*5);
        
        int[] locations = {randomNum, randomNum+1, randomNum+2};
        thedotcom.setLocationCells(locations);
        boolean isAlive = true;
        
        while(isAlive == true)  {
                String guess = helper.getUserInput("enter a number");
                String result = thedotcom.checkYourself(guess);
                numofGuesses++;
                
                if(result.equals("kill"))       {
                        isAlive = false;
                        
                        System.out.println(numofGuesses + " guesses");
                }
        }
    }
}



public class simpledotcom {

        int[] locationCells;
        int numOfHits = 0; // number of answer that you correct the target.

public void setLocationCells (int[] locs)       {
        locationCells = locs;
}

public String checkYourself (String stringGuess)        {
        int guess = Integer.parseInt(stringGuess); // string 변수를 int형으로
        String result = "miss";
        for(int i=0; i < locationCells.length; i++)     {
                if(guess == locationCells[i])   {
                        result = "hit";
                        numOfHits++;
                        break;
                }
        }

        if (numOfHits == locationCells.length)  {
                result = "kill";
        }

        System.out.println(result);
        
        return result;
        }       
}
             


import java.io.*;

public class GameHelper {
        public String getUserInput(String prompt)       {
                String inputLine = null;
                
                System.out.print(prompt + " ");
                
                try{
                        BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
                        inputLine = is.readLine();
                        
                        if(inputLine.length() == 0 )
                                return null;
                }       catch (IOException e)   {
                        System.out.println("IOException: " + e);
                }
                
                return inputLine;
        }
}
}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:
 * 다형성:

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}