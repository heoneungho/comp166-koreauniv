#summary 김시윤의 실습 페이지입니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{
public class BeerSong
{
	public static void main(String[] args)
	{
		int beerNum = 99;
		String word = "bottles"; // 복수형
		
		while(beerNum > 0)
		{
			System.out.println(beerNum + " " + word + " of beer on the wall");
			System.out.println(beerNum + " " + word + " of beer.");
			System.out.println("Take one down.");
			System.out.println("Pass it around.");
			beerNum = beerNum - 1;
			
			if(beerNum > 0)
			{
				if(beerNum == 1) // 이 부분 수정!!!! 끝에서 6번째 줄이 1 bottles로 나오므로 그 부분을 수정하기 위한 작업이다.
				{
					word = "bottle"; // 단수형으로 변경
				}
				System.out.println(beerNum + " " + word + " of beer on the wall");
			}
			else
			{
				System.out.println("No more bottles of beer on the wall");
			}
		}
	}
}
}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{
public class PhraseOMatic
{
	public static void main(String args[])
	{
		String[] wordListOne = {"2013", "malfunction", "bronze", "silver", "gold", "platinum", "diamond", "good-bye", "18,000"};
		String[] wordListTwo = {"number", "fox", "what", "4/12", "H2O", "league", "legend", "money", "skin", "psi", "intercept", "It's-mine"};
		String[] wordListThree = {"architect", "history", "Doric", "Ionic", "Corinthian", "Matt", "Luke", "John", "Terry", "spider", "enter"};

		int oneLength = wordListOne.length;
		int twoLength = wordListTwo.length;
		int threeLength = wordListThree.length;

		int rand1 = (int) (Math.random() * oneLength);
		int rand2 = (int) (Math.random() * twoLength);
		int rand3 = (int) (Math.random() * threeLength);

		String phrase = wordListOne[rand1] + " " + wordListTwo[rand2] + " " + wordListThree[rand3];

		System.out.println("What we need is a " + phrase);
	}
}
}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 기본적으로 프로그램을 실행시키는 역할을 담당한다. 그 외에도 바이트코드가 만들어진 다음 바이트코드가 실행되기 전까지 다른 누군가가 그걸 건드리지 않았는지 확인하는 작업과 같은 보안에 관련된 문제를 처리하기도 한다.

 * 컴파일러: 문법을 점검하고, 텍스트 편집기로 만든 소스 코드를 해석해줌으로써 자바 가상머신의 부담을 줄여준다. 또, 변수에 이상한 유형의 데이터를 저장하는 것을 막아주기도 하며, 사용자가 비공개 메소드를 호출하려고 한다거나, 절대 바꿔서는 안 되는 코드를 건드리려는 시도를 차단하는 역할도 담당한다.

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A.
class Exercise1b {
	public static void main(String [] args) {
		int x=1;
		while(x<10) {
			if(x>3) {
				System.out.println("big x");
			}
			x++; // x값을 증가시켜주지 않으면 무한루프가 발생된다.
		}
	}
}

B.
class Exercise1b { // 클래스 선언을 해 주어야 한다.
	public static void main(String [] args) {
		int x=5;
		while(x>1) {
			x=x-1;
			if(x<3) {
				System.out.println("small x");
			}
		}
	}
}

C.
class Exercise1b {
	public static void main(String [] args) { // main 함수 선언을 해주어야 한다.
		int x=5;
		while(x>1) {
			x=x-1;
			if(x<3) {
				System.out.println("small x");
			}
		}
	}
}
}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체에서 자신에 대해 아는 것. 객체의 상태를 나타내며 그 유형에 속하는 각 객체마다 값이 다름.
 * 메소드: 객체에서 할 수 있는 일. 데이터에 대해 어떤 일을 처리함.
 * 클래스: 객체를 만들기 위한 청사진. 가상머신에 그 유형의 객체를 만드는 방법을 알려줌.
 * 테스트용 클래스: 클래스를 테스트하기 위해 만드는 클래스.
 

*68p Television* _채워넣기_

 * 인스턴스 변수: On, Off, Channel, Volume
 * 메소드: turnOn(), turnOff(), upChannel(), downChannel(), upVolume(), downVolume()


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{
public class GuessGame {
	Player p1;
	Player p2;
	Player p3;
	Player p4;
	
	public void startGame() {
		p1 = new Player();
		p2 = new Player();
		p3 = new Player();
		p4 = new Player();
		
		int guessp1 = 0;
		int guessp2 = 0;
		int guessp3 = 0;
		int guessp4 = 0;
		
		boolean p1isRight = false;
		boolean p2isRight = false;
		boolean p3isRight = false;
		boolean p4isRight = false;
		
		int targetNumber = (int) (Math.random() * 10);
		System.out.println("0 이상 9 이하의 숫자를 맞춰보세요.");
		
		while(true) {
			System.out.println("맞춰야 할 숫자는" + targetNumber + "입니다.");
			
			p1.guess();
			p2.guess();
			p3.guess();
			p4.guess();
			
			guessp1 = p1.number;
			System.out.println("1번 선수가 찍은 숫자: " + guessp1);
			
			guessp2 = p2.number;
			System.out.println("2번 선수가 찍은 숫자: " + guessp2);
			
			guessp3 = p3.number;
			System.out.println("3번 선수가 찍은 숫자: " + guessp3);
			
			guessp4 = p4.number;
			System.out.println("4번 선수가 찍은 숫자: " + guessp4);
			
			if (guessp1 == targetNumber) {
				p1isRight = true;
			}
			if (guessp2 == targetNumber) {
				p2isRight = true;
			}
			if (guessp3 == targetNumber) {
				p3isRight = true;
			}
			if (guessp4 == targetNumber) {
				p4isRight = true;
			}
			
			if (p1isRight || p2isRight || p3isRight || p4isRight) {
				System.out.println("맞춘 선수가 있습니다.");
				System.out.println("1번 선수: " + p1isRight);
				System.out.println("2번 선수: " + p2isRight);
				System.out.println("3번 선수: " + p3isRight);
				System.out.println("4번 선수: " + p4isRight);
				System.out.println("게임 끝.");
				break; // 게임이 끝났으므로 순환문 빠져나감.
			} else { //아직 아무도 맞추지 못함.
				System.out.println("다시 시도해야 합니다.");
			}
		}//순환문 끝
	}//메소드 끝
}//클래스 끝

__________________________________________________________________________________

public class Player {
	int number = 0;
	
	public void guess() {
		number = (int) (Math.random() * 10);
		System.out.println("찍은 숫자: " + number);
	}
}

__________________________________________________________________________________

public class GameLauncher {
	
	public static void main(String[] args) {
		GuessGame game = new GuessGame();
		game.startGame();
	}
}
}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A.

class TapeDeck {

        boolean canRecord = false;

        void playTape() {
                System.out.println("tape playing");
        }

        void recordTape() {
                System.out.println("tape recording");
        }
}

__________________________________________________________________________________

class TapeDeckTestDrive {
        public static void main(String[] args) {

                TapeDeck t = new TapeDeck(); //실제 객체를 만들어 줘야함.

                t.canRecord = true;
                t.playTape();

                if(t.canRecord == true) {
                        t.recordTape();
                }
        }
}

B.

class DVDPlayer {

        boolean canRecord = false;

        void playDVD() {
                System.out.println("DVD playing");
        } //playDVD라는 메소드가 있어야 d.playDVD()가 정상동작함.

        void recordDVD() {
                System.out.println("DVD recording");
        }
}

__________________________________________________________________________________

class DVDPlayerTestDrive {
        public static void main(String[] args) {

                DVDPlayer d = new DVDPlayer();

                d.canRecord = true;
                d.playDVD();

                if(d.canRecord == true) {
                        d.recordDVD();
                }
        }
}
}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수

원시변수: 정수, 부울, 부동소수점 수와 같은 기초적인 값이 들어간다. 자바의 원시 변수 유형에는 byte, short, int, long, float, double 등이 있으며, 변수 유형의 용량보다 더 큰 값을 집어넣을 수 없다. 예를 들어 int 변수를 byte 변수에 대입하려고 하면 컴파일이 되지 않는다. 하지만 byte 변수를 int 변수에 대입하는 것은 허용된다.

레퍼런스변수: 객체에 접근하는 방법을 나타내는 비트들이 저장된다. 레퍼런스 변수의 크기는 알 수 없지만 메모리 할당에 대한 문제는 객체 레퍼런스의 개수가 아닌 객체의 개수와 객체의 실제 크기이다. 또한, 레퍼런스 변수에 대해 계산 연산은 할 수 없다.



*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{
public class Dog {
	String name;
	public static void main(String[] args) {
		//Dog 객체를 만들고 접근
	
		//Dog 배열 만들기
		Dog[] myDogs = new Dog[10];

		//개 집어넣기
		int x;
		for(x=0; x<10; x++)
			myDogs[x] = new Dog();
		
		
		//배열 레퍼런스를 써서 Dog 객체에 접근
		myDogs[0].name = "Lisa";
		myDogs[1].name = "Marge";
		myDogs[2].name = "Bart";
		myDogs[3].name = "Homer";
		myDogs[4].name = "Magie";
		myDogs[5].name = "Moe";
		myDogs[6].name = "Apu";
		myDogs[7].name = "Flanders";
		myDogs[8].name = "Mr.Burns";
		myDogs[9].name = "Wiggum";

                //짖거나, 밥달라거나, 고양이를 쫓거나....
		int i=0;
		while(i < myDogs.length) {
			if(i%3==0)
				myDogs[i].bark();
			else if(i%3==1)
				myDogs[i].chaseCat();
			else if(i%3==2)
				myDogs[i].eat();
			i++;
		}
	}
    
    public void bark(){
            System.out.println(name + "이(가) 왈!하고 짖습니다.");
    }
    public void eat(){
            System.out.println(name + "이(가) 밥을 달라고 합니다.");
    }
    public void chaseCat(){
            System.out.println(name + "이(가) 고양이를 쫒습니다.");
    }    
}

}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A.

class Books {
        String title;
        String author;
}

__________________________________________________________________________________

class BooksTestDrive {
        public static void main(String [] args) {
        
                Books [] myBooks = new Books[3];
                myBooks[0] = new Books();
                myBooks[1] = new Books();
                myBooks[2] = new Books(); //Books라는 객체를 생성
                int x = 0;
                myBooks[0].title = "The Grapes of Java";
                myBooks[1].title = "The Java Gatsby";
                myBooks[2].title = "The Java Cookbook";
                myBooks[0].author = "bob";
                myBooks[1].author = "sue";
                myBooks[2].author = "ian";
        
                while(x<3) {
                        System.out.print(myBooks[x].title);
                        System.out.print(" by ");
                        System.out.println(myBooks[x].author);
                        x = x + 1;
                }
        }
}

B.

class Hobbits {
        
        String name;
        
        public static void main(String [] args) {
        
                Hobbits [] h = new Hobbits[3];
                int z = -1; //while 처음부분에 z값을 1 증가시키는 명령이 있으므로 0부터 시작하도록 하기 위해 -1로 설정한다.

                while(z<2) {//bilbo, frodo, sam 세 명이므로

                        z=z+1;
                        h[z] = new Hobbits();
                        h[z].name = "bilbo";
                        if(z==1) {
                                h[z].name = "frodo";
                        }
                        if(z==2) {
                                h[z].name = "sam";
                        }
                        System.out.print(h[z].name + " is a " );
                        System.out.println("good Hobbit name");
                        
                }
        }
}
}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?: 밥
 * 문제가 된 부분은 어딘가요?: 둘 다 10개의 객체를 만들었지만 밥은 10개의 객체에 모두 접근할 수 있었고 켄트는 그 중 하나의 객체에만 접근할 수 있었다.

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화: 간단히 말해 데이터를 숨기는 것이다. 캡슐화를 하려면 인스턴스 변수를 private로 지정하고 접근 제어를 위해 public으로 지정된 게터와 세터를 만들면 된다.
 * 게터와 세터: 게터는 가져오기로 되어있는 값을 리턴값 형태로 받아오고 세터는 설정할 값을 인자로 받아서 설정한다.
 * 인스턴스 변수 vs 지역 변수: 인스턴스 변수는 클래스 내에서 선언되지만, 지역 변수는 메소드 내에서 선언된다. 또한 지역 변수는 사용하기 전 반드시 초기화해야 한다.
 
*107p Dog* _실행_

{{{
public class Dog {
        int size;
        String name;
        
        void bark() {
                if(size>60) {
                        System.out.println("Wooof! Wooof!");
                }else if (size >14) {
                        System.out.println("Ruff! Ruff!");
                }else {
                        System.out.println("Yip! Yip!");
                }
        } 
/* size가 60 보다 큰 개는 Wooof! Wooof! 하고 짖고
   size가 14 보다 크고 60 이하인 개는 Ruff! Ruff! 하고 짖고
   size가 14 이하인 개는 Yip! Yip! 하고 짖는다. */

}

__________________________________________________________________________________

public class DogTestDrive {

                public static void main (String[] args) {
                        Dog one = new Dog();
                        one.size=70;
                        Dog two = new Dog();
                        two.size=8;
                        Dog three = new Dog();
                        three.size=35;
                        
                        one.bark(); // Wooof! Wooof!
                        two.bark(); // Yip! Yip!
                        three.bark(); // Ruff! Ruff!
                }
}

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A.

public class XCopy {
        public static void main(String[] args) {
                int orig=42;
                
                XCopy x= new XCopy();
                int y = x.go(orig);
                
                System.out.println(orig+" "+ y);
        }
                int go(int arg) {
                        arg = arg*2;
                        
                        return arg;
                
        }

}
/* 아무 문제없이 실행된다. */

B.

class Clock {
        String time;
        
        void setTime(String t) {
                time=t;
                
        }
        
        String getTime() { // time 값을 return해야 하는데 그 유형이 String 이므로
                return time;
        }
        
}

__________________________________________________________________________________

class ClockTestDrive {
        public static void main(String [] args) {
                
                Clock c= new Clock();
                
                c.setTime("1245");
                String tod= c.getTime();
                System.out.println("time: "+tod);
        }

}
}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?: XP는 최근 소프트웨어 개발 방법론 분야에 새로 등장한 것으로, 고객이 원하는 것을 고객이 원하는 기한에 맞춰 제공할 수 있다는 것이 가장 큰 장점으로 꼽힌다. 때문에 막판에 스펙이 변경되어도 문제없이 제공이 가능하다.

XP에는 일련의 규칙이 있는데, 그 예로

 * 스펙에 없는 것은 절대 집어넣지 않는다.
 * 테스트 코드를 먼저 만든다.
 * 기회가 생기는 족족 언제 어디서든 코드를 개선한다.

등이 있다.
 

*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{
public class SimpleDotComTestDrive {

	public static void main(String[] args) {
		
		int numOfGuesses = 0;
		GameHelper helper = new GameHelper();
		
		SimpleDotCom theDotCom = new SimpleDotCom();
		int randomNum = (int) (Math.random() * 5); // 0이상 4이하의 정수가 리턴
		
		int[] locations = {randomNum, randomNum+1, randomNum+2};
		theDotCom.setLocationCells(locations);
		boolean isAlive = true;
		
		while(isAlive == true) {
			String guess = helper.getUserInput("enter a number");
			String result = theDotCom.checkYourself(guess);
			numOfGuesses++; // 추측 횟수 증가
			
			if(result.equals("kill")) {
				isAlive = false; // kill이 나오면 순환문을 빠져나옴
				System.out.println(numOfGuesses + " guesses"); //사용자가 추측한 횟수 출력
			} // if문 끝
		} // while문 끝
		
	} // main 끝

} // class 끝

__________________________________________________________________________________

public class SimpleDotCom {
	int[] locationCells;
	int numOfHits = 0;
	
	public void setLocationCells(int[] locs) {
		locationCells = locs;
	}
	
	public String checkYourself(String stringGuess) {
		int guess = Integer.parseInt(stringGuess);
		String result = "miss"; // 기본값을 miss로 설정

		for(int i = 0; i<locationCells.length; i++) {
			if(guess == locationCells[i]) {
				result = "hit";
				numOfHits++;
				break; // 맞췄을 경우 순환문 빠져나옴
			}
		}
		
		if(numOfHits == locationCells.length) {
			result = "kill";
		}
		
		System.out.println(result);
		return result;
	}
}

__________________________________________________________________________________

/* 인스턴트 코드 */

import java.io.*;

public class GameHelper {
	public String getUserInput(String prompt) {
		String inputLine = null;
		System.out.print(prompt + " ");
		
		try {
			BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
			inputLine = is.readLine();
			
			if(inputLine.length() == 0)
				return null;
		} catch(IOException e) {
			System.out.println("IOException: "+ e);
		}
		return inputLine;
	}

}
}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{
/* Option 1 */
public class SimpleDotCom {
	int[] locationCells;
	int[] hitCells = {0,0,0}; // hitCells 배열 추가
	int numOfHits = 0;

	
	public void setLocationCells(int[] locs) {
		locationCells = locs;
	}
	
	public String checkYourself(String stringGuess) {
		int guess = Integer.parseInt(stringGuess);
		String result = "miss";
		for(int i = 0; i<locationCells.length; i++) {
			if(guess == locationCells[i]) {
				if(hitCells[i] == 0) { // 조건 추가
					result = "hit";
					hitCells[i] = 1; // 맞출 때 마다 1 대입
					numOfHits++;
                                        break;
				}
			}
		}
		
		if(numOfHits == locationCells.length) {
			result = "kill";
		}
		
		System.out.println(result);
		return result;
	}
}
}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{
/* Option 2 */
public class SimpleDotCom {
	int[] locationCells;
	int numOfHits = 0;

	
	public void setLocationCells(int[] locs) {
		locationCells = locs;
	}
	
	public String checkYourself(String stringGuess) {
		int guess = Integer.parseInt(stringGuess);
		String result = "miss";
		for(int i = 0; i<locationCells.length; i++) {
			if(guess == locationCells[i]) {
					result = "hit";
					numOfHits++;
					locationCells[i] = -1; // 맞추면 그 배열의 값을 -1로 바꿈
					break;
			}
		}
		
		if(numOfHits == locationCells.length) {
			result = "kill";
		}
		
		System.out.println(result);
		return result;
	}
}
}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{
/* Option 3 */
import java.util.ArrayList; // ArrayList 사용
public class SimpleDotCom {
        private ArrayList<String> locationCells;
        
        public void setLocationCells(ArrayList<String> locs) { // SimpleDotComTestDrive에서도 변경 요망
                locationCells = locs;
        }
        
        public String checkYourself(String stringGuess) {
                String result = "miss";
                int index = locationCells.indexOf(stringGuess);
                if(index >= 0) {
                	locationCells.remove(index); // 배열에서 제거
                	
                	if(locationCells.isEmpty()) { // 배열이 비어있으면 kill 리턴
                		result = "kill";
                	} else { // 그렇지 않으면 hit 리턴
                		result = "hit";
                	}
                }
                
                return result;
        }
}
}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{
import java.util.*;

public class DotComBust {
    private GameHelper helper = new GameHelper();
    private ArrayList<DotCom> dotComsList = new ArrayList<DotCom>();
    private int numOfGuesses = 0;
    
    private void setUpGame() {
        DotCom one = new DotCom();
        one.setName("Pets.com");
        DotCom two = new DotCom();
        two.setName("eToys.com");
        DotCom three = new DotCom();
        three.setName("Go2.com");
        dotComsList.add(one);
        dotComsList.add(two);
        dotComsList.add(three);
        
        System.out.println("Your goal is to sink three dot coms.");
        System.out.println("Pets.com, eToys.com, Go2.com");
        System.out.println("Try to sink them all in the fewest number of guesses");
        
        for (DotCom dotComSet : dotComsList) {
            ArrayList<String> newLocation = helper.placeDotCom(3);
            dotComSet.setLocationCells(newLocation);
        }
    }
    
    private void startPlaying() {
        while (!dotComsList.isEmpty()) {
            String userGuess = helper.getUserInput("Enter a guess");
            checkUserGuess(userGuess);
        }
        finishGame();
    }
    
    private void checkUserGuess(String userGuess)
    {
        numOfGuesses++;
        String result = "miss";
        
        for (DotCom dotComToTest : dotComsList)
        {
            result = dotComToTest.checkYourself(userGuess);
            if (result.equals("hit"))
            {
                break;
            }
            if (result.equals("kill"))
            {
                dotComsList.remove(dotComToTest);
                break;
            }
        }
        System.out.println(result);
    }
    
    private void finishGame() {
        System.out.println("All Dot Coms are dead!  Your stock is now worthless");
        if (numOfGuesses <= 18) {
            System.out.println("It only took you " + numOfGuesses + " guesses");
            System.out.println("You got out before your options sank.");
        }
        else
        {
            System.out.println("Took you long enough. " + numOfGuesses + " guesses.");
            System.out.println("Fish are dancing with your options.");
        }
    }
    
    public static void main(String[] args) {
        DotComBust game = new DotComBust();
        game.setUpGame();
        game.startPlaying();
    }
}

__________________________________________________________________________________

import java.util.ArrayList;

public class DotCom {
    private ArrayList<String> locationCells;
    
    public void setLocationCells(ArrayList<String> loc)
    {
        locationCells = loc;
    }
    
    public String checkYourself(String userInput)
    {
        String result = "miss";
        int index = locationCells.indexOf(userInput);
        if (index >= 0) {
            locationCells.remove(index);
            if (locationCells.isEmpty()) {
                result = "kill";
            }
            else
            {
                result = "hit";
            }
        }
        return result;
    }

    private String name;
    public void setName(String string) {
        name = string;
    }
}

__________________________________________________________________________________

import java.io.*;
import java.util.*;

public class GameHelper {
	private static final String alphabet = "abcdefg";
	private int gridLength = 7;
	private int gridSize = 49;
	private int [] grid = new int[gridSize];
	private int comCount = 0;
	
	public String getUserInput(String prompt) {
		String inputLine = null;
		System.out.print(prompt + " ");
		try {
			BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
			inputLine = is.readLine();
			
			if(inputLine.length() == 0) return null;
		} catch(IOException e) {
			System.out.println("OException: " + e);
		}
		return inputLine.toLowerCase();
}

public ArrayList<String> placeDotCom(int comSize) {
	ArrayList<String> alphaCells = new ArrayList<String>();
	String temp = null;
	int [] coords = new int[comSize];
	int attempts = 0;
	boolean success = false;
	int location = 0;
	
	comCount++;
	int incr = 1;
	if((comCount % 2) == 1) {
		incr = gridLength;
	}
	while(!success & attempts++ < 200) {
		location = (int)(Math.random()*gridSize);
		System.out.print(" try " + location);
		int x=0;
		success = true;
		while(success && x < comSize) {
			if(grid[location] == 0) {
				coords[x++] = location;
				location += incr;
				if(location >= gridSize) {
					success = false;
				}
				if(x>0 & (location % gridLength == 0)) {
					success = false;
				}
			} else {
				System.out.print(" used " + location);
				success = false;
			}
		}
	}
		
		int x=0;
		int row = 0;
		int column = 0;
		System.out.println("\n");
		
		while(x<comSize) {
			grid[coords[x]] = 1;
			row = (int) (coords[x] / gridLength);
			column = coords[x] % gridLength;
			temp = String.valueOf(alphabet.charAt(column));
			
			alphaCells.add(temp.concat(Integer.toString(row)));
			x++;
		}
		
		System.out.println("\n?");
		
		return alphaCells;
		
	}
}
}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속: 한 클래스가 다른 클래스를 상속하는 것을 하위클래스가 상위클래스로부터 '상속'받는다고 말한다.
 * 다형성: 다형성을 사용하면 레퍼런스 유형을 실제 객체 유형의 상위클래스 유형으로 지정할 수 있다. 또한 다형성을 활용하면 새로운 하위클래스 형식을 프로그램에 추가하더라도 굳이 코드를 바꿀 필요가 없다.

*208p 클래스 계층 구조* _클래스로 구현_

{{{
class Animal {
        String picture;
        boolean food;
        int hunger;
        float boundaries;
        float location;

        void makeNoise(){}
        void eat(){}
        void sleep(){}
        void roam(){}
        
}

__________________________________________________________________________________

class Feline extends Animal{
        void roam(){}
}

__________________________________________________________________________________

class Lion extends Feline{
        void makeNoise(){}
        void eat{}
}

__________________________________________________________________________________

class Tiger extends Feline{
        void makeNoise(){}
        void eat{}
}

__________________________________________________________________________________

class Cat extends Feline{
        void makeNoise(){}
        void eat{}
}

__________________________________________________________________________________

class Hippo extends Animal{
        void makeNoise(){}
        void eat(){}
}

__________________________________________________________________________________

class Canine extends Animal{
        void roam(){}
}

__________________________________________________________________________________

class Wolf extends Canine{
        void makeNoise(){}
        void eat(){}
}

__________________________________________________________________________________

class Dog extends Canine{
        void makeNoise(){}
        void eat(){}
}
}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드: 오버라이드하는 메소드의 인자와 리턴 형식은 오버라이드를 당하는 메소드와 완벽하게 일치해야 한다. 오버라이드시에 유의할 점은

1. 인자는 똑같아야 하고, 리턴 유형은 호환 가능해야 한다.

2. 메소드를 더 접근하기 어렵게 만들면 안된다.

 * 오버로딩: 이름이 같고 인자 목록이 다른 메소드 두 개를 만드는 것이다. 오버로딩시에 유의할 점은

1. 리턴 유형이 달라도 된다.

2. 리턴 유형만 바꿀 수는 없다.

3. 접근 단계를 마음대로 바꿀 수 있다.

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
public class MonsterTestDrive {
        public static void main(String [] args) {
                Monster [] ma = new Monster[3];
                ma[0] = new Vampire();
                ma[1] = new Dragon();
                ma[2] = new Monster();
                for(int x=0; x<3; x++){
                        ma[x].frighten(x);
                }
        }

}

__________________________________________________________________________________

class Monster {
        boolean frighten(int d) { // Overloading
        System.out.println("arrrgh");
        return true;
        }
}

__________________________________________________________________________________

class Vampire extends Monster {
        boolean frighten(int x) { // Overloading
                System.out.println("a bite?");
                return false;
        }
}

__________________________________________________________________________________

class Dragon extends Monster {
        boolean frighten(int degree) { // Overloading
                System.out.println("breath fire");
                return true;
        }
}
}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스: 100% 추상 클래스다. 자바에서 필수불가결한 부분으로, 다형성을 제대로 사용하기 위해 꼭 필요하다.
 * 다형성: 다형성을 사용하면 레퍼런스 유형을 실제 객체 유형의 상위클래스 유형으로 지정할 수 있다. 또한 다형성을 활용하면 새로운 하위클래스 형식을 프로그램에 추가하더라도 굳이 코드를 바꿀 필요가 없다.
 * 추상 클래스: 반드시 확장해야하는 클래스
 * 추상 메소드: 반드시 오버라이드해야하는 메소드
 * 다중 상속: 상위클래스를 두 개 사용하는 접근법이다. 하지만 자바에서는 다중 상속을 사용할 수 없다.

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수: 모든 객체가 있으며 객체 안에 인스턴스 변수가 있다.
 * 스택에서의 변수: 메소드 호출과 지역변수가 있다.
 * 생성자: 객체를 생성할 때 실행되는 코드가 들어있다.
 * 널 레퍼런스: 널 레퍼런스를 설정하면 점 연산자를 사용할 수 없게된다.
 
*298p 집중토론* _요약_

 * 인스턴스 변수: 객체의 상태가 저장된다. 객체안에 존재하며 힙에 들어있다.
 * 지역 변수: 메소드에 들어있는 알고리즘을 작동시키려면 지역 변수가 필요하다. 스택에 들어있다. 

*302p 5분 미스터리* _구현후 주석달기_

{{{
import java.util.ArrayList;
class V2Radiator {
    V2Radiator(ArrayList list) { // ArrayList를 받아들인다.
        for(int x=0; x<5; x++) {
            list.add(new SimUnit("V2Radiator"));
        }
    }

}

class V3Radiator {
    V3Radiator(ArrayList lglist) {
        //super(lglist); 이 부분을 제외시킨다. (Override)
        for(int g=0; g<10; g++) {
            lglist.add(new SimUnit("V3Radiator"));
        }
    }
}

class RetentionBot {
    RetentionBot(ArrayList rlist) {
        rlist.add(new SimUnit("Retention"));
    }
}

public class TestLifeSupportSim {
    public static void main(String[] args) {
        ArrayList aList = new ArrayList();
        V2Radiator v2 = new V2Radiator(aList);
        V3Radiator v3 = new V3Radiator(aList);
        for(int z=0; z<20; z++) {
            RetentionBot ret = new RetentionBot(aList);
        }
    }
}


class SimUnit{
    String botType;
    SimUnit(String type) {
        botType = type;
    }
    int powerUse() {
        if("Retention".equals(botType)) {
            return 2;
        } else {
            return 4;
        }
    }
} 

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드: 클래스의 인스턴스 없이 실행가능한 메소드
 * 정적 메소드를 선언하는 방법: 클래스명을 사용하여 호출
 * static final: static final로 선언된 변수는 상수이다. 클래스가 로딩되어 있는 동안 계속 똑같은 값을 유지한다.
 * 널 레퍼런스: 
 * 오토 박싱: 원시값과 레퍼 객체 사이의 변환을 자동으로 처리해주는 기능. 원시 유형이 들어갈 자리에 그 유형에 해당하는 레퍼 객체를 집어넣거나 반대로 어떤 레퍼 객체가 들어갈 자리에 원시값을 집어넣을 수 있게 한다.
 * 정적 임포트: 정적 클래스, 정적 변수, enum 값 등을 사용할 때 타이핑을 더 적게 할 수 있도록 해준다.

*339p Calendar* _구현후 주석달기_

{{{
import java.util.*;

public class MyCalendar {
        public static void main(String[] args){
                Calendar c = Calendar.getInstance();
                c.set(2013,11,10,19,02);
                long day1 = c.getTimeInMillis();
                day1 += 1000*60*60;
                c.setTimeInMillis(day1);
                System.out.println("new hour "+ c.get(c.HOUR_OF_DAY));
                c.add(c.DATE, 0);
                System.out.println("now         " + c.getTime());
                System.out.print("\n");
                c.add(c.DATE, 35);
                System.out.println("add 35 days " + c.getTime());
                c.roll(c.DATE, 35);
                System.out.println("roll 35 days " + c.getTime());
                c.set(c.DATE, 1);
                System.out.println("set to 1 " + c.getTime());
        }

}
}}}

*342p 집중토론* _요약_

 * 인스턴스 변수: 객체에 들어있다.
 * 정적 변수: 정적변수는 API에 많이 있으며 SwingConstants와 같은 클래스에 많이 들어있다. 클래스 안에 들어있고 모든 인스턴스에 의해 공유된다.

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
public class StaticTests extends StaticSuper {
        static int rand;
        
        static {
                rand = (int)(Math.random() * 6);
                System.out.println("static block " + rand);
        }
        
        StaticTests() {
                System.out.println("constructor");
        }
        
        public static void main(String [] args) {
                System.out.println("in main");
                StaticTests st= new StaticTests();
        }
        
}

__________________________________________________________________________________

class StaticSuper {
        static{
                System.out.println("super static block");
        }
        
        StaticSuper() { // ()추가
                System.out.println("super constructor");
        }
}
}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{
public class TestExceptions {
	
	public static void main(String[] args) {
		String test = "아니오"; // '예'로 하면 어떻게 될까? 는 아래에
		try {
			System.out.println("try 블록 시작");
			doRisky(test);
			System.out.println("try 블록 끝");
		} catch (ScaryException se) {
			System.out.println("예외 발생");
		} finally {
			System.out.println("finally 블록");
		}
		System.out.println("main 끝");
	}
	
	static void doRisky(String test) throws ScaryException {
		System.out.println("위험한 메소드 시작");
		if("예".equals(test)) {
			throw new ScaryException();
		}
		System.out.println("위험한 메소드 끝");
		return;
	}
}

__________________________________________________________________________________

public class ScaryException extends Exception {
	
}

/* Output

try 블록 시작

위험한 메소드 시작

위험한 메소드 끝

try 블록 끝

finally 블록

main 끝

+++ String test = "예"; 로 바꾸면?? +++

try 블록 시작

위험한 메소드 시작

예외 발생

finally 블록

main 끝 */


}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}