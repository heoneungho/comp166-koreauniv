#summary 현주의 음료수 자판기
#labels 2012190715김현주

= Introduction =
2012190715 김현주님의 자바프로젝트입니다.


= Details =
원래는 플래너를 만드려고 했으나, 날짜별로 저장하고 로딩하는 알고리즘으로 프로그래밍하는게 너무 어려워서 간단한 음료수 자판기를 만들어 봤습니다.

1. Machine class 입니다.
{{{
public class Machine
{
public static final int SELECTION = 6;
public static final int QUANITY = 3;
public double money = 0.0;
public double cost;

Beverage[] beverages = new Beverage[SELECTION];


public Machine(double cost)
{
	this.cost = cost;
}

public void lbeverages (int choice, Beverage option)
{
	beverages[choice] = option;
}

public boolean getMoney(int choice)
{
	if(money < cost)
	return false;
	if(beverages[choice].quanity <= 0)
	return false;
	beverages[choice].quanity--;
	money = money - cost;
	return true;

}

public double refund()
{
	double refund = money;
	money = 0.0;
	return refund;
}
public String getName(int choice)
{
	return beverages[choice].name;
}

}

}}}

2. VendingApp class입니다.
{{{
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;
import java.text.*;

public class VendingApp
{
	int order = 0;
	public static void main(String[] args)
	{
		JFrame frame = new VendingFrame();
		frame.setVisible(true);
	}//메인문의 끝
}//VendingApp 종료

class VendingFrame extends JFrame
{
	public VendingFrame()
	{
		setTitle("현주의 음료수 자판기");
		setResizable(false);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		JPanel panel = new VendingPanel();
		this.add(panel);
		this.pack();
	  centerWindow(this);
	}

	private void centerWindow(Window w)
	{
		 Toolkit tk = Toolkit.getDefaultToolkit();
		Dimension d = tk.getScreenSize();
		setLocation((d.width-w.getWidth())/2, (d.height-w.getHeight())/2);
	}
}


class VendingPanel extends JPanel implements ActionListener

{
	Machine m = new Machine(1.00);
	private JButton  orangeButton,
					  aloeButton,
					  colaButton,
					  sodaButton,
					  iceteaButton,
					  waterButton,
					  wonButton,
					  refundButton;
	 private JTextField   amountTextField;
   NumberFormat currency = NumberFormat.getCurrencyInstance();

   
	public VendingPanel()
	{

		 m.lbeverages(0, new Beverage("오렌지주스", m.QUANITY));
		 m.lbeverages(1, new Beverage("알로에주스", m.QUANITY));
	 	 m.lbeverages(2, new Beverage("콜라", m.QUANITY));
	  	 m.lbeverages(3, new Beverage("사이다" , m.QUANITY));
		 m.lbeverages(4, new Beverage("아이스티", m.QUANITY));
		 m.lbeverages(5, new Beverage("물", m.QUANITY));


		setLayout(new GridBagLayout());

		Border loweredBorder =
			   BorderFactory.createBevelBorder(BevelBorder.LOWERED);

			JPanel VendingPanel = new JPanel();
		VendingPanel.setLayout(new GridBagLayout());
		VendingPanel.setBorder(BorderFactory.createTitledBorder(loweredBorder, "음료"));


		orangeButton = new JButton("오렌지주스");
		orangeButton.addActionListener(this);
		VendingPanel.add(orangeButton,
			getConstraints(1,0,1,1, GridBagConstraints.WEST));
	

		aloeButton = new JButton("알로에");
		aloeButton.addActionListener(this);
		VendingPanel.add(aloeButton,
			getConstraints(1,1,1,1, GridBagConstraints.WEST));

		colaButton = new JButton("콜라");
		colaButton.addActionListener(this);
		VendingPanel.add(colaButton,
			 getConstraints(1,2,1,1, GridBagConstraints.WEST));


		sodaButton = new JButton("사이다");
		sodaButton.addActionListener(this);
		VendingPanel.add(sodaButton,
			 getConstraints(1,3,1,1, GridBagConstraints.WEST));

		iceteaButton = new JButton("아이스티");
		iceteaButton.addActionListener(this);
		VendingPanel.add(iceteaButton,
			 getConstraints(1,4,1,1, GridBagConstraints.WEST));

		waterButton = new JButton("물");
		waterButton.addActionListener(this);
		VendingPanel.add(waterButton,
			 getConstraints(1,5,1,1, GridBagConstraints.WEST));

		wonButton = new JButton("원");
		wonButton.addActionListener(this);
		VendingPanel.add(wonButton,
			 getConstraints(0,1,1,1, GridBagConstraints.WEST));

		refundButton = new JButton("반환");
		refundButton.addActionListener(this);
		VendingPanel.add(refundButton,
			 getConstraints(0,3,1,1, GridBagConstraints.WEST));

				amountTextField = new JTextField(5);
				amountTextField.setEditable(false);
				VendingPanel.add(amountTextField,
					 getConstraints(0,2,1,1, GridBagConstraints.WEST));


		this.add(VendingPanel,
			  getConstraints(0,1,3,1, GridBagConstraints.WEST));

		setAddEditMode(false);



	}

	private GridBagConstraints getConstraints(int gridx, int gridy,
	int gridwidth, int gridheight, int anchor)
	{
		GridBagConstraints c = new GridBagConstraints();
		c.insets = new Insets(5,5,5,5);
		c.ipadx = 0;
		c.ipady = 0;
		c.gridx = gridx;
		c.gridy = gridy;
		c.gridwidth = gridwidth;
		c.gridheight = gridheight;
		c.anchor = anchor;
		return c;
	} 
public void setAddEditMode(boolean e)
{
	orangeButton.setEnabled(e);
	aloeButton.setEnabled(e);
	colaButton.setEnabled(e);
	sodaButton.setEnabled(e);
	iceteaButton.setEnabled(e);
	waterButton.setEnabled(e);
}

public void actionPerformed(ActionEvent e)
{

	Object source = e.getSource();

	if (source == wonButton)
	{
	m.money +=1;
	setAddEditMode(true);
	amountTextField.setText(currency.format(m.money));
	}

   if (source == orangeButton)
   {
	   order(0);
   m.getMoney(0);
   amountTextField.setText(currency.format(m.money));

   }
   if (source == aloeButton)
   {
	   order(1);
   m.getMoney(1);
   amountTextField.setText(currency.format(m.money));

   }
   if (source == colaButton)
   {
	   order(2);
   m.getMoney(2);
   amountTextField.setText(currency.format(m.money));
   }
   if (source == sodaButton)
   {
	   order(3);
   m.getMoney(3);
   amountTextField.setText(currency.format(m.money));

   }
   if (source == iceteaButton)
   {
	   order(4);
	m.getMoney(4);
	amountTextField.setText(currency.format(m.money));
   }
   if(source == waterButton)
   {
	order(5);
   m.getMoney(5);
   amountTextField.setText(currency.format(m.money));

   }
   if (source == refundButton)
   {
	   m.refund();
	   amountTextField.setText(currency.format(m.money));
   }


}
public void order(int orders)
{

   if(m.money >= m.cost)
   {
	   JOptionPane.showMessageDialog(this, "맛있게 드세요" + m.getName(orders));
	   amountTextField.setText(currency.format(m.money));
   }
   else if(m.money < m.cost)
   {
	   setAddEditMode(false);
   JOptionPane.showMessageDialog(this, "돈을 넣어주세요");
   }


}
}







}}}

3. Beverage class 입니다.
{{{
class Beverage
{
	public String name;
	public int quanity;

	public Beverage(String n, int q)
	{
		this.name = n;
		this.quanity = q;
	}
}
}}}

 
Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages