#summary 2009190715 임세현
#labels dragonball


Introduction

친구들과 어렸을때 하던 드래곤볼 게임을 컴퓨터 또는 친구와 대전할수 있도록 만들어보려 합니다. 


Details

에너지모으기 방어하기 공격하기 순간이동 원기옥등 다양한 기술을 사용하며 컴퓨터와 대전할수 있도록 설계해보려합니다. 


Requirement 
•컴퓨터와 대전할 경우 대전자수를 지정합니다.

*기록을 남기기 위하여 플레이어의 아이디를 저장합니다.

•기모으기, 방어하기, 공격하기, 필살기등 다양한 기술을 사용합니다. 

-기모으기
: 공격을 하기위한 필요조건 입니다. 기모은양에 따라 다양한 공격을 할수 있습니다.
-방어하기
: 공격을 방어하는 기술입니다. 원기옥을 제외한 모든 공격기술을 방어할수 있습니다.
-보통공격 
: 기모으기 1회가 필요합니다. 상대가 기모으는 순간에 보통공격을 할경우 승리하게 됩니다.
-강한공격
: 기모으기 2회가 필요합니다. 상대가 기모으기를 사용하거나 보통공격을 하는 순간에 강한공격을 할경우 승리하게 됩니다.
-원기옥
: 기모으기 5회가 필요합니다. 상대가 순간이동을 제외한 어떠한 기술을 사용하더라도 승리하게 됩니다.
-순간이동
: 기모으기 1회가 필요합니다. 상대가 어떤 기술을 사용하더라도 살아남을수 있습니다.


UI구상 

시작화면에는

게임 시작하기 : 사용자가 지정한 설정에 맞춰 게임을 시작합니다.
환경 설정 : 아이디 지정하기, 컴퓨터와 대전하기(대전자수 정하기), 친구들과 대전하기
대전기록 : 사람들이 남긴 기록을 아이디마다 따로 저장합니다.
종료하기 : 프로그램을 종료합니다.


5)클래스/인터페이스 설정 

1. 메인 클래스(dragonball) 
public class dragonball{public static void main(String[] args) {                mainWindow cl = new mainWindow();// 메인윈도우 객체 생성        }}
- mainWindow클래스를 실행 
mainWindow cl = new mainWindow();// 메인윈도우 객체 생성
2. 메인 화면 클래스(mainWindow) 
class mainWindow extends JFrame {        JTextField blank; // 상단의 시계표시를 위해 공백을 만드는 텍스트필드        int jariNumber; // 자리번호        public mainWindow() {        }        public void actionPerformed() {        }        // 버튼을 생성하는 메소드        public void gridInit() {        }        // 상단 판넬        public void pan1() {        }        // 중앙 버튼 부분 판넬        public void pan2() {            }        // 하단 상황판 부분 판넬        public void pan3() {        }        // 스레드 실행 부분        public void run() {             }
- mainWindow() : 생성자, 기본적인 틀을 만듭니다. 
setTitle("독서실 관리 프로그램");// 제목표시줄setSize();// 사이즈 설정pan1();// 메소드 호출pan2();// 메소드 호출pan3();// 메소드 호출gridInit();// 메소드 호출setVisible(true);// 창을 보여줌
- pan1() : 상단의 판넬 생성 
pan1 = new JPanel();// 판넬1 생성pan1.add(blank = new JTextField());// 상단의 시계표시를 위해 공백을 만드는 텍스트필드
- pan2() : 독서실 화면 부분의 판넬 생성 
pan2 = new JPanel();// 패널 생성
- pan3() : 상황판 등 하단의 판넬 생성 
pan3 = new JPanel();// 패널 생성pan3.add(condition = new JTextArea());// 상황판을 생성pan3.add(history = new JButton("내역보기"));// 버튼 부착pan3.add(configBtn = new JButton("요금설정"));// 버튼 부착
- gridInit() : 독서실 부분에 버튼을 부착 

- run() : 상단에 시계를 표시하기 위해 쓰레드를 실행 
Date d = new Date();// 날짜 객체 생성
- actionPerformed() : 버튼이벤트 설정 
jariNumber = Integer.parseInt();// 자리번호 변수에 저장하고new enterWindow(jariNumber);// 그것을 매개변수로 입실 창 띄우기
3. 입실 화면 클래스(enterWindow) 

- enterWindow() :　생성자, 기본적인 틀을 만듬 
setTitle("입실");// 제목표시줄
- pan1() : 판넬을 생성하고 윈도우를 구성 

- layout() : 그리드백 레이아웃에 객체를 부착하는 메소드 

- actionPerformed() : 버튼이벤트 설정 
IDNumber = tf1.getText();// 손님 ID 번호를 텍스트박스에서 받음jariNumber = tf2.getText();// 자리 번호를 텍스트박스에서 받음
- itemStateChanged() : 체크박스 이벤트 설정(기간제, 시간제 선택) 

4. 퇴실 화면 클래스(leaveWindow) 

- leaveWindow() : 생성자,기본적인 틀을 만듬 

- pan1() : 판넬을 생성하고 윈도우를 구성 

- layout() : 그리드백 레이아웃에 객체를 부착하는 메소드 

- intime() : 좌석 이용 시간을 계산하는 메소드 

- charge() : 독서실 이용 요금을 계산하는 메소드 

- actionPerformed() : 버튼이벤트 설정 

5. 내역 화면 클래스(logWindow) 

- logWindow() : 생성자 

- pan1() : 상단의 테이블부분 판넬 생성 

- pan3() : 하단의 검색부분 판넬 생성 

- defaultTable() : 기본 테이블을 불러오는 메소드 

- IDNumberSearch() : 사용자 ID번호로 검색하는 메소드 

- dateSearch() : 날짜로 검색하는 메소드 

- remove table() : 테이블의 내용을 지우는 메소드 

- total() : 통계부분을 계산하는 메소드 

- actionPerformed() : 버튼이벤트 설정 

6. 환경 설정 클래스(config) 

- config() : 생성자 

- pan1() : 판넬을 생성하고 윈도우를 구성 

- layout() : 그리드백 레이아웃에 객체를 부착하는 메소드 

- actionPerformed() : 버튼이벤트 설정 

7. 데이터를 파일로부터 읽는 클래스(readFile) 

- readFile() : 생성자 

- readconfig() : 설정된 요금을 읽어옴 

- readdata() : 독서실의 상황과 현재까지의 내역을 읽어옴 

8. 데이터를 파일에 저장하는 클래스(writeFile) 

- write() : 생성자 

- writeFile() : 파일에 독서실의 상황 및 내역을 써 넣음 

9. 현재까지 기록을 읽는 클래스(readLog) 

- readLog() : 생성자 

10. 상황을 출력하는 클래스(message) 

- message() : 

2개의 생성자를 가지고 있음. 

매개변수가 4개가 들어오면 입실, 

7개가 들어오면 퇴실에 메세지를 저장 

11. 시스템 시간을 저장하는 인터페이스 

- day, hour, min, month, present, sec, year 