= Introduction =

친구들과 어렸을때 하던 드래곤볼 게임을 컴퓨터 또는 친구와 대전할수 있도록 만들어보려 합니다.

= Details =

에너지모으기, 방어하기, 공격하기, 순간이동, 원기옥등 다양한 기술을 사용하여 컴퓨터나 사용자끼리 대전할수 있도록 설계해보려 합니다.

= Requirement =

컴퓨터와 대전할경우 대전자수를 지정합니다.

기록을 남기기 위하여 플레이어의 아이디를 저장합니다.

기모으기, 방어하기, 공격하기, 필살기등 다양한 기술을 사용합니다.

-기모으기 : 공격을 하기위한 필요조건 입니다. 기모은 양에 따라 다양한 공격을 할수 있습니다.

-방어하기 : 공격을 방어하는 기술입니다. 원기옥을 제외한 모든 공격기술을 방어할수 있습니다.

-보통공격 : 기모으기 1회가 필요합니다. 상대가 기모으는 순간에 보통 공격을 할경우 승리하게 됩니다.

-강한공격 : 기모으기 2회가 필요합니다. 상대가 기모으기를 사용하거나 보통공격을 하는 순간에 강한공격을 할 경우 승리하게 됩니다.

-원기옥 : 기모으기 5회가 필요합니다. 상대가 순간이동을 제외한 어떠한 기술을 사용하더라도 승리하게 됩니다.

-순간이동 : 기모으기 1회가 필요합니다. 상대가 어떤 기술을 사용하더라도 살아남을수 있습니다.

= 구상 =

시작화면에는

게임 시작하기 : 사용자가 지정한 설정에 맞춰 게임을 시작합니다.

환경 설정 : 아이디 지정하기. 컴퓨터와 대전하기, 대전자수 정하기, 친구들과 대전하기

대전기록 : 사람들이 남긴 기록을 아이디마다 따로 저장합니다.

종료하기 : 프로그램을 종료합니다.


지금까지 만든거 11/09

PLAYER class

{{{

class PLAYER
{
	int turn=1;
	int charge=0 ;
	boolean A=false;
	boolean energy=false;
	
		
	public void Charging()
	{		
		who ();
		charge++;
		System.out.println("기를 모읍니다. 현재 기모은양: " + charge);
		turn++;
	}

	public void Attacking()
	{	
		who ();
		charge--;
		System.out.println("공격합니다. 현재 기모은양: " +charge);
		turn++;
	}
			
	public void Defensing()
	{
		who ();
		System.out.println("방어합니다. 현재 기모은양: " +charge);
		turn++;
	}
	
	public void PowerAttacking()
	{
		who ();
		charge = charge-4;
		System.out.println("원기옥을 사용합니다. 현재 기모은양: " +charge);
		turn++;
	}
	
	public void Teleport()
	{
		who ();
		charge = charge -2;
		System.out.println("순간이동을 사용합니다. 현재 기모은양: " +charge);
		turn++;
	}
	
	public void who ()
	{
		if(this instanceof USER) // If the object is an intance of Class USER 
			System.out.print("사용자가 ");
		else if (this instanceof CPU) // If the object is an intance of Class CPU
 			System.out.print("컴퓨터가 ");
	}
	
	public int doAction (int Choice)
	{
		switch (Choice)
		{
			case 0:
				Charging();
				return ++turn;
		
			case 1:
				Attacking();
				return ++turn;

			case 2:
				Defensing();
				return ++turn;
				
			case 3:
				PowerAttacking();
				return ++turn;
				
			case 4:
				Teleport();
				return ++turn;
				

			default:
				return ++turn;
		}
	}
}


}}}

USER class

{{{

//플레이어를 설정해주는 클래스

import java.util.Scanner; 

class USER extends PLAYER
{
	//글로벌 변수
	int USERChoice = -1; //0=기모으기, 1=공격, 2=방어
	Scanner me;		
	
	//컨스트럭터
	public USER() {		
		me=  new Scanner(System.in);
	}

	public int USERAction ()
	{
		while(!energy)
		{
			System.out.println("0: 기모으기, 1: 공격, 2: 방어, 3: 원기옥, 4: 순간이동 ");
			USERChoice = me.nextInt();
		

			if(charge<1&&USERChoice==1)
				System.out.println("에너지가 부족합니다");
			else if(charge<4&&USERChoice==3)
				System.out.println("에너지가 부족합니다");
			else if(charge<2&&USERChoice==4)
				System.out.println("에너지가 부족합니다");
			else if (USERChoice>4||USERChoice<0)
				System.out.println("잘못된 선택입니다.");
			else
			{
				energy = true;
			}
		}
		energy = false;
		return doAction(USERChoice); //defined in PLAYER	
	}
}
}}}

CPU class

{{{


//컴퓨터를 조작해주는 클래스

class CPU extends PLAYER
{
	int CPUChoice = -1; //0=기모으기, 1=공격, 2=방어    

	public int CPUAction()
	{
			if (turn==1)
			{
				Charging();
				return ++turn;
			}
			else
			{
				while(!energy)
				{
					CPUChoice = (int)(Math.random()*4);
					if(CPUChoice==1&&charge<1){}
					else if(CPUChoice==3&&charge<4){}
					else if(CPUChoice==4&&charge<2){}
					else
					{
						energy=true;
					}
				}
				energy=false;
				return doAction(CPUChoice); //defined in PLAYER					
			}		
	}
}

}}}

STATE class

{{{

//상태를 지정해주는 클래스

class STATE
{
	USER A = new USER();
	CPU B = new CPU();

	String draw; 
	String win; 
	String lose;

	public STATE() {
		A = new USER();
		B = new CPU();

		draw = "아무일도 일어나지 않았습니다."; 
		win = "당신이 이겼습니다."; 
		lose = "컴퓨터가 이겼습니다.";
	}
	
	public void COMPARE ()
	{
		for (;A.turn<10000;)
		{
			if(A.USERAction()==B.CPUAction())
			{				
				if(A.USERChoice == B.CPUChoice)
					System.out.print(draw);
				else if(A.USERChoice==2&&B.CPUChoice!=3)
					System.out.println(draw);
				else if(A.USERChoice!=3&&B.CPUChoice==2)
					System.out.println(draw);
				else if(A.USERChoice==4)
					System.out.println(draw);
				else if(B.CPUChoice==4)
					System.out.println(draw);
				else if(A.USERChoice==0 && B.CPUChoice==1)
				{
					System.out.println(lose);
					break;
				}
				else if(A.USERChoice==1 && B.CPUChoice==0)
				{
					System.out.println(win);
					break;
				}
				else if(A.USERChoice==3 && B.CPUChoice!=4)
				{
					System.out.println(win);
					break;
				}
				else if(A.USERChoice!=4 && B.CPUChoice==3)
				{
					System.out.println(lose);
					break;
				}
			}
			else
			{
				System.out.println("ERROR");
				break;
			}
			
		}
	}
	
}

}}}

DRIVER class

{{{



//메인메소드가 있는 드라이버클래스


public class DRIVER {

	public static void main(String[] args) {
		STATE game = new STATE();
		game.COMPARE();
	
	}
}


}}}

SCREEN class

{{{

import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Checkbox;
import java.awt.CheckboxGroup;
import java.awt.Dimension;
import java.awt.FileDialog;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Label;
import java.awt.Menu;
import java.awt.MenuBar;
import java.awt.MenuItem;
import java.awt.Panel;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.*;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;


public class SCREEN1 extends JFrame implements ActionListener {

	
	Image img1 = Toolkit.getDefaultToolkit().getImage("me.jpg");
	Image img2 = Toolkit.getDefaultToolkit().getImage("enemy.jpg");
	
	private MenuBar mb = new MenuBar();	
	private Menu file = new Menu("File");
	private MenuItem fnew = new MenuItem("New");
	private MenuItem fopen = new MenuItem("Open");
	private MenuItem fsave = new MenuItem("Save");
	private MenuItem fexit = new MenuItem("Exit");
	
	private FileDialog fdlg1 = new FileDialog(this, "파일 불러오기", FileDialog.LOAD);
	private FileDialog fdlg2 = new FileDialog(this, "파일 저장하기", FileDialog.SAVE);
	
	private Menu help = new Menu("help");
	private MenuItem hver = new MenuItem("Version");	
	
	private Label sel = new Label("행동을 선택하세요.");
	private Button[] btns = {new Button("공격"), new Button("방어"), new Button("기모으기"), 
			new Button("원기옥"), new Button("순간이동")};

	
	private BorderLayout ma = new BorderLayout();
	
	private JPanel p1 = new JPanel();
	private GridLayout gl1 = new GridLayout(1,5);
	
	private JPanel p2 = new JPanel();
	private GridBagLayout gl2 = new GridBagLayout(); 
	
	private JPanel p3 = new JPanel()
	{
		public void paintComponent(Graphics g){
		     g.drawImage(img1, 0, 0, 200, 200, this);
		}
	};

	
	private GridBagLayout gl3 = new GridBagLayout();
	
	private JPanel p4 = new JPanel() 
	{
		public void paintComponent(Graphics g){
		     g.drawImage(img2, 0, 0, 200, 200, this);
		}
	};
	
	private GridBagLayout gl4 = new GridBagLayout(); 
	
	

	public SCREEN1() {
		
		
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(150, 150, 600, 400);
		setVisible(true);
		
		
		this.init();
		this.event();
		
	}
	
	public void init()	{

		this.setLayout(ma);
		
		p3.setPreferredSize(new Dimension(200, 200));
		p4.setPreferredSize(new Dimension(200, 200));
		
		p1.setLayout(gl1);
		p1.add(btns[0]);
		p1.add(btns[1]);
		p1.add(btns[2]);
		p1.add(btns[3]);
		p1.add(btns[4]);
		this.add(p1,BorderLayout.SOUTH);
		
		p2.setLayout(gl2);
		p2.add(sel);
		this.add(p2,BorderLayout.NORTH);
		
		p3.setLayout(gl3);
		this.add(p3,BorderLayout.EAST);
		
		p4.setLayout(gl4);
		this.add(p4,BorderLayout.WEST);
						
		
		
		file.add(fnew);
		file.addSeparator();
		file.add(fopen);
		file.add(fsave);
		file.addSeparator();
		file.add(fexit);
		mb.add(file);
		
		mb.add(help);
		help.add(hver);
		this.setMenuBar(mb);
		
		
	}
	
	public void event()	{
		fopen.addActionListener(this);
		fsave.addActionListener(this);	
		fexit.addActionListener(this);
	}
		
	public void actionPerformed(ActionEvent e)	{
		if (e.getSource()==fopen)
			fdlg1.setVisible(true);
		else if(e.getSource()==fsave)
			fdlg2.setVisible(true);
		else if(e.getSource()==fexit)
			System.exit(0);
	}
	
	
	public static void main(String[] args) {		
		SCREEN1 t = new SCREEN1();		
	}
}

}}}

11.17 update