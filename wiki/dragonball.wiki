= Introduction =

친구들과 어렸을때 하던 드래곤볼 게임을 컴퓨터 또는 친구와 대전할수 있도록 만들어보려 합니다.

= Details =

에너지모으기, 방어하기, 공격하기, 순간이동, 원기옥등 다양한 기술을 사용하여 컴퓨터와 사용자가 대전할수 있도록 설계해보려 합니다.

= Requirement =

기모으기, 방어하기, 공격하기, 필살기등 다양한 기술을 사용합니다.

-기모으기 : 공격을 하기위한 필요조건 입니다. 기모은 양에 따라 다양한 공격을 할수 있습니다.

-방어하기 : 공격을 방어하는 기술입니다. 원기옥을 제외한 모든 공격기술을 방어할수 있습니다.

-보통공격 : 기모으기 1회가 필요합니다. 상대가 기모으는 순간에 보통 공격을 할경우 승리하게 됩니다.

-강한공격 : 기모으기 2회가 필요합니다. 상대가 기모으기를 사용하거나 보통공격을 하는 순간에 강한공격을 할 경우 승리하게 됩니다.

-원기옥 : 기모으기 5회가 필요합니다. 상대가 순간이동을 제외한 어떠한 기술을 사용하더라도 승리하게 됩니다.

-순간이동 : 기모으기 1회가 필요합니다. 상대가 어떤 기술을 사용하더라도 살아남을수 있습니다.

= 구상 =

시작화면에는



지금까지 만든거 11/25

CPU class

{{{


public class CPU extends Player{

	boolean cpuEnergy;
	
	public CPU() {
		cpuEnergy=false;
	}
	
	public void setEnergy (boolean energy) {cpuEnergy=energy;}
	public boolean getEnergy () {return cpuEnergy;}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	public boolean getState(int i) {
		// TODO Auto-generated method stub
		return false;
	}

}

}}}

Player class

{{{


public class Player {


	int charge;
	int choice;
	int state;
	
	
	public Player() {
		
		charge = 0;
		choice = -1;
		state = -1;//0=charge,1=attack,2=defense,3=power attack, 4=teleport
		
	}
	
	public void setCharge (int newCharge) {charge=newCharge;}
	public int getCharge () {return charge;}
	public void setChoice (int newChoice) {choice=newChoice;}
	public int getChoice () {return choice;}
	
	public void setState (int newState) {state = newState;}
	public int getState () {return state;}
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}

}}}

mydragonball Class

{{{

import javax.swing.*;
import java.awt.EventQueue;
import javax.swing.JFrame;
import java.awt.BorderLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JLabel;
import java.awt.GridLayout;
import javax.swing.JButton;
import javax.swing.ImageIcon;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.FlowLayout;
import javax.swing.SwingConstants;

import java.awt.FileDialog;
import java.awt.Font;
import java.awt.Color;


public class mydragonball {
	
	static private Player me;
	static private CPU cpu;

	static	int end = -1;
	static	int myscore = 0;
	static	int cpuscore = 0;	
	
	public mydragonball() {
		initPlayer();
		initialize();
	}
	
	public void initPlayer ()
	{
		me = new Player();
		cpu = new CPU();
	}
	
	
	
	private JFrame frame;
	
	FileDialog fdlg1 = new FileDialog(frame, "파일 불러오기", FileDialog.LOAD);
	FileDialog fdlg2 = new FileDialog(frame, "파일 저장하기", FileDialog.SAVE);

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					mydragonball window = new mydragonball();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}


	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		

		frame = new JFrame();
		frame.setResizable(false);
		

		frame.setBounds(100, 100, 600, 350);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(new BorderLayout(0, 0));
		
		JPanel panel = new JPanel();
		frame.getContentPane().add(panel, BorderLayout.NORTH);
		
		JLabel lblSelectPosition = new JLabel("Select Position");
		panel.add(lblSelectPosition);
		
		JPanel panel_1 = new JPanel();
		frame.getContentPane().add(panel_1, BorderLayout.WEST);
		panel_1.setLayout(new GridLayout(2, 1));
		
		JLabel lblNewLabel = new JLabel("");
		lblNewLabel.setIcon(new ImageIcon("me.jpg"));
		panel_1.add(lblNewLabel);
		
		final JLabel lblNewLabel_1 = new JLabel("");
		panel_1.add(lblNewLabel_1);
		
		JPanel panel_2 = new JPanel();	
		frame.getContentPane().add(panel_2, BorderLayout.EAST);
		panel_2.setLayout(new GridLayout(2,1));
		
		JLabel lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.setIcon(new ImageIcon("enemy.jpg"));
		panel_2.add(lblNewLabel_2);
		
		final JLabel lblNewLabel_3 = new JLabel("");
		panel_2.add(lblNewLabel_3);
		
		JPanel panel_3 = new JPanel();
		frame.getContentPane().add(panel_3, BorderLayout.SOUTH);
		panel_3.setLayout(new GridLayout(1,5));
		
		JPanel panel_4 = new JPanel();
		frame.getContentPane().add(panel_4, BorderLayout.CENTER);
		panel_4.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
		
		final JLabel lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.setForeground(Color.RED);
		lblNewLabel_4.setFont(new Font("Viner Hand ITC", Font.PLAIN, 30));
		lblNewLabel_4.setHorizontalAlignment(SwingConstants.CENTER);
		panel_4.add(lblNewLabel_4);
		
		JMenuBar menuBar = new JMenuBar();
		frame.setJMenuBar(menuBar);
		
		JMenu mnFile = new JMenu("File");
		menuBar.add(mnFile);
		
		JMenuItem mntmNew = new JMenuItem("New Game");
		mntmNew.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				initPlayer();	

				end = -1;
				lblNewLabel_4.setText("");	
				lblNewLabel_1.setText("");	
				lblNewLabel_3.setText("");	
			}
		});
		mnFile.add(mntmNew);
		
		JMenuItem mntmExit = new JMenuItem("Exit");
		mntmExit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				System.exit(0);
			}
		});
		
		JMenuItem mntmLoad = new JMenuItem("Load");
		mntmLoad.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				fdlg1.setVisible(true);
			}
		});
		
		JMenuItem mntmSave = new JMenuItem("Save");
		mntmSave.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				fdlg2.setVisible(true);
			}
		});
		mnFile.add(mntmSave);
		mnFile.add(mntmLoad);
		mnFile.add(mntmExit);
		
		JMenu mnVersion = new JMenu("Information");
		menuBar.add(mnVersion);
		
		JMenuItem mntmInformation = new JMenuItem("Guide");
		mntmInformation.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JOptionPane.showMessageDialog(frame, "기모으기 : 공격을 하기위한 필요조건 입니다. 기모은 양에 따라 다양한 공격을 할수 있습니다.\n\n방어하기 : 공격을 방어하는 기술입니다. 강한공격을 제외한 공격기술을 방어할수 있습니다. \n\n공격 : 기모으기 1회가 필요합니다. 상대가 기모으는 순간에 공격을 할경우 승리하게 됩니다. \n\n강한공격 : 기모으기 4회가 필요합니다. 상대가 순간이동을 제외한 어떠한 기술을 사용하더라도 승리하게 됩니다. \n\n순간이동 : 기모으기 2회가 필요합니다. 상대가 어떤 기술을 사용하더라도 살아남을수 있습니다. ");
			}
		});
		mnVersion.add(mntmInformation);
		
		JMenuItem mntmScore = new JMenuItem("Score");
		mntmScore.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JOptionPane.showMessageDialog(frame, "My Score : " +myscore+ " CPU Score : " +cpuscore);
			}
		});
		mnVersion.add(mntmScore);
		
		
		
		JButton btnCharge = new JButton("charge");
		btnCharge.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {	
				
				buttonaction1 baction1 = new buttonaction1();
				baction1.realaction1(cpu, me, frame, lblNewLabel_1, lblNewLabel_3, lblNewLabel_4, myscore, cpuscore, end);
			

				me.setCharge(me.getCharge()+1);
				lblNewLabel_1.setText("기를 모읍니다. 현재 기모은양: " +me.getCharge());
				me.setState(0);

				buttonaction1 baction2 = new buttonaction1();
				baction2.realaction2(cpu, me, frame, lblNewLabel_1, lblNewLabel_3, lblNewLabel_4, myscore, cpuscore, end);
				cpuscore = baction2.cpuscore_fin;
				myscore = baction2.myscore_fin;
				
				
			}				
				
		});
		panel_3.add(btnCharge);
		
		JButton btnAttack = new JButton("attack");
		btnAttack.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				
				
				if(me.getCharge()<1) {
					lblNewLabel_4.setText("error");
					return;
				}
				else {

					buttonaction1 baction1 = new buttonaction1();
					baction1.realaction1(cpu, me, frame, lblNewLabel_1, lblNewLabel_3, lblNewLabel_4, myscore, cpuscore, end);
			}
				
				
				me.setCharge(me.getCharge()-1);
				lblNewLabel_1.setText("공격합니다. 현재 기모은양: " +me.getCharge());
				me.setState(1);	
				
				
				buttonaction1 baction2 = new buttonaction1();
				baction2.realaction2(cpu, me, frame, lblNewLabel_1, lblNewLabel_3, lblNewLabel_4, myscore, cpuscore, end);
				cpuscore = baction2.cpuscore_fin;
				myscore = baction2.myscore_fin;
			}
			
		});
		panel_3.add(btnAttack);
		
		JButton btnDefense = new JButton("defense");
		btnDefense.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				
				buttonaction1 baction1 = new buttonaction1();
				baction1.realaction1(cpu, me, frame, lblNewLabel_1, lblNewLabel_3, lblNewLabel_4, myscore, cpuscore, end);			
				
				
				lblNewLabel_1.setText("방어합니다. 현재 기모은양: " +me.getCharge());
				me.setState(2);
	
				
				buttonaction1 baction2 = new buttonaction1();
				baction2.realaction2(cpu, me, frame, lblNewLabel_1, lblNewLabel_3, lblNewLabel_4, myscore, cpuscore, end);
				cpuscore = baction2.cpuscore_fin;
				myscore = baction2.myscore_fin;
						
						
			}
			
		});
		panel_3.add(btnDefense);
		
		JButton btnPowerAttack = new JButton("power attack");
		btnPowerAttack.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				if(me.getCharge()<4) {
					lblNewLabel_4.setText("error");
					return;
				}
				else {
				
					buttonaction1 baction1 = new buttonaction1();
					baction1.realaction1(cpu, me, frame, lblNewLabel_1, lblNewLabel_3, lblNewLabel_4, myscore, cpuscore, end);
			}
						
				
				me.setCharge(me.getCharge()-4);
				lblNewLabel_1.setText("원기옥을 사용합니다. 현재 기모은양: " +me.getCharge());
				me.setState(3);
				
				
				buttonaction1 baction2 = new buttonaction1();
				baction2.realaction2(cpu, me, frame, lblNewLabel_1, lblNewLabel_3, lblNewLabel_4, myscore, cpuscore, end);
				cpuscore = baction2.cpuscore_fin;
				myscore = baction2.myscore_fin;
			}
			
		});
		panel_3.add(btnPowerAttack);
		
		JButton btnTeleport = new JButton("teleport");
		btnTeleport.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				if(me.getCharge()<2) {
					lblNewLabel_4.setText("error");
					return;
				}
				else {
				
					buttonaction1 baction1 = new buttonaction1();
					baction1.realaction1(cpu, me, frame, lblNewLabel_1, lblNewLabel_3, lblNewLabel_4, myscore, cpuscore, end);
			}
								
				
				
				me.setCharge(me.getCharge()-2);
				lblNewLabel_1.setText("텔레포트를 사용합니다. 현재 기모은양: " +me.getCharge());
				me.setState(4);
		
				
				buttonaction1 baction2 = new buttonaction1();
				baction2.realaction2(cpu, me, frame, lblNewLabel_1, lblNewLabel_3, lblNewLabel_4, myscore, cpuscore, end);
				cpuscore = baction2.cpuscore_fin;
				myscore = baction2.myscore_fin;
				
			}
			
		});
		panel_3.add(btnTeleport);
				
	
	}

}

}}}

buttonaction1 Class

{{{

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JLabel;


public class buttonaction1 {
	
	int myscore_fin = 0;
	int cpuscore_fin = 0;

	public void realaction1(CPU cpu, Player me, JFrame frame, JLabel lblNewLabel_1, JLabel lblNewLabel_3, JLabel lblNewLabel_4, int myscore, int cpuscore, int end){
		
		
		//컴퓨터의 행동	
		
		if(me.getCharge()<1&&cpu.getCharge()==0) {  
				cpu.setCharge(cpu.getCharge()+1);
				lblNewLabel_3.setText("기를 모읍니다. 현재 기모은양: " + cpu.getCharge());
				cpu.setState(0);
			}
			else {
			
			while(!cpu.getEnergy())
			{
				cpu.setChoice((int)(Math.random()*4));
				
				if(cpu.getChoice()==1&&cpu.getCharge()<1){}
				else if(cpu.getChoice()==3&&cpu.getCharge()<4){}
				else if(cpu.getChoice()==4&&cpu.getCharge()<2){}
				else
				{
					cpu.setEnergy(true);
				}
			}
			cpu.setEnergy(false);
			
			switch (cpu.getChoice()) {
			case 0:
				cpu.setCharge(cpu.getCharge()+1);
				lblNewLabel_3.setText("기를 모읍니다. 현재 기모은양: " + cpu.getCharge());
				cpu.setState(0);
				break;
				
			case 1:
				cpu.setCharge(cpu.getCharge()-1);
				lblNewLabel_3.setText("공격합니다. 현재 기모은양: " + cpu.charge);
				cpu.setState(1);
				break;
				
			case 2:
				lblNewLabel_3.setText("방어합니다. 현재 기모은양: " + cpu.charge);
				cpu.setState(2);
				break;
				
			case 3:
				cpu.setCharge(cpu.getCharge()-4);
				lblNewLabel_3.setText("원기옥을 사용합니다. 현재 기모은양: " + cpu.charge);
				cpu.setState(3);
				break;
				
			case 4:
				cpu.setCharge(cpu.getCharge()-2);
				lblNewLabel_3.setText("텔레포트를 사용합니다. 현재 기모은양: " + cpu.charge);
				cpu.setState(4);
				break;
				

				default:
				break;
			}
			
		}
	}
	public void realaction2(CPU cpu, Player me, JFrame frame, JLabel lblNewLabel_1, JLabel lblNewLabel_3, JLabel lblNewLabel_4, int myscore, int cpuscore, int end){
			//컴퓨터와 플레이어의 상태비교
					if(me.state==0 && cpu.state==1)
					{
						lblNewLabel_4.setText("lose");
						cpuscore++;
						end = JOptionPane.showConfirmDialog(frame, "다시 시작하시겠습니까", "게임",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
						if (end==0) {
							cpu.charge = 0;
							me.charge = 0;
							cpu.choice = -1;
							cpu.setEnergy(false); 
							me.state = -1;//0=charge,1=attack,2=defense,3=power attack, 4=teleport
							cpu.state = -1;
							end = -1;
							lblNewLabel_4.setText("");	
							lblNewLabel_1.setText("");	
							lblNewLabel_3.setText("");													
						}
						else {
							System.exit(0);
						}
						
					}
					else if(me.state==1 && cpu.state==0)
					{
						lblNewLabel_4.setText("win");
						myscore++;
						end = JOptionPane.showConfirmDialog(frame, "다시 시작하시겠습니까", "시작",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
						if (end==0) {
							cpu.charge = 0;
							me.charge = 0;
							cpu.choice = -1;
							cpu.setEnergy(false); 
							me.state = -1;
							cpu.state = -1;
							end = -1;
							lblNewLabel_4.setText("");	
							lblNewLabel_1.setText("");	
							lblNewLabel_3.setText("");													
						}
						else {
							System.exit(0);
						}
					}
					else if(me.state==3 && cpu.state!=4)
					{
						lblNewLabel_4.setText("win");
						myscore++;
						end = JOptionPane.showConfirmDialog(frame, "다시 시작하시겠습니까", "시작",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
						if (end==0) {
							cpu.charge = 0;
							me.charge =  0;
							cpu.choice =  -1;
							cpu.setEnergy(false); 
							me.state = -1;
							cpu.state = -1;
							end = -1;
							lblNewLabel_4.setText("");	
							lblNewLabel_1.setText("");	
							lblNewLabel_3.setText("");													
						}
						else {
							System.exit(0);
						}
					}
					else if(me.state!=4 && cpu.state==3)
					{
						lblNewLabel_4.setText("lose");	
						cpuscore++;
						end = JOptionPane.showConfirmDialog(frame, "다시 시작하시겠습니까", "시작",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
						if (end==0) {
							cpu.charge = 0;
							me.charge =  0;
							cpu.choice =  -1;
							cpu.setEnergy(false); 
							me.state = -1;
							cpu.state = -1;
							end = -1;
							lblNewLabel_4.setText("");	
							lblNewLabel_1.setText("");	
							lblNewLabel_3.setText("");													
						}
						else {
							System.exit(0);
						}
					}

		
		
		myscore_fin = myscore;
		cpuscore_fin = cpuscore;

		}

	}


}}}