#summary 임지빈

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{
//일단 비어송이라는 클래스를 퍼블릭 형식으로 만듭니다.//
public class BeerSong {
    public static void main(String[] args) {
        int beerNum = 99;
        String word = "bottles";
        while (beerNum > 0)
        {
            if (beerNum == 1)
            {
                word = "bottle";
            } 
            System.out.println(beerNum + " " + word + " of beer on the wall");
            System.out.println(beerNum + " " + word + " of beer");
            System.out.println("Take one down.");
            System.out.println("Pass it around.");
            
            beerNum = beerNum - 1;
            //비어넘에는 현재 남아있는 병 숫자, word에는 비어넘이 2~99일때는 bottles 1되면 bottle, 그리고 of beer on the wall 이라는 숫자가 붙어서 출력되겠네요//
            if (beerNum == 0) //beer 송 노래가 뭔지는 잘 모르겠는데요, 보통 한국노래가 4줄씩이니까 이렇게 해야되지 않을까요? 한국식으로 바꿔보았습니다 ㅎ//
            {
               System.out.println("No more bottle of beer on the wall");
            }
        }
    }
}
}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{
public class PhraseOMatic {
    public static void main(String[] args) {
        String[] wordListOne = {"love", "bless", "good-feeling"};
        String[] wordListTwo = {"of", "in", "by", "from"};
        String[] wordListThree = {"you", "us", "me", "her", "him", "professor"};
        int oneLength = wordListOne.length;
        int twoLength = wordListTwo.length;
        int threeLength = wordListThree.length;
        int rand1 = (int) (Math.random() * oneLength);
        int rand2 = (int) (Math.random() * twoLength);
        int rand3 = (int) (Math.random() * threeLength);
        
        String phrase = wordListOne[rand1] + " " + wordListTwo[rand2] + " " + wordListThree[rand3];
        System.out.println("What we need is a " + phrase);
    }
}
}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 프로그램을 실행시키고 유형의 변경이 일어날때도 문제가 일어났다는 classcast exception을 발생시킨다. 바이트 코트가 만들어진 다음 바이트코드가 실행되기 전까지 다른 누군가가 그걸 건드리지 않았는지 확인하는 역활도 한다.
 * 컴파일러: 일일이 바이트코드(기계어)를 짜지 않아도 되게 해주는 것이다. 인간이 보기에 편한 언어를 기계어로 바꿔주는 역활을 하며, 문법적 오류, 유형 위반사항 , 보안상의 메소드 변경 등을 미리 찾아낸다.

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

public class Exercise1a {

	public static void main(String[] args) {
		int x = 1;
		while ( x<10)
		{
			x = x + 1 ; //숫자 변화를 줬습니다! //
			if (x >3)
			{
			System.out.println("big x");	
			}
		}

	}

}

//클래스를 추가해주었지요!//
public class Tobecompilerer {

	public static void main(String[] args) {
		int x = 5;
		while (x > 1) {
			x = x - 1;
			if( x<3) {
				System.out.println("small x");
			}
		}
	}

}


public class Exercise1c {

	public static void main(String[] args) {
		int x = 5; //메소드를 만들어 주었습니다! //
		while ( x> 1)
		{
			x = x - 1;
			if (x <3) 
			{
				System.out.println("small x");
			}
		}

	}

}



}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체의 상태(데이터)를 나타낸다.
 * 메소드:객체에서 할 수 있는 일
 * 클래스: 가상머신에 그 유형의 객체를 만드는 방법을 알려주는 역활
 * 테스트용 클래스: 클래스를 테스트 하기 위한 코드
 

*68p Television* _채워넣기_

 * 인스턴스 변수: broadcast
 * 메소드:output(), input()


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{
package Guessgame;
public class Guessgame {
	

   Player p1;
   Player p2;
   Player p3;
   Player p4;
	
   
   public void startGame() {
       p1 = new Player();
       p2 = new Player();
       p3 = new Player();
       p4 = new Player();
       int guessp1 = 0;
       int guessp2 = 0;
       int guessp3 = 0;
       int guessp4 = 0;
       boolean p1isRight = false;
       boolean p2isRight = false;
       boolean p3isRight = false;
       boolean p4isRight = false;
       int targetNumber = (int) (Math.random() * 10);
       System.out.println("I'm thinking of a number between 0 and 9...");
       while(true) {
           System.out.println("Number to guess is " + targetNumber);
           
           p1.guess();
           p2.guess();
           p3.guess();
           p4.guess();
           
           guessp1 = p1.number;
           System.out.println("Player one guessed " + guessp1);
           guessp2 = p2.number;
           System.out.println("Player two guessed " + guessp2);
           guessp3 = p3.number;
           System.out.println("Player three guessed " + guessp3);
           guessp4 = p4.number;
           System.out.println("Player four guessed " + guessp4);
           
           if (guessp1 == targetNumber) {
               p1isRight = true;
           }
           if (guessp2 == targetNumber) {
               p2isRight = true;
           }
           if (guessp3 == targetNumber) {
               p3isRight = true;
           }
           if (guessp4 == targetNumber) {
        	   p4isRight = true;
           }
           if (p1isRight || p2isRight || p3isRight || p4isRight)
           {
               System.out.println("We have a winner!");
               System.out.println("Player one got it right? " + p1isRight);
               System.out.println("Player two got it right? " + p2isRight);
               System.out.println("Player three got it right? " + p3isRight);
               System.out.println("Player four got it right? " + p4isRight);
               System.out.println("Game is over");
               break;
           }
           else
           {
               System.out.println("Players will have to try again.");
           }
       }
   }
}

package Guessgame;
public class Player{
	int number = 0;
	public void guess()
	{
		number = (int) (Math.random() * 10);
		System.out.println("찍은 숫자: " + number);
	}
}

package Guessgame;

public class GameLauncher {
	public static void main (String[] args)
	{
		Guessgame game = new Guessgame();
		game.startGame();
	}
}


}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
package p78;

class TapeDeck {
	boolean canRecord = false; //참 거짓 구분기 만들기//
	
	void playTape(){
		System.out.println("tape playing");
	}
	
	void recordTape(){
		System.out.println("tape recording");
	}

}
package p78;

public class TapeDackTestDrive {
	public static void main(String arg[]){
		TapeDeck t = new TapeDeck(); //이 부분을 추가해줍니다.//
		t.canRecord = true;
		t.playTape();
		
		if (t.canRecord == true) {
			t.recordTape();
		}
		
	}

}
package p78;

class DVDPlayer {

	public boolean canRecord = false; //앞에 public 붙이고요//

	
	
	void recordDVD() {
		System.out.println("DVD  recording");
	}
	void playDVD() {
		System.out.println("DVD playing");
	} //이부분 추가해줍니다//
}
package p78;

public class DVDPlayerTestDrive {

	public static void main(String[] args) {
		DVDPlayer d = new DVDPlayer();
		d.canRecord = true;
		d.playDVD();
		
		if(d.canRecord == true){
			d.recordDVD();
		}

	}

}


}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수:
원시변수 : 정수 , 부울 , 부동소수점 수와 같은 기초적인 값
레퍼런스변수 : 객체에 대한 레퍼런스가 있는 것.

 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{
public class Dog {
    String name;
    public static void main(String[] args) {
        Dog dog1 = new Dog(); //객체 생성//
        dog1.bark();
        dog1.name = "Bart";
        
        Dog[] myDogs = new Dog[3];//배열을 만듭니다//
        myDogs[0] = new Dog(); 
        myDogs[1] = new Dog();
        myDogs[2] = dog1; //각 배열에 개 이름을 넣고요//
        
        myDogs[0].name = "Fred";  //개이름이죠//
        myDogs[1].name = "Marge";
        
        System.out.print("last don't name is ");
        System.out.println(myDogs[2].name);
        
        int x = 0;
        while (x < myDogs.length) { //책을 보니까 배열에 length 변수는 자동으로 있다네요//
            myDogs[x].bark();
            x = x+1;
        }
    }
    public void bark() {
        System.out.println(name + " says Ruff!"); //짖죠//
    }
    
    public void eat() { }
    
    public void chaseCat() { }
}


}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
package p97;

public class Books{
	
public String title;
public String author;

}
package p97;



public class BooksTestDrive {
	
	
	public static void main(String[] args) {
		
		Books [] myBooks = new Books[3];
		
		myBooks[0] = new Books();
		myBooks[1] = new Books();
		myBooks[2] = new Books(); //객체를 넣어줍니다!//
		
		int x = 0;
		myBooks[0].title = "The Grapes of Java";
		myBooks[1].title = "The Java Gatsby";
		myBooks[2].title = "The Java Cookbook";
		myBooks[0].author = "bob";
		myBooks[1].author = "sue";
		myBooks[2].author = "ian";
		
		while(x<3){
			System.out.println(myBooks[x].title);
			System.out.print("by");
			System.out.println(myBooks[x].author);
			x = x+1;
								
		}
		
	}

}
package p97;

public class Hobbits {
	
	public String name;
	
	public static void main(String [] args) {
		
		Hobbits [] h = new Hobbits [3];
		int z = -1; //0부터 시작해야되니까 바꿔줍니다!//
		
		while (z<2) { //3까지 되면 배열을 초과하니까 2로 줄여주구요//
			z = z + 1;
			h[z] = new Hobbits();
			h[z].name = "bilbo";
			if (z == 1) {
				h[z].name = "fredo";
				
			}
			if (z ==2 ) {
				h[z].name = "sam";
				
			}
			System.out.println(h[z].name + " is a");
			System.out.println("good Hobbit name");
			
		}
	}
	

}


}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?: 밥
 * 문제가 된 부분은 어딘가요?:켄트가 짠 코드에서 보면 , refc라는 통에 여러개의 객체를 넣으면 마지막에 넣은 객체만 출력된다.

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:인스턴스 변수가 부적절한 값으로 설정되지 않게 함.
 * 게터와 세터: 매개변수에서 게터는 받는 것이고, 세터는 설정하는 것이다.
 * 인스턴스 변수 vs 지역 변수: 인스턴스 변수는 초기값이 있지만, 지역변수는 없다.
 
*107p Dog* _실행_

{{{
package Dog;

public class Dog {
int size;
String name;

void bark(){
	if (size > 60){
		System.out.println("wooof! wooof!");
	} else if (size >14) {
		System.out.println("Ruff! Ruff!");
	}
	else {
		System.out.println("Yip! Yip!");
		
	}
}
}

package Dog;

public class DogTestDrive {

	public static void main ( String[] args){
		Dog one = new Dog ();
		one.size = 70;
		Dog two = new Dog ();
		two.size = 8;
		Dog three = new Dog();
		three.size = 35;
		
		one.bark();
		two.bark();
		three.bark();
		
	}
}


}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{
public class SimpleDotCom {
    int[] locationCells;
    int numOfHits = 0;
    
    public void setLocationCells(int[] locs)
    {
        locationCells = locs;
    }
    
    public String checkYourself(String stringGuess) {
        int guess = Integer.parseInt(stringGuess);
        String result = "miss";
        for (int i = 0 ; i < locationCells.length ; i++)
        {
        
            if (guess ==locationCells[i]) {
                result = "hit";
                numOfHits++;
                break;
            }
        }
        if (numOfHits == locationCells.length)
        {
            result = "kill";
        }
        System.out.println(result);
        return result;
    }
}

import java.io.*;

public class GameHelper {

  public String getUserInput(String prompt) {
     String inputLine = null;
     System.out.print(prompt + "  ");
     try {
       BufferedReader is = new BufferedReader(
	 new InputStreamReader(System.in));
       inputLine = is.readLine();
       if (inputLine.length() == 0 )  return null; 
     } catch (IOException e) {
       System.out.println("IOException: " + e);
     }
     return inputLine;
  }
}

  
  public class Game {
    public static void main(String[] args)
    {
        int numOfGuesses = 0;
        GameHelper helper = new GameHelper();
        
        SimpleDotCom theDotCom = new SimpleDotCom();
        int randomNum = (int) (Math.random() * 5);
        
        int[] locations = {randomNum, randomNum+1, randomNum+2};
        theDotCom.setLocationCells(locations);
        boolean isAlive = true;
        while (isAlive == true)
        {
            String guess = helper.getUserInput("enter a number");
            String result = theDotCom.checkYourself(guess);
            numOfGuesses++;
            if (result.equals("kill")) {
                isAlive = false;
                System.out.println("You took " + numOfGuesses + " guesses");
            }
        }
    }
}

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:
 * 다형성:

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}