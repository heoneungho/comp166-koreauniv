#summary 임지빈

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{
//일단 비어송이라는 클래스를 퍼블릭 형식으로 만듭니다.//
public class BeerSong {
    public static void main(String[] args) {
        int beerNum = 99;
        String word = "bottles";
        while (beerNum > 0)
        {
            if (beerNum == 1)
            {
                word = "bottle";
            } 
            System.out.println(beerNum + " " + word + " of beer on the wall");
            System.out.println(beerNum + " " + word + " of beer");
            System.out.println("Take one down.");
            System.out.println("Pass it around.");
            
            beerNum = beerNum - 1;
            //비어넘에는 현재 남아있는 병 숫자, word에는 비어넘이 2~99일때는 bottles 1되면 bottle, 그리고 of beer on the wall 이라는 숫자가 붙어서 출력되겠네요//
            if (beerNum == 0) //beer 송 노래가 뭔지는 잘 모르겠는데요, 보통 한국노래가 4줄씩이니까 이렇게 해야되지 않을까요? 한국식으로 바꿔보았습니다 ㅎ//
            {
               System.out.println("No more bottle of beer on the wall");
            }
        }
    }
}
}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{
public class PhraseOMatic {
    public static void main(String[] args) {
        String[] wordListOne = {"love", "bless", "good-feeling"};
        String[] wordListTwo = {"of", "in", "by", "from"};
        String[] wordListThree = {"you", "us", "me", "her", "him", "professor"};
        int oneLength = wordListOne.length;
        int twoLength = wordListTwo.length;
        int threeLength = wordListThree.length;
        int rand1 = (int) (Math.random() * oneLength);
        int rand2 = (int) (Math.random() * twoLength);
        int rand3 = (int) (Math.random() * threeLength);
        
        String phrase = wordListOne[rand1] + " " + wordListTwo[rand2] + " " + wordListThree[rand3];
        System.out.println("What we need is a " + phrase);
    }
}
}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 프로그램을 실행시키고 유형의 변경이 일어날때도 문제가 일어났다는 classcast exception을 발생시킨다. 바이트 코트가 만들어진 다음 바이트코드가 실행되기 전까지 다른 누군가가 그걸 건드리지 않았는지 확인하는 역활도 한다.
 * 컴파일러: 일일이 바이트코드(기계어)를 짜지 않아도 되게 해주는 것이다. 인간이 보기에 편한 언어를 기계어로 바꿔주는 역활을 하며, 문법적 오류, 유형 위반사항 , 보안상의 메소드 변경 등을 미리 찾아낸다.

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

public class Exercise1a {

	public static void main(String[] args) {
		int x = 1;
		while ( x<10)
		{
			x = x + 1 ; //숫자 변화를 줬습니다! //
			if (x >3)
			{
			System.out.println("big x");	
			}
		}

	}

}

//클래스를 추가해주었지요!//
public class Tobecompilerer {

	public static void main(String[] args) {
		int x = 5;
		while (x > 1) {
			x = x - 1;
			if( x<3) {
				System.out.println("small x");
			}
		}
	}

}


public class Exercise1c {

	public static void main(String[] args) {
		int x = 5; //메소드를 만들어 주었습니다! //
		while ( x> 1)
		{
			x = x - 1;
			if (x <3) 
			{
				System.out.println("small x");
			}
		}

	}

}



}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체의 상태(데이터)를 나타낸다.
 * 메소드:객체에서 할 수 있는 일
 * 클래스: 가상머신에 그 유형의 객체를 만드는 방법을 알려주는 역활
 * 테스트용 클래스: 클래스를 테스트 하기 위한 코드
 

*68p Television* _채워넣기_

 * 인스턴스 변수: broadcast
 * 메소드:output(), input()


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{
package Guessgame;
public class Guessgame {
	

   Player p1;
   Player p2;
   Player p3;
   Player p4;
	
   
   public void startGame() {
       p1 = new Player();
       p2 = new Player();
       p3 = new Player();
       p4 = new Player();
       int guessp1 = 0;
       int guessp2 = 0;
       int guessp3 = 0;
       int guessp4 = 0;
       boolean p1isRight = false;
       boolean p2isRight = false;
       boolean p3isRight = false;
       boolean p4isRight = false;
       int targetNumber = (int) (Math.random() * 10);
       System.out.println("I'm thinking of a number between 0 and 9...");
       while(true) {
           System.out.println("Number to guess is " + targetNumber);
           
           p1.guess();
           p2.guess();
           p3.guess();
           p4.guess();
           
           guessp1 = p1.number;
           System.out.println("Player one guessed " + guessp1);
           guessp2 = p2.number;
           System.out.println("Player two guessed " + guessp2);
           guessp3 = p3.number;
           System.out.println("Player three guessed " + guessp3);
           guessp4 = p4.number;
           System.out.println("Player four guessed " + guessp4);
           
           if (guessp1 == targetNumber) {
               p1isRight = true;
           }
           if (guessp2 == targetNumber) {
               p2isRight = true;
           }
           if (guessp3 == targetNumber) {
               p3isRight = true;
           }
           if (guessp4 == targetNumber) {
        	   p4isRight = true;
           }
           if (p1isRight || p2isRight || p3isRight || p4isRight)
           {
               System.out.println("We have a winner!");
               System.out.println("Player one got it right? " + p1isRight);
               System.out.println("Player two got it right? " + p2isRight);
               System.out.println("Player three got it right? " + p3isRight);
               System.out.println("Player four got it right? " + p4isRight);
               System.out.println("Game is over");
               break;
           }
           else
           {
               System.out.println("Players will have to try again.");
           }
       }
   }
}

package Guessgame;
public class Player{
	int number = 0;
	public void guess()
	{
		number = (int) (Math.random() * 10);
		System.out.println("찍은 숫자: " + number);
	}
}

package Guessgame;

public class GameLauncher {
	public static void main (String[] args)
	{
		Guessgame game = new Guessgame();
		game.startGame();
	}
}


}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
package p78;

class TapeDeck {
	boolean canRecord = false; //참 거짓 구분기 만들기//
	
	void playTape(){
		System.out.println("tape playing");
	}
	
	void recordTape(){
		System.out.println("tape recording");
	}

}
package p78;

public class TapeDackTestDrive {
	public static void main(String arg[]){
		TapeDeck t = new TapeDeck(); //이 부분을 추가해줍니다.//
		t.canRecord = true;
		t.playTape();
		
		if (t.canRecord == true) {
			t.recordTape();
		}
		
	}

}
package p78;

class DVDPlayer {

	public boolean canRecord = false; //앞에 public 붙이고요//

	
	
	void recordDVD() {
		System.out.println("DVD  recording");
	}
	void playDVD() {
		System.out.println("DVD playing");
	} //이부분 추가해줍니다//
}
package p78;

public class DVDPlayerTestDrive {

	public static void main(String[] args) {
		DVDPlayer d = new DVDPlayer();
		d.canRecord = true;
		d.playDVD();
		
		if(d.canRecord == true){
			d.recordDVD();
		}

	}

}


}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수:
원시변수 : 정수 , 부울 , 부동소수점 수와 같은 기초적인 값
레퍼런스변수 : 객체에 대한 레퍼런스가 있는 것.

 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{
public class Dog {
    String name;
    public static void main(String[] args) {
        Dog dog1 = new Dog(); //객체 생성//
        dog1.bark();
        dog1.name = "Bart";
        
        Dog[] myDogs = new Dog[3];//배열을 만듭니다//
        myDogs[0] = new Dog(); 
        myDogs[1] = new Dog();
        myDogs[2] = dog1; //각 배열에 개 이름을 넣고요//
        
        myDogs[0].name = "Fred";  //개이름이죠//
        myDogs[1].name = "Marge";
        
        System.out.print("last don't name is ");
        System.out.println(myDogs[2].name);
        
        int x = 0;
        while (x < myDogs.length) { //책을 보니까 배열에 length 변수는 자동으로 있다네요//
            myDogs[x].bark();
            x = x+1;
        }
    }
    public void bark() {
        System.out.println(name + " says Ruff!"); //짖죠//
    }
    
    public void eat() { }
    
    public void chaseCat() { }
}


}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
package p97;

public class Books{
	
public String title;
public String author;

}
package p97;



public class BooksTestDrive {
	
	
	public static void main(String[] args) {
		
		Books [] myBooks = new Books[3];
		
		myBooks[0] = new Books();
		myBooks[1] = new Books();
		myBooks[2] = new Books(); //객체를 넣어줍니다!//
		
		int x = 0;
		myBooks[0].title = "The Grapes of Java";
		myBooks[1].title = "The Java Gatsby";
		myBooks[2].title = "The Java Cookbook";
		myBooks[0].author = "bob";
		myBooks[1].author = "sue";
		myBooks[2].author = "ian";
		
		while(x<3){
			System.out.println(myBooks[x].title);
			System.out.print("by");
			System.out.println(myBooks[x].author);
			x = x+1;
								
		}
		
	}

}
package p97;

public class Hobbits {
	
	public String name;
	
	public static void main(String [] args) {
		
		Hobbits [] h = new Hobbits [3];
		int z = -1; //0부터 시작해야되니까 바꿔줍니다!//
		
		while (z<2) { //3까지 되면 배열을 초과하니까 2로 줄여주구요//
			z = z + 1;
			h[z] = new Hobbits();
			h[z].name = "bilbo";
			if (z == 1) {
				h[z].name = "fredo";
				
			}
			if (z ==2 ) {
				h[z].name = "sam";
				
			}
			System.out.println(h[z].name + " is a");
			System.out.println("good Hobbit name");
			
		}
	}
	

}


}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?: 밥
 * 문제가 된 부분은 어딘가요?:켄트가 짠 코드에서 보면 , refc라는 통에 여러개의 객체를 넣으면 마지막에 넣은 객체만 출력된다.

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:인스턴스 변수가 부적절한 값으로 설정되지 않게 함.
 * 게터와 세터: 매개변수에서 게터는 받는 것이고, 세터는 설정하는 것이다.
 * 인스턴스 변수 vs 지역 변수: 인스턴스 변수는 초기값이 있지만, 지역변수는 없다.
 
*107p Dog* _실행_

{{{
package Dog;

public class Dog {
int size;
String name;

void bark(){
	if (size > 60){
		System.out.println("wooof! wooof!");
	} else if (size >14) {
		System.out.println("Ruff! Ruff!");
	}
	else {
		System.out.println("Yip! Yip!");
		
	}
}
}

package Dog;

public class DogTestDrive {

	public static void main ( String[] args){
		Dog one = new Dog ();
		one.size = 70;
		Dog two = new Dog ();
		two.size = 8;
		Dog three = new Dog();
		three.size = 35;
		
		one.bark();
		two.bark();
		three.bark();
		
	}
}


}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
package com122page;

public class XCopy {
	public static void main(String [] args) {
		int orig = 42 ;
		XCopy x = new XCopy (); 
		int y = x.go(orig);
		System.out.println(orig + " " + y);
	}
	int go(int arg) { // 안에 있는 값을 두배로 만드는 함수이다.//
		arg = arg * 2;
		return arg;
		
	}

}

package com122page;

public class Clock {
	String time;
	
	void setTime(String t) {
		time = t;
		
	}

	String getTime() { //sting 형식으로 반납해야 되기 때문이다.
		return time;
	
	}
}
package com122page;

public class ClockTestDrive {
	
	public static void main(String [] args){
		
		Clock c = new Clock() ;
		
		c.setTime("1245"); //1245를 time 에 저장하고
		String tod = c.getTime(); //time 에 저장된 1245가 tod에 저장되고
		System.out.println("time: " + tod); //tod 값이 출력된다.
		
	}

}

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?

조금씩, 자주 발표하면서 여러사람이 번갈아 가면서 작업하면서 누구든지 대부분의 코드를 알 수 있게 하고, 테스트 코드를 만들며 스펙에 없는 것은 집어 넣지 않는 소프트웨어 개발 방법중 하나이다.
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{
package javabook;

public class Game {
    public static void main(String[] args)
    {
        int numOfGuesses = 0;
        GameHelper helper = new GameHelper();
        
        SimpleDotCom theDotCom = new SimpleDotCom(); //닷컴 객체를 생성합니다.
        int randomNum = (int) (Math.random() * 5); //랜덤하게 0과5 사이의 수를 뽑아 랜드넘에 저장합니다.//
        
        int[] locations = {randomNum, randomNum+1, randomNum+2}; //위에서 저장된 값보다 1,2 씩 큰 값들을 셀로 만듭니다.//
        theDotCom.setLocationCells(locations); //닷컴의 위치를 저장합니다.
        boolean isAlive = true;
        while (isAlive == true)
        {
            String guess = helper.getUserInput("enter a number");//enter a nunmer라는 메세지를 띄우고 값을 받습니다.
            String result = theDotCom.checkYourself(guess); //guess 값을 확인하고 그 결과를 result 에 저장합니다.
            numOfGuesses++; //추측횟수를 증가시킵니다.
            if (result.equals("kill")) { // 만약 result가 kill이라면 isAlive 내용을 아래와 같이 바꾸고 전체 결과를 출력합니다
                isAlive = false;
                System.out.println("You took " + numOfGuesses + " guesses");
            }
        }
    }
}
package javabook;


import java.io.*;

public class GameHelper {


  public String getUserInput(String prompt) {
     String inputLine = null;
     System.out.print(prompt + "  ");
     try {
       BufferedReader is = new BufferedReader(
	 new InputStreamReader(System.in));
       inputLine = is.readLine();
       if (inputLine.length() == 0 )  return null; 
     } catch (IOException e) {
       System.out.println("IOException: " + e);
     }
     return inputLine;
  }
}//게임 작동원리는 나중에 배우라고 하네요 ㅜㅜ

  package javabook;

public class SimpleDotCom {
    int[] locationCells;
    int numOfHits = 0;
    
    public void setLocationCells(int[] locs)
    {
        locationCells = locs; //locationCess 에 locs값을 넣습니다.
    }
    
    public String checkYourself(String stringGuess) {
        int guess = Integer.parseInt(stringGuess); //string 을 int 형으로 변환한다.
        String result = "miss";
        for (int cells : locationCells) //int 배열에 있는 각 셀에 대해 다음 작업을 반복합니다.
        {
        
            if (guess == cells) { //사용자가 추측한 값을 배열에 들어있는 원소와 비교합니다.
                result = "hit";
                numOfHits++;
                break;
            }
        }
        if (numOfHits == locationCells.length)
        {
            result = "kill"; //모두 다 쳤을 경우.
        }
        System.out.println(result);
        return result;
    }
}


}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

다 바꿀 필요는 없고, 이 클래스만 바꿔줍니다.
public class SimpleDotCom {
	int[] locationCells;
	int numOfHits = 0;
	boolean[] hitCells = { false, false, false }; // hitCells 를 만들어 줍니다.

	public void setLocationCells(int[] locs) {
		locationCells = locs; // locationCess 에 locs 값을 넣습니다.
	}

	public String checkYourself(String stringGuess) {
		int guess = Integer.parseInt(stringGuess); // string 을 int 형으로 변환한다.
		String result = "miss";
		for (int i = 0; i < locationCells.length; i++) {
			if (guess == locationCells[i] && hitCells[i] == false) {
				// guess와 locationCells가 같고 맞춘 셀이 아닐때에만
				result = "hit";
				hitCells[i] = true; // hitCells에 true값을 넣어줍니다.
				numOfHits++;
				break;
			}
		}

		if (numOfHits == locationCells.length) {
			result = "kill";
		}
		System.out.println(result);
		return result;
	}
}
}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

package 옵션구현2;

public class SimpleDotCom {
    int[] locationCells;
    int numOfHits = 0;
    
    public void setLocationCells(int[] locs)
    {
        locationCells = locs; //locationCess 에 locs값을 넣습니다.
    }
    
    public String checkYourself(String stringGuess) {
        int guess = Integer.parseInt(stringGuess); //string 을 int 형으로 변환한다.
        String result = "miss";
        for(int i = 0 ;i < locationCells.length; i++)
        {
                if(guess == -1)//만약에 사용자가 입력한 숫자에 해당하는 배열 값이 -1이면  넘버 힛을 안 늘리게 합니다..
                        break;
                else if(guess == locationCells[i])
                {
                        result = "hit";
                        locationCells[i] = -1;//맞췄을 경우 해당 배열의 값을 -1로 바꿔줍니다.
                        numOfHits++;
                        break;
                }
        }

        if (numOfHits == locationCells.length)
        {
            result = "kill"; //모두 다 쳤을 경우.
        }
        System.out.println(result);
        return result;
    }
}

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

import java.util.ArrayList;

public class SimpleDotCom {

	private ArrayList<String> locationCells; // int[] locationCells; 대신입니다.

	// int numOfHits = 0; 필요 없어지죠

	public void setLocationCells(ArrayList<String> loc) {
		locationCells = loc; // locationCess 에 loc값을 넣습니다.
	}

	public String checkYourself(String userInput) { // 새로바뀐 인자명 입니다.
		String result = "miss";
		int index = locationCells.indexOf(userInput); // 사용자가 추측한 위치가 ArrayList에
														// 들어있는지 확인합니다. 들어있으면
														// 인덱스 번호가, 그렇지 않으면 -1 이
														// 리턴됩니다.
		if (index >= 0) {
			locationCells.remove(index);
			if (locationCells.isEmpty()) {
				result = "kill"; // 모두 다 쳤을 경우.
			} else {
				result = "hit";
			}
		}

		return result;
	}
}

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

package 최종;

import java.util.*;

public class DotCom {
	private ArrayList<String> locationCells;// DotCom의 인스턴스 변수 -셀위치
	private String name;// DotCom의 인스턴스 변수 -DotCom의 이름

	public void setLocationCells(ArrayList<String> loc) {
		locationCells = loc;// DotCom의 위치를 갱신합니다.
	}

	public void setName(String n) {
		name = n;// 이름을 설정합니다
	}

	public String checkYourself(String userInput) {
		String status = "miss";// 처음에 miss로 초기화합니다.
		int index = locationCells.indexOf(userInput);
		// ArrayList의 indexOf()메소드를 사용하여 사용자가 추측한 위치가 ArrayList에 들어있으면 인덱스를 그렇지
		// 않으면 -1을 리턴합니다.
		if (index >= 0) {
			locationCells.remove(index);
			// ArrayList의 remove 메소드를 써서 그 항목을 지웁니다.
			if (locationCells.isEmpty())// isEmpty를 써서 모든 위치를 맞췄는지 확인합니다.
			{
				status = "kill";
				System.out.println("Ouch! You sunk " + name + "    : ( ");
				// DotCom이 가라앉았다고 알려줍니다.
			} else {
				status = "hit";// 아니면 hit
			}
		}// if문 끝

		return status;
	}
	// miss or hit or kill을 리턴합니다.
}

package 최종;

import java.util.*;

public class DotComBust {
	private GameHelper helper = new GameHelper();// GameHelper객체를 생성합니다.
	private ArrayList<DotCom> dotComsList = new ArrayList<DotCom>();// DotCom객체로
																	// 이루어진
																	// ArrayList를
																	// 만듭니다.
	private int numOfGuesses = 0;// 추측한 숫자를 나타내는 변수를 선언하고 0으로 초기화합니다.

	private void setUpGame()// 닷컴 객체 몇 개를 만들고 위치를 지정합니다.
	{
		DotCom one = new DotCom();
		one.setName("Pets.com");
		DotCom two = new DotCom();
		two.setName("eToys.com");
		DotCom three = new DotCom();
		three.setName("Go2.com");
		dotComsList.add(one);
		dotComsList.add(two);
		dotComsList.add(three);
		// DotCom 객체 세 개를 만들고 각각 이름을 부여하고 ArrayList에 저장합니다.

		System.out.println("Your goal is to sink three dot coms.");
		System.out.println("Pets.com, eToys.com, Go2.com");
		System.out
				.println("Try to sink them all in the fewest number of guesses");
		// 사용자에게 간단한 게임 방법을 설명합니다.

		for (DotCom dotComToSet : dotComsList)// 목록에 있는 각 DotCom에 대해 반복합니다.
		{
			ArrayList<String> newLocation = helper.placeDotCom(3);
			// DotCom의 위치를 지정하기 위한 보조 메소드를 호출합니다.
			dotComToSet.setLocationCells(newLocation);
			// 이 DOtCom 객체의 세터 메소드를 호출하여 방금 보조 메소드에서 받아온 위치를 지정합니다.

		}// for 순환문 끝
	}// setUpgame 메소드 끝

	private void startPlaying() {
		while (!dotComsList.isEmpty())// dotComsList가 비어있지 않으면 계속 반복합니다.
		{
			String userGuess = helper.getUserInput("Enter a guess");
			// 사용자의 입력을 받습니다.
			checkUserGuess(userGuess);
			// checkUserGuess 메소드를 호출합니다.

		}// while문 끝
		finishGame();
	}// startPlaying 메소드 끝

	private void checkUserGuess(String userGuess) {
		numOfGuesses++;// 메소드가 호출되면 사용자 추측 횟수를 증가시킵니다.
		String result = "miss";// miss라고 가정합니다.

		for (DotCom dotComToTest : dotComsList)// 목록의 모든 DotCom 객체에 대해 반복합니다.
		{
			result = dotComToTest.checkYourself(userGuess);
			// DotCom 객체에 사용자가 입력한 위치가 맞는지 또는 객체가 죽었는지 물어봅니다.
			if (result.equals("hit"))// 결과가 hit 이라면
			{
				break;// 순환문을 빠져나옵니다.
			}
			if (result.equals("kill"))// 결과가 kill이라면
			{
				dotComsList.remove(dotComToTest);// DotCom 목록에서 빼고
				break;// 순환문을 빠져나옵니다.
			}
		}// for 문 끝
		System.out.println(result);
	}// checkUserGuess 메소드 끝

	private void finishGame()// 게임 결과를 알려주는 메시지를 출력합니다.
	{
		System.out
				.println("All Dot Coms are dead! Your stock is now worthless");
		if (numOfGuesses <= 18) {
			System.out
					.println("It only took you " + numOfGuesses + " guesses.");
			System.out.println("You got out before your options sank");
		} else {
			System.out.println("Took you long enough. " + numOfGuesses
					+ " guesses.");
			System.out.println("Fish are dancing with your options");
		}
	}

	public static void main(String[] args) {
		DotComBust game = new DotComBust();// DotComBust 객체를 만듭니다.
		game.setUpGame();// 게임 객체에 게임을 설정하라는 명령을 내립니다.
		game.startPlaying();
		// 게임 객체에서 주 게임 진행 순환문을 돌리라는 명령을 내립니다
	}

}

package 최종;

import java.io.*;
import java.util.*;

public class GameHelper
{
        private static final String alphabet = "abcdefg";
        private int gridLength = 7;
        private int gridSize = 49;
        private int[] grid = new int[gridSize];
        private int comCount = 0;
        
        public String getUserInput(String prompt)
        {
                String inputLine = null;
                System.out.println(prompt +" ");
                try
                {
                        BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
                        inputLine = is.readLine();
                        if(inputLine.length() == 0)
                                return null;    
                }
                catch(IOException e)
                {
                        System.out.println("IOException: " + e);
                }
        
                return inputLine.toLowerCase();
                
        }
        
        public ArrayList<String> placeDotCom(int comSize)
        {
                ArrayList<String> alphaCells = new ArrayList<String>();//F6과 같은 좌표가 들어감
                String temp = null;//나중에 연결하기 위한 임시 String배열
                int[] coords = new int[comSize];//현재 후보 좌표
                int attempts = 0;//시도 횟수를 세기 위한 카운터
                boolean success = false;//적당한 위치를 찾았느지 표시하기 위한 플래그
                int location = 0;//현재 시작 위치
                
                comCount++;//n번째 닷컴
                int incr = 1;//수평 방향으로 증가시킬 값 설정
                if((comCount % 2)==1)//홀수 번째 닷컴인 경우
                {
                        incr = gridLength;//수직 방향으로 증가시킬 값 결정
                }
                
                while(!success & attempts++ < 200)//주 검색 순환문(32)
                {
                        location = (int) (Math.random() * gridSize);//임의 시작 위치를 구함
                        //System.out.print(" try " + location);
                        
                        int x = 0;//위치시킬 닷컴의 n번째 위치
                        success = true;//성공할 것으로 가정함
                        while(success && x < comSize)//닷컴이 들어갈 자리가 비었는지 확인
                        {
                                if(grid[location] == 0)//아직 사용하지 않았으면
                                {
                                        coords[x++] = location;//위치 저장
                                        location += incr;//다음 칸 확인
                                        if(location >= gridSize)//경계를 벗어난 경우
                                                success = false;//실패
                                        if(x > 0 & (location % gridLength == 0))//경계를 벗어난 경우(오른쪽)
                                                success = false;//실패
                                        else//이미 사용중인 경우
                                                //System.out.print(" used " + location)
                                                success = false;//실패
                                }
                        }
                        
                }//while 끝

        int x = 0;//위치를 알파벳 좌표로 바꿈
        int row = 0;
        int column = 0;
        
        while(x < comSize)
        {
                grid[coords[x]] = 1;//기본 그리드 좌표를 사용중 으로 표시
                row = (int) (coords[x] / gridLength);//행 값을 구함
                column = coords[x]&gridLength;//열 값을 구함
                temp = String.valueOf(alphabet.charAt(column));//숫자가 된 열을 알파벳으로 변환
                
                alphaCells.add(temp.concat(Integer.toString(row)));
                x++;
                //System.out.println("   coord  " + x + " = "  + alphaCells.get(x-1));
                //DotCom의 위치를 알려주는 메소드
                                
        }
        
        return alphaCells;
        }
        
}

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:하위클래스가 상위클래스의 멤버를 물려받는다는 것을 의미한다. 
 * 다형성:레퍼런스 유형을 실제 객체 유형의 상위클래스 유형으로 지정할 수 있다. 다형성을 활용하면 새로운 하위클래스 형식을 프로그램에 추가하더라도 코드를 굳이 바꿀 필요가 없다. 

*208p 클래스 계층 구조* _클래스로 구현_

{{{

class Animal 
{ 
        String picture; 
        Boolean food; 
        int hunger; 
        float boundaries; 
        float location; 
 
        void makeNoise() 
        { 
                //소리를 낼 때의 행동 
        } 
 
        void eat() 
        { 
                //그 동물이 음식을 접했을 때의 행동 
        } 
 
        void sleep() 
        { 
                //그 동물이 잠들어 있을 때의 행동 
        } 
 
        void roam() 
        { 
                //그 동물이 먹거나 자고 있지 않을 때의 행동 
        } 
 
} 
class Feline extends Animal//Feline은 Animal을 상속받는다. 
{ 
        void roam() 
        { 
                //roam을 오버라이드한다. 
        } 
} 
 
class Canine extends Animal//Canine은 Animal을 상속받는다. 
{ 
        void roam() 
        { 
                //roam을 오버라이드한다. 
        } 
} 
 
class Lion extends Feline//Lion은 Feline을 확장한다. 
{ 
        void makeNoise() 
        { 
                //makeNoise를 오버라이드한다. 
        } 
 
        void eat() 
        { 
                //eat를 오버라이드한다. 
        } 
} 
 
class Tiger extends Feline//Tiger은 Feline을 확장한다. 
{ 
        void makeNoise() 
        { 
                //makeNoise를 오버라이드한다. 
        } 
 
        void eat() 
        { 
                //eat를 오버라이드한다. 
        } 
} 
 
 
 
class Cat extends Feline//Cat은 Feline을 확장한다. 
{ 
        void makeNoise() 
        { 
                //makeNoise를 오버라이드한다. 
        } 
 
        void eat() 
        { 
                //eat를 오버라이드한다. 
        } 
} 
 
class Hiippo extends Animal//Hippo는 Animal을 확장한다. 
{ 
        void makeNoise() 
        { 
                //makeNoise를 오버라이드한다. 
        } 
 
        void eat() 
        { 
                //eat를 오버라이드한다. 
        } 
} 
 
class Wolf extends Canine//Wolf는 Canine를 확장한다. 
{ 
        void makeNoise() 
        { 
                //makeNoise를 오버라이드한다. 
        } 
 
        void eat() 
        { 
                //eat를 오버라이드한다. 
        } 
} 
 
class Dog extends Canine//Dog는 Canine를 확장한다. 
{ 
        void makeNoise() 
        { 
                //makeNoise를 오버라이드한다. 
        } 
 
        void eat() 
        { 
                //eat를 오버라이드한다. 
        } 
}

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드: 이름도 같고 인자도 같지만 실행은 다를수 있는 메소드를 만드는 것이다.
 * 오버로딩: 이름은 같지만 인자가 다른 메소드를 만드는 것이다.

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{


}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}