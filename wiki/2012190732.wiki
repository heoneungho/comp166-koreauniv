#summary 수업중 실습하는 내용을 올리게 되는 실습페이지입니다. 페이지의 내용은 각 학생에 의해서 관리됩니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{

public class BeerSong{  //BeerSong class 지정
     
        public static void main(String[] args) {  //main함수 선언
                
               
                int beerNum = 99;   //맥주병 변수 beerNum선언
                String word = "bottles";  //문자열 word 선언
        
                
                while(beerNum >0){ //맥주병이 있을 때 while
                        
                      
                        
                        if(beerNum > 0){
                             //맥주병이 있다면?
                                
                                System.out.println(beerNum + " " + word + " " + "of beer on the wall");
                                System.out.println(beerNum + " " + word + " " + "of beer.");
                                System.out.println("Take one down");
                                System.out.println("Pass it around");
                                
                                beerNum = beerNum -1 ;
                                       //병의 수를 하나씩 줄여감.                      
                                 
                        }
                       if(beerNum == 1){
                            word = "bottle"; 
            //맥주병이 하나일 경우 bottles가 아니라 bottle이므로 미리 수정. 
                    }
                           else{
                               
                                System.out.println("No more bottles of beer on the wall");
                         //맥주병을 모두 먹으면 출력
                          }
                }
        }
}
 
 
//Problem is that "if문 사용시 beerNum==1일때 오류발생."		
}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{

public class PhraseOMatic { // PhaseOmatic class 지정
        public static void main(String[] args){ //main함수 선언
                
                String[] wordListOne = {"iphone", "ipad", "ipot", "galaxy tab", "galaxy note"};
                String[] wordListTwo = {"C study","unix study","java study","datastructure study","C++ study"};
                String[] wordListThree = {"math","computer","korean","english","geography"};

                      //3개의 String배열 생성 - electronics, computer subject, normal subject
                
                int oneLength = wordListOne.length;
                int twoLength = wordListTwo.length;
                int threeLength = wordListThree.length;
                
                      //인스턴스변수 numLength = 배열의 길이

                int rand1 = (int)(Math.random() * oneLength);
                int rand2 = (int)(Math.random() * twoLength);
                int rand3 = (int)(Math.random() * threeLength);

                     // math 메소드 random 사용 
                    // but random() 메소드는 0또는 1반영하므로 *정수의 길이를 해줌. 
                
                String phrase = wordListOne[rand1] + "," + wordListTwo[rand2] + "," + wordListThree[rand3];
                
                System.out.println("What we need is a " + phrase);
                
        }

}
}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 프로그램을 실행시키는 것, 보안관련작업  
 * 컴파일러: 바이트코드로 전환,  동적바인딩지원, 실행될때절대로일어나면안되는일방지, 소위최전방수비수

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A : 
 
public class Exercise1b { //Exercise1b class 지정

        public static void main(String[] args){ //main함수 선언
                
                int x = 1; // 인스턴스 변수 x 선언
                
                while(x<10){ //while문
                                                     
                        if(x>3){
                                System.out.println("big x");
                                			                        }
                        	x++; //x=x+1을 해줌으로써 while문 멈춤 
                }
        }
}
//A는 원래 무한루프로 계속 big x가 출력되는 형태였으나, x++;를 출력함으로써
//x<10이 성립을 안하는 조건을 만들어서 이 경우 big x가 6번 출력되는 경우가 되었//다.

B : 
public class Exercise1b { //클래스를 지정해 주어야함.
																

        public static void main(String[] args){ //메인함수 선언
                
        			int x = 5; //인스턴스 변수 x 선언
                
                while(x>1){ //while문
                	
                        	x = x - 1;
        
                        	if(x<3){
                                System.out.println("small x");
                          	}
                }
        }
}
//B는 class 선언 없이  main함수가  존재할수 없으므로  아예 불가능한 코드였다.
//class를 지정해주고,  나머지대로 출력하면  small x가  2번출력된다.

C :

public class Exercise1b { //Exercise1b 클래스 지정

    public static void main(String[] args){ //메인함수 선언
                
                int x = 5; //인스턴스 변수 
                
                while(x>1){ //while
                        x = x - 1;
                        
                        if(x<3){
                                System.out.println("small x");
                        }
                }
        }
}

//C는 메인함수가 없어서  실행이  불가능한 형태였다.
//메인함수부터 프로그램이 실행되므로,  프로그램에서는 항상 메인함수가 있어야 한다.
}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체에서 자신에 대해 아는 것 , 객체의 상태.
 * 메소드: 객체에서 자신이 하는 것 , 객체에서 할 수 있는 행동이나 일.
 * 클래스: 객체를 만들기 위한 청사진.
 * 테스트용 클래스: 새로운 클래스 유형의 객체에 들어있는 메소드와 변수를 테스트 해보는 클래스.
 

*68p Television* _채워넣기_

 * 인스턴스 변수: volume,  program
 * 메소드: volumeUp(), volumeDown(), programName()

*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{

  class GuessGame { //GuessGame class 지정. 게임에 관련된 정보.
    
        Player p1;
        Player p2;
        Player p3;
        Player p4;

        //선수가  4명이므로 인스턴트변수  Player을  4개 설정함.

        public void startGame() {
            p1 = new Player();
            p2 = new Player();
            p3 = new Player();
            p4 = new Player();
            
            //startGame 메소드 호출 후  new 연산자를 통해 새로운 Player 생성
            //인스턴스 변수에 대입.
            
            int guessp1 = 0;
            int guessp2 = 0;
            int guessp3 = 0;
            int guessp4 = 0;
            
          //인스턴스 변수 4개 선언.  guesspNum = pNum이 추측한 숫자

            boolean p1isRight = false;
            boolean p2isRight = false;
            boolean p3isRight = false;
            boolean p4isRight = false;
                        
            //boolean 연산자 이용, 참.거짓판별 변수  4개 선언.

            
            int targetNumber = (int)(Math.random()*10);
            // 맞춰야할 숫자를 만들기 위해 인스턴스 변수 targetNumber선언
            //math 메소드 random을  사용하고, 정수형을 유도하기 위해서, 캐스트 연산자  (int)를 써줌.
            System.out.println("0이상 9이하의 숫자를 맞춰보세요.");
                        
            
            while(true){ //맞출 때까지 계속 while문 진행
                
                    System.out.println("맞춰야할 숫자는"+targetNumber+"입니다.");
                    
            p1.guess();
            p2.guess();
            p3.guess();
            p4.guess();
            
            //선수마다 guess 메소드 호출
            
            guessp1=p1.number; //p1이 추측한 숫자를 나타내는 변수 guessp1 선언 후 추측 숫자를 대입
                System.out.println("1번 선수가 찍은숫자:" +guessp1);
            guessp1=p2.number; //p2가 추측한 숫자를 나타내는 변수 guessp2 선언 후 추측 숫자를 대입
                System.out.println("2번 선수가 찍은숫자:"+guessp2);
            guessp3=p3.number; //p3가 추측한 숫자를 나타내는 변수 guessp3 선언 후 추측 숫자를 대입
                System.out.println("3번 선수가 찍은숫자:"+guessp3);
            guessp4=p4.number; //p4 추측한 숫자를 나타내는 변수 guessp4 선언 후 추측 숫자를 대입
                System.out.println("4번 선수가 찍은숫자:"+guessp4);
                        
             if(guessp1==targetNumber){
                     p1isRight=true;
             }
             if(guessp2==targetNumber){
                     p2isRight=true;
             }
             if(guessp3==targetNumber){
                     p3isRight=true;
             }
             if(guessp4==targetNumber){
                     p4isRight=true;
             }
             
             //if문 이용, 추측한 숫자가 맞춰야할 숫자일 경우 true가 나오게 하는 boolean 변수 pNumRight 사용.
             
             
             if(p1isRight||p2isRight||p3isRight||p4isRight) { //p1 or p2 or p3 or p4 가 맞추면,
                 System.out.println("맞춘선수가있습니다.");
                 System.out.println("1번선수:"+p1isRight);
                 System.out.println("2번선수:"+p2isRight);
                 System.out.println("3번선수:"+p3isRight);
                 System.out.println("4번선수:"+p4isRight);
                                  System.out.println("게임끝.");
                 break; //break이용 if문 종결.
             }
             else{
                 System.out.println("다시시도해야합니다.");
                 //아무도 못맞췄을 경우 계속 한다.
             }
            }
        }



}
class Player{ //Player class 지정. 선수에 관련된 정보.

        int number=0; //선수들이 찍을 숫자를 나타내는 변수 number선언.

        public void guess(){ //guess 메소드 선언.

                number = (int) (Math.random()*10); //random 메소드 이용 무작위 추출.
                    System.out.println("찍은숫자:"+number);
}
}
public class GameLauncher{ //GameLauncher class 지정

        public static void main(String[] args) { //메인함수 호출 => 가장먼저 실행.

            GuessGame game = new GuessGame(); //GuessGame 메소드 호출.
            game.startGame(); //게임을 시작한다.
        
        }
}

}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

A :

class TapeDeck { //TapeDeck 클래스 지정.
	
        boolean canRecord=false; //boolean연산자 이용, canRecord 지정.
     
        void playTape(){ //playTape 메소드 호출.
        	
                System.out.println("tape playing"); //출력
        }
        void recordTape(){ //recordTape 메소드 호출.
                System.out.println("tape recording"); //출력
        }
}
class TapeDeckTestDrive{ //테스트용 클래스 지정.
        public static void main(String [] args){ //메인메소드 선언.
        	
                TapeDeck t=new TapeDeck(); 
                
                // 밑에 t라는 것이 있기에 이를 써먹을 객체가 필요하다! 
      //new연산자를 이용하여 새로운 TapeDeck 메소드를 호출.
                
                t.canRecord=true; //선언
                t.playTape(); //playTape 메소드 호출 -> 출력
                
                if(t.canRecord == true){ //참
                        t.recordTape(); //recordTape 메소드 호출 -> 출력
                }
        }
}

//t라는 것을 사용하기위에서는 t를 선언해 주었어야 한다.
/*
tape playing
tape recording 가 출력된다. */

B:

class DVDPlayer { // 클래스 지정.
	
        boolean canRecord=false; //boolean연산자 이용, canRecord 지정.
     
        void recordDVD(){ //recordDVD 메소드 호출.
        	
                System.out.println("DVD recording"); //출력
        }
        void playDVD(){ 
// 밑에 d.playDVD 메소드가 호출 되었으므로 메소드를 호출해주어야함.
                System.out.println("DVD playing"); //출력
        }
}
class DVDPlayerTestDrive{ //테스트용 클래스 지정.
        public static void main(String [] args){ //메인메소드 선언.
        	
               DVDPlayer d = new DVDPlayer(); 
               
               	//new 연산자를 이용하여 DVDPlayer 메소드 호출
                      
               d.canRecord=true; //선언
               d.playDVD(); //playDVD 메소드 호출 -> 출력
                
                if(d.canRecord == true){ //참
                        d.recordDVD(); //recordDVD 메소드 호출 -> 출력
                }
        }
}

// playDVD() 메소드가 없었기 때문에 오류가 났던것.

/*
DVD playing
DVD recording가 출력된다. */

}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수:

- 원시변수: 정수(byte,short,int,long), 부울(boolean), 부동소수점수(float, double)와 같은 기초적인 값이 들어간다.

- 레퍼런스 변수: 객체에 대한 레퍼런스가 들어간다. 
  ex) Dog mydog = new Dog();
         mydog가 레퍼런스변수명이됨.

*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{

class Dog { // Dog 클래스 지정.
        String name; // 문자열  name 선언.
        public static void main(String[]args){ //main 메소드 선언
            
                Dog dog1 = new Dog(); 
         // Dog 객체 생성. new연산자 이용  Dog메소드 호출
                dog1.bark(); //bark 메소드 호출.
                dog1.name = "Bart"; //dog1's name is Bart!!

                Dog[]myDogs = new Dog[7]; // Dog 배열을 만듬.
                myDogs[0] = new Dog();
                myDogs[1] = new Dog();
                myDogs[2] = new Dog();
                myDogs[3] = new Dog();
                myDogs[4] = dog1;  //5번째 Dog 배열에  dog1 지정.
                myDogs[5] = new Dog();
                myDogs[6] = new Dog();
              

                myDogs[0].name = "Fred";
                myDogs[1].name = "Marge";
                myDogs[2].name = "Lily"; //myDogs[4].name = "Bart"이므로 생략
                myDogs[3].name = "John";
                myDogs[5].name = "Rachel";
                myDogs[6].name = "Herry";
       
                           	//배열레퍼런스를 사용해서 각 개들의 이름지정.

                System.out.print("마지막 개의 이름:");
                System.out.println(myDogs[6].name); // 출력


                int x = 0; //변수 x 선언
                while(x<myDogs.length){ 
                		//모든 개가 짖도록하기 위해, 배열의 길이 만큼 while문 순환.
                        myDogs[x].bark(); //(x+1)번째 개가 짖음.
                        x = x+1; //x를 한개씩 늘려감.
                }
        }

        public void bark(){ //bark메소드 호출.
                System.out.println(name+"이(가) 왈!하고 짖습니다."); //출력
        }
        public void eat(){} //eat메소드 호출.
        public void chaseCat(){} //chaseCat메소드 호출.
        		
        				//But 호출은 했으나 사용하진 않았음.


}

/*null이(가) 왈!하고 짖습니다.
(dog1.bark();이 이름 선언보다 먼저 되었으므로 dog1의 이름을 모르는 상태이기 때문에 null이라고 표기)
마지막 개의 이름:Herry
Fred이(가) 왈!하고 짖습니다.
Marge이(가) 왈!하고 짖습니다.
Lily이(가) 왈!하고 짖습니다.
John이(가) 왈!하고 짖습니다.
Bart이(가) 왈!하고 짖습니다.
Rachel이(가) 왈!하고 짖습니다.
Herry이(가) 왈!하고 짖습니다.
이 출력됨.
*/
}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

A: 
class Books { //Books 클래스 지정.
        String title; //문자열 title, author선언.
        String author;
}

class BooksTestDrive { //테스트용 클래스 지정.
        public static void main(String [] args) { //메인 메소드 선언.
                
                Books [] myBooks = new Books[3]; // Books 배열 선언. 길이=3;
                
                int x = 0; //int 변수 선언.
                
                myBooks[0] = new Books();
                myBooks[1] = new Books();
                myBooks[2] = new Books(); 
                	
// 각 배열을 사용하기 위해서는  new 연산자를 이용하여 객체를 생성 해야한다.
                
                myBooks[0].title = "The Grapes of Java";
                myBooks[1].title = "The Java Gatsby";
                myBooks[2].title = "The Java Cookbook"; // 제목 지정.
                
                myBooks[0].author = "bob";
                myBooks[1].author = "sue";
                myBooks[2].author = "ian"; // 저자 지정.
                
                while(x<3) { // 모든 책의 제목과 저자를 말할 때까지 순환.
                	
                        System.out.print(myBooks[x].title); // 출력
                        System.out.print(" by "); //출력
                        System.out.println(myBooks[x].author); //출력
                        x = x + 1; // x를 하나씩 늘림.
                }
        }
}

//객체를 생성하지 않았기때문에 오류가 났었다.

B:

class Hobbits { //클래스 지정.
	
        String name; //문자열 name 선언.
        
        public static void main(String [] args) { //메인 메소드 선언.
        	
                Hobbits [] h = new Hobbits[3]; // Hobbits 배열 선언. 길이=3;
                
                        int z = -1; 
              // z<2이고, 모든 배열을 다 보여줘야 하므로 z++; 되었을 때 3개가 되어야함.
 	      //  그리고, 배열의 인덱스는  0에서 부터 시작해야함.
                        
                        while (z<2) { //모두 말할때까지 순환.
                        	
                                z = z + 1; // z=-1이기에, h[0]부터 시작한다.
                                
                                h[z] = new Hobbits(); //Hobbits 메소드 호출.
                                h[z].name = "bilbo"; // h[0].name=문자열 선언.
                                
                                if(z==1) { // h[1].name;
                                	h[z].name = "frodo";
                                }
                                if(z==2) { // h[2].name;
                                 h[z].name = "sam";
                                }
                                
                                System.out.print(h[z].name + " is a "); //출력
                                System.out.println("good Hobbit name"); //출력
                        }
        }
}

//배열의 인덱스를 1에서 부터 실행했기에 오류.

}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?: 밥

 * 문제가 된 부분은 어딘가요?: 켄트의 코드가 간단했지만, 그의 메소드에는 순환문을 한 바퀴 돌 때마다 새로운 객체를 레퍼런스 변수 하나에 대입했기때문에, 전에 참조하고 있던 객체는 버려지게되는 문제가 발생했습니다. 비록 밥의 코드는 켄트에 비해 다소 복잡했더라고, 각각 레퍼런스 변수에 객체를 연결하여 10개의 객체를 모두 사용한 밥이 더 잘한 것입니다.

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화: 데이터를 아무나 볼 수 없도록 숨기는 것. 인스턴스 변수를 private로 지정하고, 접근 제어를 위해 public으로 지정된 게터와 세터를 만들면 됨. 인스턴스 변수를 마음대로 언제든지 바꿀 수 있다는 장점이 있음.

 * 게터와 세터: 
1.공통점 : 인스턴스 변수의 값에 대해 작업함.
2.게터
-액세서(accessor)의 줄임말.
-어떤 것을 가져오는 것. 즉, 게터가 가져오기로 되어있는 값을 리턴값 형태로 받아오는 것.
3.세터
-뮤테이터(mutator)의 줄임말.
-어떤 것을 설정하는 것. 즉, 세터가 설정할 값을 인자로 받아서 인스턴스 변수를 그 값으로 설정하기 위한 용도로 쓰이는 것.

 * 인스턴스 변수 vs 지역 변수:
-인스턴스 변수:클래스 내에서 선언. 기본값이 있음 ex) int의 기본값은 0임.

-지역변수:메소드 내에서 선언.기본값이 없음. -> 그렇기 때문에 사용전에 반드시 초기화 해야함. 

*107p Dog* _실행_

{{{
class Dog { //클래스 선언
	
        int size;
        String name; // size라는 인스턴스 변수, name이라는 문자열 변수 선언
        
        void bark(){ //bark 메소드 = 사이즈에 따라 짖는 소리가 다름.
                if(size > 60){
                        System.out.println("Wooof! Wooof!");
                }
                else if(size > 14){
                        System.out.println("Ruff! Ruff!");
                }
                else{ //size가 14이하
                        System.out.println("Yip! Yip!");
                }
        }

}

class DogTestDrive { //테스트용 클래스.
	        public static void main(String[] args){ //메인메소드
  
	        Dog one = new Dog(); //one이라는 이름의 Dog변수 선언
                one.size = 70;
                Dog two = new Dog(); //two라는 이름의 Dog변수 선언
                two.size = 8;
                Dog three = new Dog(); //three라는 이름의 Dog변수 선언
                three.size = 35;
                
                one.bark(); 
                two.bark();
                three.bark(); //개들이 짖는다.
        }

}


//출력
/* "Wooof! Wooof!"
   "Yip! Yip!"
   "Ruff! Ruff!"
  */
}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{
A:

public class XCopy { //클래스 선언

        
        public static void main (String [] args) { //메인 메소드
                
                int orig = 42; //orig 인스턴스 변수 선언
                
                XCopy x = new XCopy(); //XCopy변수.
                
                int y = x.go(orig); //y=orig*2
                
                System.out.println(orig + " " + y);
                
        }
        
        int go(int arg) { //자바는 복사본으로 전달하기때문에 orig변수의 값이 변화없음
                
                arg = arg * 2;
                
                return arg; //84를 리턴함.
        }
        
        }

/*
42 84 가 출력 , A의 코드는 이상이 없음.
*/

B:


class Clock { //클래스 선언.

        
        private String time; //time이라는 문자열을 캡슐화함. 
        
        void setTime(String t) { //시간설정하는 메소드, 입력받은 time을 t로 설정.
                time = t; 
        }
        
        
        String getTime() { 
//시간을 입력하는 메소드, 문자열을 입력받아서 time으로 리턴함. 
//게터메소드는 반드시 출력값이 필요하다!
                return time;
        }
}


public class ClockTestDrive { //테스트클래스 선언

        
        public static void main(String [] args) { //메인 메소드
                
                Clock c = new Clock(); //Clock객체 선언
                
                c.setTime("1245"); //time에 "1245"라는 문자열을 설정함.

                String tod = c.getTime(); //tod라는 문자열은 getTime메소드로 입력받음.

                System.out.println("time: " + tod); //출력
                
        }
}

//게터 메소드에는 반드시 출력값이 필요하므로 void를 String으로 바꿔준다.

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란? 
:소프트웨어 개발 방법론 분야에 등장. 고객이 원하는 기한에 원하는 것을 제공할 수 있다는 장점이 있음.

*일련의 규칙

-  조금씩 자주 발표하는 것.

-  사이클을 반복해서 돌리면서 개발하는 것.

-  스펙에 없는 것은 절대 집어넣지 않는 것.

-  테스트 코드를 먼저 만들어 놓는것. 

-  정규 일과 시간에만 작업하는 것.

-  어디서든 코드를 개선하는 것.

-  모든 테스트 전에는 어떤 것도 발표하지 않는 것.

-  현실적인 작업계획을 하는 것.

-  모든 일을 단순하게 처리하는 것.

-  두 명씩 팀을 편성하고 모든 사람이 대부분의 코드를 알 수 있도록 돌아가면서 작업하는 것.

*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{
class SimpleDotCom { //SimpleDotcom 클래스 지정
        
       
        int[] locationCells; //int형 배열 선언
        int numofHits = 0; //int형 변수 선언
        
 
        public void setLocationCells(int[] locs){ //setLocation 메소드 초기화
                locationCells = locs; //줄여서 표현
        }
        
        
        public String checkYourself(String stringGuess){ //함수 checkyourself 지정
                

                int guess = Integer.parseInt(stringGuess); 
                //stringGuess는  string형 변수이므로, int형 변수 Guess로 바꿈

                String result = "miss"; //string형 변수 result -> "miss"
                
         
                for(int i = 0; i<locationCells.length; i++){
                	
                			//배열의 길이만큼  for문 실행

                        
                        if(guess == locationCells[i]){
                   // 인덱스 i 의 locationCells 값과 guess와 같다면 Hit 반환.

                                result = "hit";
                                
                                numofHits++; //Hit수 증가시킴
                                break; //끝냄
                        }
                }
                
            
                if(numofHits == locationCells.length){

                     //Hit의 수가 배열의 길이와 같을 때 	
               
                        result = "kill"; //kill 출력
                }
              
                System.out.println(result);
                        return result; //result(결과)출력
        }
}


public class SimpleDotComTestDrive { //Test용 class 지정
        
        public static void main(String[] arsg){ //메인메소드 선언
                
                
                SimpleDotCom dot = new SimpleDotCom();
              //dot이라는 이름의 SimpleDotcom변수 선언

                  
                int[] locations = {2,3,4}; //locations 배열 인덱스 0,1,2 지정
                
             
                dot.setLocationCells(locations); //위치 설정
                
         
                String userGuess = "2"; //user의 예측값 설정
                
                
                String result  = dot.checkYourself(userGuess); //일치 하는지 check한다.
                
                
        }

}






}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속: 클래스 여러개가 동일한 메소드들을 갖고 있을 때, 클래스 이름들을 묶을 수 있는 큰 범주의 이름으로 새로운 클래스를 만들어서 메소드를 넣고 원래 있던 클래스 들은 하위 클래스로 집어 넣는다. 이때 새로운 클래스를 상위 클래스라고 한다. 

ex) 상위클래스 = shape / 하위클래스 = square, circle, triangle, amoeba

 * 다형성: 레퍼런스 변수 유형으로 선언한 유형을 확장하는 모든 것을 그 레퍼런스 변수에 대입하는 등의 일을 하는 것을 말한다.

*208p 클래스 계층 구조* _클래스로 구현_

{{{

class Animal{ //상위 클래스 Animal

               int picture, food, hunger, boundaries, location;

              void makeNoise() {};
              void eat() {};
              void sleep() {};
              void roam() {};


class Feline extends Animal{ //하위클래스 

              void roam() {};
}

class Hippo extends Animal{//하위클래스 

              void makeNoise() {};
              void eat() {};
}

class Canine extends Animal{//하위클래스 

              void roam() {};

}

class Lion extends Feline{//하위클래스 

              void makeNoise(){};
              void eat(){};
}

class Tiger extends Feline{//하위클래스 
             
              void makeNoise(){};
              void eat(){};
}

class Cat extends Feline{//하위클래스 

              void makeNoise(){};
              void eat(){};
}

class Wolf extends Canline{//하위클래스 

              void makeNoise(){};
              void eat(){};
}

class Dog extends Canline{//하위클래스 

              void makeNoise(){};
              void eat(){};
}

}

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드: 오버라이드하는 메소드의 인자와 리턴형식은 외부에서 보기에 상위클래스에 있는 오버라이들르 당하는 메소드와 완벽하게 일치해야함.

 * 오버로딩:  이름이 같고 인자목록이 다른 메소드 두개를 만드는 것. 다형성의 제약을 이행할 필요가 없음.

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

public class MonsterTestDrive { //MonsterTestDrive 클래스 선언
	
        public static void main(String[] args) { //메인 메소드
  
        	Monster [] ma = new Monster[3];
                //3마리의 몬스터 배열 생성(뱀파이어,드래곤,몬스터)
                
        	ma[0] = new Vampire(); 
                ma[1] = new Dragon();
                ma[2] = new Monster();
                
                for(int x = 0; x < 3; x++) { //변수 x를 인트형으로 지정,  x=0,1,2;
                	
                        ma[x].frighten(x); //각 몬스터의 인덱스 만큼 frighten 실행.
                       
                }
        }
}

class Monster { // Monster 클래스 지정

		boolean frighten (int d) { 
             //frighten 함수 지정. int형 변수 입력, boolean 으로 반환.
							
                System.out.println("arrrgh"); 
                
                return true; //true=1;
        }
}


class Vampire extends Monster { //Monster의 하위클래스인 Vampire 생성.
	
        boolean frighten (int x) { 
          //frighten 함수 지정. int형 변수 입력, boolean 으로 반환.
        	
                System.out.println("a bite?");
                
                return false; //false = 0;
        }
}

class Dragon extends Monster { //Monster의 하위클래스인 Dragon 생성.
	
        boolean frighten (int degree) { 
        	
        	//frighten 함수 지정. int형 변수 입력, boolean 으로 반환.
        	
                System.out.println("breath fire"); 
                
                return true; //true = 1;
        }
}

/*출력값
a bite?
breath fire
arrrgh*/


/*1이 옳다. Vamfire과 Dragon은 Monster에게 상속받았고(Monster의 하위 클래스), 둘은 비슷 하지만, 조금 다르므로 오버라이딩을 해야 적절하며, 반환 유형(boolean)과 입력유형(int) 또한 같아야한다.*/

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}