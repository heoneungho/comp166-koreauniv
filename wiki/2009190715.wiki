#summary 수업중 실습하는 내용을 올리게 되는 실습페이지입니다. 페이지의 내용은 각 학생에 의해서 관리됩니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{


public class BeerSong {

	public static void main (String[] args) {
		int beerNum=99;
		String word = "bottles"; //복수형
		
		while (beerNum > 0){
			

			
			System.out.println(beerNum + " " + word + " of beer on the wall");
			System.out.println(beerNum + " " + word + " of beer.");
			System.out.println("Take one down.");
			System.out.println("Pass it around.");
			beerNum = beerNum -1;
			
			if (beerNum ==1)	{
				word = "bottle"; //단수형
			}



			if (beerNum >0) {
				System.out.println(beerNum + " " + word + " of beer on the wall");
			}else {
				System.out.println("No more bottles of beer on the wall");
			}
		}
	}
}

}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{


public class PhraseOMatic {
	public static void main (String[] args) {
		
		String[] wordListOne = {"good", "bad", "beautiful", "elegance", "massive", "hot", "dynamic", "useful"};
		String[] wordListTwo = {"persisted", "kept","contacted","focused","targeted","shared","cooperative"};
		String[] wordListThree = {"character", "thinking", "mission", "strategy", "skill", "medicine","eye"};
		
		int oneLength = wordListOne.length;
		int twoLength = wordListTwo.length;
		int threeLength = wordListThree.length;
		
		int rand1 = (int) (Math.random() * oneLength);
		int rand2 = (int) (Math.random() * twoLength);
		int rand3 = (int) (Math.random() * threeLength);
		
		String phrase = wordListOne[rand1] + " " + wordListTwo[rand2] + " " + wordListThree[rand3];
		
		System.out.println ("What we need is a " + phrase);
	}
}


}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 프로그램을 실행시킨다, 바이트코드가 실행되기 전에 예외의 접근자가 접근했는지 확인해주는 작업을 한다.
 * 컴파일러: 변수에 다른 유형의 데이터를 저장하는것을 미리 막아준다, 비공개 메소드를 호출하려고 하거나 바꿀수 없는 메소드를 변경하려는등의 접근위반을 미리 방지해준다, 다른 클래스의 내용에 미자격자가 접근하는것을 차단해준다

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

A

class Exercise1b {

public static void main(String [] args) {
	int x = 1;
	while (x<10) {
		if (x>3){
		System.out.println("big x");
		x=x+1; //x=x+1을 넣지 않으면 무한루트 발생
			}
		}
	}
}


B

class Exercise1b { //class를 넣어주어야함

public static void main(String [] args) {
	int x = 5;
	while (x>1) {
		x = x-1;
		if (x<3) {
			System.out.println("small x");
			}
		}
	}
}


C

class Exercise1b {

public static void main(String [] args) { //메인메소드를 넣어주어야함

	int x = 5;
	while (x>1) {
		x = x -1;
		if (x <3) {
			System.out.println ("small x");
			}
		}
	}
}

}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체의 상태를 나타낸다.
 * 메소드: 객체에서 할수 있는 일을 나타낸다.
 * 클래스: 실제로 사용할 객체의 유형을 나타내는 클래스
 * 테스트용 클래스: 새로운 클래스 유형의 객체에 들어있는 메소드와 변수를 테스트함
 

*68p Television* _채워넣기_

 * 인스턴스 변수: channel, button
 * 메소드: display, sound


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{

public class Player {

    int number = 0;

    public void guess() {
        number = (int) (Math.random() * 10);
        System.out.println("찍은 숫자: " + number);
    }
}

----------------------------------------------------------------


public class GameLauncher {
    public static void main (String[] args) {
        GuessGame game = new GuessGame();
        game.startGame();
    }
}


-----------------------------------------------------------------


public class GuessGame {
    Player p1;
    Player p2;
    Player p3;
    Player p4;

    public void startGame() {
        p1 = new Player();
        p2 = new Player();
        p3 = new Player();
        p4 = new Player();

        int guessp1 = 0;
        int guessp2 = 0;
        int guessp3 = 0;
        int guessp4 = 0;

        boolean p1isRight = false;
        boolean p2isRight = false;
        boolean p3isRight = false;
        boolean p4isRight = false;

        int targetNumber = (int) (Math.random() * 10);
        System.out.println("0 이상 9 이하의 숫자를 맞춰보세요.");

        while(true) {
            System.out.println("맞춰야 할 숫자는 " + targetNumber + "입니다.");
            
            p1.guess();
            p2.guess();
            p3.guess();
            p4.guess();

            guessp1 = p1.number;
            System.out.println("1번 선수가 찍은 숫자: " + guessp1);
            guessp2 = p2.number;
            System.out.println("2번 선수가 찍은 숫자: " + guessp2);
            guessp3 = p3.number;
            System.out.println("3번 선수가 찍은 숫자: " + guessp3);
            guessp4 = p4.number;
            System.out.println("4번 선수가 찍은 숫자: " + guessp4);


            if (guessp1 == targetNumber) {
                p1isRight = true;
            }
            if (guessp2 == targetNumber) {
                p2isRight = true;
            }
            if (guessp3 == targetNumber) {
                p3isRight = true;
            }
            if (guessp4 == targetNumber) {
                p4isRight = true;
            }


            if (p1isRight || p2isRight || p3isRight || p4isRight) {

                System.out.println("맞춘 선수가 있습니다.");
                System.out.println("1번 선수: " + p1isRight);
                System.out.println("2번 선수: " + p2isRight);
                System.out.println("3번 선수: " + p3isRight);
                System.out.println("4번 선수: " + p4isRight);
                System.out.println("게임 끝.");
                break;

            }    else    {
                System.out.println("다시 시도해야 합니다.");
            }
        }
    }
}


}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

A.


public class TapeDeck {

	boolean canRecord = false;
	
	void playTape() {
		System.out.println("tape Playing");
	}	
		
		void recordTape(){
			System.out.println("tape recording");
		}
	}




public class TapeDeckTestDrive {

	public static void main(String [] args) {
		
		TapeDeck t = new TapeDeck(); //객체 생성
		t.canRecord = true;
		t.playTape();
		
		if (t.canRecord == true) {
			t.recordTape();
			
		}
	}
}


B.



public class DVDPlayer {
	
	boolean canRecord = false;
	void recordDVD() {
		System.out.println("DVD recording");
		
	}
	
	void playDVD() {
		System.out.println ("DVD playing");
	} /*DVDPlayerTestDrive 클래스에서 playDVD메소드를 사용했으므로 미리 선언해주어야 함*/

}



public class DVDPlayerTestDrive {

	public static void main(String [] args) {
		
		DVDPlayer d = new DVDPlayer();
		d.canRecord = true;
		d.playDVD();
		
		if (d.canRecord == true) {
			d.recordDVD();
			
		}
	}
}




}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수: 

원시변수는 int,double,float 와 같은 변수를 의미하고 레퍼런스변수는 객체를 나타내는 변수를 의미한다.
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{


class Dog {

	String name;
	public static void main (String[] args) {
		
		Dog dog1 = new Dog();
		dog1.bark();
		dog1.name = "Bart";
		
		Dog[] myDogs = new Dog[3];
		
		myDogs[0] = new Dog();
		myDogs[1] = new Dog();
		myDogs[2] = dog1;
		
		myDogs[0].name = "Fred";
		myDogs[1].name = "Marge";
		
		System.out.print("마지막 개의 이름: ");
		System.out.println(myDogs[2].name);
		
		int x = 0;
		while(x<myDogs.length) {
			myDogs[x].bark();
			x=x+1;
		}
	}
	
	public void bark() {
		System.out.println(name + "이(가) 왈!하고 짖습니다.");
	}
	public void eat() { }
	public void chaseCat() { }

		

}

}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{


A


class Books {

	String title;
	String author;
	
}




class BookTestDrive {

	public static void main(String [] args) {
		
		Books [] myBooks = new Books[3];
		myBooks[0] = new Books(); //객체를 생성해줘야함
		myBooks[1] = new Books();
		myBooks[2] = new Books();
		int x = 0;
		myBooks[0].title = "The Grapes of Java";
		myBooks[1].title = "The Java Gatsby";
		myBooks[2].title = "The Java Cookbook";
		myBooks[0].author = "bob";
		myBooks[1].author = "sue";
		myBooks[2].author = "ian";
		
		while (x<3) {
			System.out.print(myBooks[x].title);
			System.out.print(" by ");
			System.out.println(myBooks[x].author);
			x=x+1;
		}
	}
}



B



class Hobbits {

	
	String name;
	
	public static void main (String [] args) {
		
		Hobbits [] h = new Hobbits[3];
		int z = 0;
		
		while (z<3)	{    //z<3이여야함
		
			h[z] = new Hobbits();
			h[z].name = "bilbo";
			if (z==1) {
				h[z].name = "frodo";
			}
			if (z==2) {
				h[z].name = "sam";
			}
			
			
			System.out.print(h[z].name + " is a ");
			System.out.println("good hobbit name");
			z = z + 1; //이 문장이 아래에 있어야함
			}
			}
		}


}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?: 토니
 * 문제가 된 부분은 어딘가요?: 새로운 객체를 레퍼런스변수 하나에 대입했기 때문에 전에 참조하던 객체는 사라지게 됨

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화: 데이터를 불특정다수가 함부로 조작할수 없도록 보호하는것
 * 게터와 세터: 데이터를 private로 설정하여 직접 조작할수 없도록 하고, getter와 setter를 통해 데이터의 조작을 가능하도록 한다.
 * 인스턴스 변수 vs 지역 변수: 인스턴스 변수는 클래스 내에서 선언되고 지역변수는 메소드 내에서 선언된다. 또한 지역변수는 사용전 반드시 초기화를 시켜주어야한다.
 
*107p Dog* _실행_

{{{


public class Dog {

	
	int size;
	String name;
	
	void bark() {
		if (size>60) {
			System.out.println("Wooof! Wooof!");
		}else if (size>14) {
			System.out.println("Ruff! Ruff!");
		} else {
			System.out.println("Yip! Yip!");
			
		}
	}
}






public class DogTestDrive {


	public static void main (String[] args) {
		
		Dog one = new Dog();
		one.size = 70;
		Dog two = new Dog();
		two.size = 8;
		Dog three = new Dog();
		three.size = 35;
		
		one.bark();
		two.bark();
		three.bark();
		
	}
}





}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

A



public class XCopy {

	
	public static void main (String [] args) {
		
		int orig = 42;
		
		XCopy x = new XCopy();
		
		int y = x.go(orig);
		
		System.out.println(orig + " " + y);
		
	}
	
	int go(int arg) {
		
		arg = arg * 2;
		
		return arg;
	}
	
	}









B



public class Clock {

	
	private String time; //캡슐화를 해주면 좋음
	
	void setTime(String t) {
		time = t;
	}
	
	
	String getTime() { // return 값이 String 임
		return time;
	}
}






public class ClockTestDrive {

	
	public static void main(String [] args) {
		
		Clock c = new Clock();
		
		c.setTime("1245");
		String tod = c.getTime();
		System.out.println("time: " + tod);
		
	}
}


}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?

소프트웨어 개발 방법론중 하나이며, 스펙이 바뀌어도 쉽게 변경하여 제공할수 있다는 장점이 있다. 익스트림 프로그래밍의 특징에는 조금씩 자주 발표하며, 사이클을 반복해서 돌리면서 개발하고, 스펙에 없는 것은 집어넣지 않고 테스트 코드를 먼저 만드는것이다.
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{



public class SimpleDotComTestDrive {

	
	public static void main (String[] args) {
		
	int numOfGuesses = 0;
	
	GameHelper helper = new GameHelper();
	
	SimpleDotCom theDotCom = new SimpleDotCom();
	
	int randomNum = (int) (Math.random()*5);
	
	int [] locations = {randomNum, randomNum+1, randomNum+2};
	
	theDotCom.setLocationCells(locations);
	boolean isAlive = true;
	
	while(isAlive == true) {
		
		String guess = helper.getUserInput("enter a number");
		String result = theDotCom.checkYourself(guess);
		numOfGuesses++;
		
		
		if (result.equals("kill")) {
			
			isAlive = false;
			
			System.out.println(numOfGuesses + "guesses");
			
					
		}
	}
	
}

}








public class SimpleDotCom {

	
	int [] locationCells;
	
	int numOfHits = 0;
	
	public void setLocationCells(int[] locs) {
		locationCells = locs;
	}
	
	public String checkYourself (String stringGuess) {
		int guess = Integer.parseInt(stringGuess);
		String result = "miss";
		for (int i = 0; i < locationCells.length; i++) {
			if (guess == locationCells[i]) {
				result = "hit";
				numOfHits++;
				break;
			}
		}
		
		if (numOfHits == locationCells.length){
			result = "kill";
		}
		
		System.out.println(result);
		return result;
	}
}






import java.io.*;
public class GameHelper {
	
	
	
	public String getUserInput(String prompt) {
		String inputLine = null;
		System.out.print(prompt + " ");
		try {
			BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
			
			inputLine = is.readLine();
			if (inputLine.length() == 0 ) return null;
		} catch (IOException e) {
			System.out.println("IOException: "+ e);
		}
		return inputLine;
		}
	}



}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{


public class SimpleDotCom {

	
	int [] locationCells;
	
	boolean [] hitCells = {false, false, false};
//hitCells boolean 배열을 생성하여 false값을 넣어준다.
	int numOfHits = 0;

	public void setLocationCells(int[] locs) {
		locationCells = locs;
	}
	
	public String checkYourself (String stringGuess) {
		int guess = Integer.parseInt(stringGuess);
		String result = "miss";
		for (int i = 0; i < locationCells.length; i++) {
			if (guess == locationCells[i] && hitCells[i] == false) {
				result = "hit";
				hitCells[i] = true;
//맞춘값의 hitCells에는 true값을 넣어준다.
				numOfHits++;
				break;
			}

//플레이어의 추측과 locationcells가 일치하고 hitCells가 false때 적중한다로바꾼다

			else if (guess == locationCells[i] && hitCells[i] == true) {
				System.out.println("꼼수쓰지마라");
			}
//hitCells가 true인경우 맞춘값을 다시대입한것이므로 numOfHits의 값을 늘리지 않는다
				
				
		}
		
		if (numOfHits == locationCells.length){
			result = "kill";
		}
		
		System.out.println(result);
		return result;
	}
}

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{



public class SimpleDotCom {

	
	int [] locationCells;
	
	int numOfHits = 0;

	public void setLocationCells(int[] locs) {
		locationCells = locs;
	}
	
	public String checkYourself (String stringGuess) {
		int guess = Integer.parseInt(stringGuess);
		String result = "miss";
		for (int i = 0; i < locationCells.length; i++) {
			if (guess == locationCells[i] && locationCells[i] > 0) {
//locationCells[i]>0이라는 조건을 추가시킴

				result = "hit";
				numOfHits++;
				locationCells[i] = -1; //-1대입
				break;
			}

				
				
		}
		
		if (numOfHits == locationCells.length){
			result = "kill";
		}
		
		System.out.println(result);
		return result;
	}
}


}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

import java.util.ArrayList;

public class DotCom {

	private ArrayList<String> locationCells;
	
	public void setLocationCells(ArrayList<String> loc) {
		locationCells = loc;
	}
	
	public String checkYourself(String userInput) {
		
		String result = "miss";
		
		int index = locationCells.indexOf(userInput);
		
		if (index >= 0 ) {
			
			locationCells.remove(index);
			
			if (locationCells.isEmpty()) {
				result = "kill";
			} else {
				result = "hit";
			}
			
			}
			return result;
		}
	}

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

//<DotComBust class>

import java.util.*;
public class DotComBust {

private GameHelper helper = new GameHelper();
private ArrayList<DotCom> dotComsList = new ArrayList<DotCom> ();
private int numOfGuesses = 0;

private void setUpGame() {

	DotCom one = new DotCom();
	one.setName("Pets.com");
	DotCom two = new DotCom();
	two.setName("eToys.com");
	DotCom three = new DotCom();
	three.setName("Go2.com");
	dotComsList.add(one);
	dotComsList.add(two);
	dotComsList.add(three);

	System.out.println ("Your goal is to sink three dot coms.");
	System.out.println ("Pets.com, eToys.com, Go2.com");
	System.out.println ("Try to sink them all in the fewest number of guesses");

	for (DotCom dotComToSet : dotComsList) {
		ArrayList<String> newLocation = helper.placeDotCom(3);
		dotComToSet.setLocationCells(newLocation);
	}
}

private void startPlaying() {
		while (!dotComsList.isEmpty()) {
			String userGuess = helper.getUserInput("Enter a guess");
			checkUserGuess(userGuess);
		}
	finishGame();
}



private void checkUserGuess (String userGuess) {

	numOfGuesses++;
	String result = "miss";

	for (DotCom dotComToTest : dotComsList) {
			result = dotComToTest.checkYourself(userGuess);
			if (result.equals("hit")) {
				break;
			}
			if (result.equals("kill")) {
				dotComsList.remove(dotComToTest);
				break;
			}
	}
	System.out.println(result);
}

private void finishGame() {
	System.out.println("All Dot Coms are dead! Your stock is now worthless.");
	if (numOfGuesses <= 18) {
	System.out.println("It only took you" + numOfGuess + "guesses.");
	System.out.println("You got out before your options sank.");
	} else {
	System.out.println("Took you long enough." + numOfGuesses + " guesses.");
	System.out.println("Fish are dancing with your options.");
	}
}

public static void main (String[] args) {
		DotComBust game = new DotComBust();
		game.setUpGame();
		game.startPlaying();
	}
}


//<DotCom class>

import java.util.*;

public class DotCom {
		private ArrayList<String> locationCells;
		private String name;

		public void setLocationCells(ArrayList loc) {
			locationCells = loc;
		}

	public void setName (String n) {
		name = n;
	}

	public String checkYourself (String userInput) {
		String status = "miss";
		int index = locationCells.indexOf(userInput);
		if (index >=0) {
			locationCells.remove(index);
			if (locationCells.isEmpty()) {
				status = "kill";
				System.out.println("Ouch! you sunk " + name + " : ( ");
			} else {
				status = "hit";
			}
	}
	return status;
	}
}


//<GameHelper class>


import java.io.*;
import java.util.*;

public class GameHelper {

	private static final String alphabet = "abcdefg";
	private int gridLength = 7;
	private int gridSize = 49;
	private int [] grid = new int[gridSize];
	private int comCount = 0;

	public String getUserInput(String prompt) {
		String inputLine = null;
		System.out.print(prompt + " ");
		try {
			BufferedReader is = new BufferedReader (new InputStreamReader(System.in));
			inputLine = is.readLine();
			if (inputLine.length() == 0 ) return null;
			} catch (IOException e) {
			System.out.println("OException: " + e);
			}
		return inputLine.toLowerCase();
	}

public ArrayList<String> placeDotCom(int comSize) {
		ArrayList<String> alphaCells = new ArrayList<String>();
		String [] alphacoords = new String [comSize];
		String temp = null;
		int [] coords = new int[comSize];
		int attempts = 0;
		boolean success = false;
		int location = 0;

		comCount++;
		int incr = 1;
		if ((comCOunt % 2) == 1) {
			incr =gridLength;
		}

		while ( !success & attempts++ < 200 ) {
			location = (int) (Math.random() * gridSize);
			int x = 0;
				success = true;
			while (success && x < comSize) {
				if (grid[location] == 0) {
					coords[x++] = location;
					location += incr;
					if (location >= gridSize) {
						success =false;
					}
					if (x>0 & (location % gridLength == 0)) {
						success = false;
					}
				} else {
					success = false;
				}
			}
	}

int x= 0;
int row =0;
int column = 0;

while (x < comSize) {
	grid[coords[x]] = 1;
	row = (int) (coords[x] / gridLength);
	column = coords[x] % gridLength;
	temp = String.valueOf(alphabet.charAt(column));
	
	alphaCells.add(temp.concat(Interger.toString(row)));
	x++;
}
return alphaCells;
}
}



}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:  상위클래스로부터 공통적인 코드를 하위클래스에서 상속받아 사용하는것이다. 코드가 중복되는 것을 막을수 있고 일련의 클래스를 위한 공통적인 규약을 정의할수 있다.
 * 다형성:  레퍼런스 변수 유형으로 선언한 유형을 확장하는 모든 것을 그 레퍼런스 변수에 대입하는 등의 일을 하는것

*208p 클래스 계층 구조* _클래스로 구현_

{{{

class Animal	{

int picture, food, hunger, boundaries, location;

void makeNoise() {};
void eat() {};
void sleep() {};
void roam() {};



class Feline extends Animal	{
void roam() {};
}

class Hippo extends Animal{
void makeNoise() {};
void eat() {};
}

class Canine extends Animal{
void roam() {};
}

class Lion extends Feline{
void makeNoise(){};
void eat(){};
}

class Tiger extends Feline{
void makeNoise(){};
void eat(){};
}

class Cat extends Feline{
void makeNoise(){};
void eat(){};
}

class Wolf extends Canline{
void makeNoise(){};
void eat(){};
}

class Dog extends Canline{
void makeNoise(){};
void eat(){};
}

}

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드: 상위클래스의 메소드를 오버라이드 할때 상위클래스에 있는 오버라이드를 당하는 메소드와 완벽하게 일치해야한다. 또한 메소드 접근성을 더 어렵게 할수 없다.
 * 오버로딩: 리턴유형이 달라도 되지만 리턴 유형만 바꿀수는 없다. 또한 접근단계를 마음대로 바꿀수 있다.

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

public class MonsterTestDrive {

	public static void main (String [] args) {
		Monster [] ma = new Monster[3];
		ma[0] = new Vampire();
		ma[1] = new Dragon();
		ma[2] = new Monster();
		
		for (int x= 0; x<3; x++) {
			ma[x].frighten(x);
		}
	}
}




public class Monster {
	boolean frighten(int d) {
		System.out.println("arrrgh");
		return true;
	}

}




public class Vampire extends Monster {
boolean frighten(int x) {
	System.out.println("a bite?");
	return false;
}
}




public class Dragon extends Monster {
	boolean frighten(int degree) {
		System.out.println("Breath fire");
		return true;
	}
}


}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:서브 클래스와 수퍼 클래스의 공통점이 보여 또 다른 수퍼 클래스를 선언하고 싶어질 때가 있다. 이럴때 클래스들의 공통점을 추출해서 인터페이스로 만들면 된다.
 * 다형성: 다형성은 동일한 부모 클래스에서 상속된 서브 클래스의 객체들을 하나의 타입으로 취급할 수 있게 해준다
 * 추상 클래스: 단일상속만 가능하며 일반메소드와 추상메소드 모두 가질수있다.
 * 추상 메소드: 반드시 오버라이드해야하는 메소드를 의미한다. 추상메소드를 만들때는 클래스도 반드시 추상클래스로 만들어야한다.
 * 다중 상속:자손 클래스가 다양한 조상 클래스를 갖는다면 다양한 기능을 수행할 수 있다는 장점이 있다. 하지만 클래스로 다중 상속을 할 경우에는 여러가지 문제로 인해서 자바에서는 클래스로는 다중 상속이 불가능하다﻿ 


= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

import java.util.*;
public class V2Radiator {
	V2Radiator(ArrayList list) {
		for(int x=0; x<5; x++) {
			list.add(new SimUnit("V2Radiator"));
		}
	}
}

import java.util.*;
public class V3Radiator extends V2Radiator {

	V3Radiator(ArrayList lglist) {
		super(lglist);
		for (int g=0; g<10; g++) {
			lglist.add(new SimUnit ("V3Radiator"));
		}
	}
}


import java.util.*;
public class RetentionBot {
RetentionBot(ArrayList rlist) {
	rlist.add(new SimUnit("Retention"));
}
}


import java.util.*;
public class TestLifeSupportSim {

	public static void main(String [] args) {
		ArrayList aList = new ArrayList();
		V2Radiator v2 = new V2Radiator(aList);
		V3Radiator v3 = new V3Radiator(aList);
		for (int z=0; z<20; z++) {
			RetentionBot ret = new RetentionBot(aList);
		}
	}
}



public class SimUnit {

	String botType;
	SimUnit(String type) {
		botType = type;
	}
	int powerUse() {
		if ("Retention".equals(botType)) {
			return 2;
		}	else	{
			return 4;
		}
	}
}


}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

import java.util.*;
public class NewCalendar {

	public void main(String [] args) {
		Calendar c = Calendar.getInstance();
		c.set(2004,0,7,15,40);
		long day1 = c.getTimeInMillis();
		day1 += 1000*60*60;
		c.setTimeInMillis(day1);
		System.out.println("new hour" + c.get(c.HOUR_OF_DAY));
		c.add(c.DATE, 35);
		System.out.println("add 35 days" + c.getTime());
		c.roll(c.DATE, 35);
		System.out.println("roll 35 days" + c.getTime());
		c.set(c.DATE,1);
		System.out.println("set to 1" + c.getTime());
	}
}


}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

class StaticSuper {

        static {
                System.out.println("super static block");
        }
        
        StaticSuper() {    //책에서 문장에는 ()가 빠져있음
                System.out.println("super constructor");
        }
                
}


public class StaticTests extends StaticSuper{

        static int rand;
        
        static{
                rand = (int) (Math.random()*6);
                System.out.println("static block" + rand);
}
        
        StaticTests(){
                System.out.println("constructor");
        }
        
        public static void main(String[] args){
                System.out.println("in main");
                StaticTests st = new StaticTests();
                
        }
        
        
}


}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

import javax.sound.midi.*;


public class MiniMiniMusicApp {

        public static void main(String[] args){
                MiniMiniMusicApp mini = new MiniMiniMusicApp();
                mini.play();
        }
        
        public void play(){
                
                try{
                                Sequencer player = MidiSystem.getSequencer();
                                player.open();
                                
                                Sequence seq = new Sequence(Sequence.PPQ, 4);
                                Track track = seq.createTrack();
                                
                                ShortMessage a = new ShortMessage();
                                a.setMessage(144, 1, 44, 100);
                                MidiEvent noteOn = new MidiEvent(a, 1);
                                track.add(noteOn);
                                
                                ShortMessage b = new ShortMessage();
                                a.setMessage(128, 1, 44, 100);
                                MidiEvent noteOff = new MidiEvent(b, 16);
                                track.add(noteOff);
                                
                                player.setSequence(seq);
                                
                                player.start();
                }       catch (Exception ex){
                                ex.printStackTrace();
                }
                
                
        }
        
        
}


}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{


import javax.sound.midi.*;

public class MiniMusicCmdLine {
        
        public static void main(String[] args) {
                
                MiniMusicCmdLine mini = new MiniMusicCmdLine();
                if (args.length < 2){
                        System.out.println("악기와 음 높이를 지정하는 인자를 입력하세요.");
                } else {
                        int instrument = Integer.parseInt(args[0]);
                        int note = Integer.parseInt(args[1]);
                        mini.play(instrument, note);    
                }
        }
        
        public void play(int instrument, int note) {
                
                try{
                        
                        Sequencer player = MidiSystem.getSequencer();
                        player.open();
                        Sequence seq = new Sequence(Sequence.PPQ, 4);
                        Track track = seq.createTrack();
                        
                        MidiEvent event = null;
                        
                        ShortMessage first = new ShortMessage();
                        first.setMessage(192, 1, instrument, 0);
                        MidiEvent changeInstrument = new MidiEvent(first, 1);
                        track.add(changeInstrument);
                        
                        ShortMessage a = new ShortMessage();
                        a.setMessage(144, 1 , note, 100);
                        MidiEvent noteOn = new MidiEvent(a, 1);
                        track.add(noteOn);
                        
                        ShortMessage b = new ShortMessage();
                        a.setMessage(128, 1 , note, 100);
                        MidiEvent noteOff = new MidiEvent(b, 16);
                        track.add(noteOff);
                        player.setSequence(seq);
                        player.start();
                } catch (Exception ex) {ex.printStackTrace();}
                        
        }
        
}

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

import javax.swing.*;

public class SimpleGui1 {
	public static void main (String[] args) 	{
		
		JFrame frame = new JFrame();
		JButton button = new JButton("click me");

		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		frame.getContentPane().add(button);
		frame.setSize(300,300);
		frame.setVisible(true);
	}
}

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{


import javax.swing.*;
import java.awt.*;
import java.awt.event.*;


public class SimpleGui3C implements ActionListener {
	
	JFrame frame;
	
	public static void main (String[] args) {
		SimpleGui3C gui = new SimpleGui3C();
		gui.go();
	}
	
	public void go () {
		frame = new JFrame();
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		JButton button = new JButton("Change colors");
		button.addActionListener(this);
		
		MyDrawPanel drawPanel = new MyDrawPanel();
		
		frame.getContentPane().add(BorderLayout.SOUTH, button);
		frame.getContentPane().add(BorderLayout.CENTER, drawPanel);
		frame.setSize(300,300);
		frame.setVisible(true);
	}
	
	public void actionPerformed(ActionEvent event) {
		frame.repaint();
	}
}









import javax.swing.*;
import java.awt.*;



public class MyDrawPanel extends JPanel {
	
	public void paintComponent (Graphics g) {
		
		g.fillRect(0, 0, this.getWidth(),  this.getHeight());
		
		int red = (int)(Math.random()*256);
		int green = (int)(Math.random()*256);
		int blue = (int)(Math.random()*256);
		
		Color randomColor = new Color(red,green,blue);
		g.setColor(randomColor);
		g.fillOval(70, 70, 100, 100);	
	}

}






}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{


import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;


public class TwoButtons {

        JFrame frame;
        JLabel label;
        
        public static void main(String[] args){
                TwoButtons gui = new TwoButtons();
                gui.go();
        }
        
        public void go(){
                frame = new JFrame();
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                
                JButton labelButton = new JButton("Change Label");
                labelButton.addActionListener(new LabelListener());
                
                JButton colorButton = new JButton("Change circle");
                colorButton.addActionListener(new ColorListener());
                
                label = new JLabel("I'm a label");
                MyDrawPanel drawPanel = new MyDrawPanel();
                
                frame.getContentPane().add(BorderLayout.SOUTH, colorButton);
                frame.getContentPane().add(BorderLayout.CENTER, drawPanel);
                frame.getContentPane().add(BorderLayout.EAST, labelButton);
                frame.getContentPane().add(BorderLayout.WEST, label);
                
                frame.setSize(300, 300);
                frame.setVisible(true);
                
        }
        
        class LabelListener implements ActionListener{
                public void actionPerformed(ActionEvent event){
                        label.setText("Ouch!");
                }
        }
        
        class ColorListener implements ActionListener{
                public void actionPerformed(ActionEvent event){
                        frame.repaint();
                }
        }
        
        
        
        
        
}




import javax.swing.*;
import java.awt.*;



public class MyDrawPanel extends JPanel{

        public void paintComponent(Graphics g){
                Graphics2D g2d = (Graphics2D) g;
                
                int red = (int) (Math.random() * 256);
                int blue = (int) (Math.random() * 256);
                int green = (int) (Math.random() * 256);
                Color startColor = new Color(red, green, blue);
                
                red = (int) (Math.random() * 256);
                blue = (int) (Math.random() * 256);
                green = (int) (Math.random() * 256);
                Color endColor = new Color(red, green, blue);
                
                GradientPaint gradient = new GradientPaint(70, 70, startColor, 150, 150, endColor);
                g2d.setPaint(gradient);
                g2d.fillOval(70, 70, 100, 100);
                
                
        }
        
        
        
        
        
        
}


}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{


import java.awt.Color;
import java.awt.Graphics;

import javax.swing.JFrame;
import javax.swing.JPanel;

public class SimpleAnimation {

        int x = 70;
        int y = 70;
        
        public static void main(String[] args){
                SimpleAnimation gui = new SimpleAnimation();
                gui.go();
        }
        
        public void go(){
                        JFrame frame = new JFrame();
                        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                        
                        MyDrawPanel drawPanel = new MyDrawPanel();
                        
                        
                        frame.getContentPane().add(drawPanel);
                        frame.setSize(300, 300);
                        frame.setVisible(true);
                        
                        
                        for(int i = 0; i<130; i++){
                                x++;
                                y++;
                                
                                drawPanel.repaint();
                                
                                try{
                                        Thread.sleep(50);
                                } catch(Exception ex){}
                        }
                                        
                        
        }
        
        
        public class MyDrawPanel extends JPanel {

                public void paintComponent(Graphics g){
                        // 매번 원을 그릴때마다 바탕색을 다시 칠함으로써 문제 해결
                        g.setColor(Color.white);
                        g.fillRect(0, 0, this.getWidth(), this.getHeight());
                        
                        g.setColor(Color.green);
                        g.fillOval(x, y, 40, 40);
                        
                }
                
        
        }
        
        
}


}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;

import javax.sound.midi.ControllerEventListener;
import javax.sound.midi.MidiEvent;
import javax.sound.midi.MidiSystem;
import javax.sound.midi.Sequence;
import javax.sound.midi.Sequencer;
import javax.sound.midi.ShortMessage;
import javax.sound.midi.Track;
import javax.swing.JFrame;
import javax.swing.JPanel;


public class MiniMusicPlayer3 {

                static JFrame f = new JFrame("My First Music Video");
                static MyDrawPanel ml;
                
                public static void main(String[] args){
                                MiniMusicPlayer3 mini = new MiniMusicPlayer3();
                                mini.go();
                        }
                
                public void setUpGui(){
                        ml = new MyDrawPanel();
                        f.setContentPane(ml);
                        f.setBounds(30, 30, 300, 300);
                        f.setVisible(true);
                }
        
                public void go(){
                        setUpGui();
                        
                        try{
                                Sequencer sequencer = MidiSystem.getSequencer();
                                sequencer.open();
                                sequencer.addControllerEventListener(ml, new int[] {172});
                                Sequence seq = new Sequence(Sequence.PPQ, 4);
                                Track track = seq.createTrack();
                                
                                int r = 0;
                                for(int i = 0; i<60;i+=4){
                                        
                                                r = (int) ((Math.random() * 50) +1);
                                                track.add(makeEvent(144,1,r,100,i));
                                                track.add(makeEvent(176,1,127,0,i));
                                                track.add(makeEvent(128,1,r,100,i+2));
                                }
                                sequencer.setSequence(seq);
                                sequencer.start();
                                sequencer.setTempoInBPM(120);
                        } catch(Exception ex) {ex.printStackTrace();}
                }

        public MidiEvent makeEvent(int comd, int chan, int one, int two, int tick){
                MidiEvent event = null;
                try{
                        ShortMessage a = new ShortMessage();
                        a.setMessage(comd, chan, one, two);
                        event = new MidiEvent(a, tick);
                }catch(Exception e){    }
                return event;
        }
        
        class MyDrawPanel extends JPanel implements ControllerEventListener{
                boolean msg = false;
                
                public void controlChange(ShortMessage event){
                        msg = true;
                        repaint();
                }
                
                public void paintComponent(Graphics g){
                        if (msg){
                                Graphics2D g2 = (Graphics2D)g;
                                
                                int r = (int) (Math.random() * 250);
                                int gr = (int) (Math.random() * 250);
                                int b = (int) (Math.random() * 250);
                                
                                g.setColor(new Color(r,gr,b));
                                
                                int ht = (int) (Math.random()*120 +10);
                                int width = (int) (Math.random()*120 +10);
                                
                                int x = (int) (Math.random()*40 +10);
                                int y = (int) (Math.random()*40 +10);
                                
                                g.fillRect(x, y, ht, width);
                                msg = false;
                        }
                }
                
                
        }
        
        
        
}

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{


package finalBeatBox;

import java.awt.*;
import javax.swing.*;
import javax.sound.midi.*;
import java.util.*;
import java.awt.event.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

public class BeatBox {

    JPanel mainPanel;
    ArrayList<JCheckBox> checkboxList;
    Sequencer sequencer;
    Sequence sequence;
    Track track;
    JFrame theFrame;

    String[] instrumentNames = {"Bass Drum", "Closed Hi-Hat", 
       "Open Hi-Hat","Acoustic Snare", "Crash Cymbal", "Hand Clap", 
       "High Tom", "Hi Bongo", "Maracas", "Whistle", "Low Conga", 
       "Cowbell", "Vibraslap", "Low-mid Tom", "High Agogo", 
       "Open Hi Conga"}; 
    int[] instruments = {35,42,46,38,49,39,50,60,70,72,64,56,58,47,67,63};
                
    public static void main (String[] args) {
        new BeatBox().buildGUI();
    }
  
    public void buildGUI() {
        theFrame = new JFrame("Cyber BeatBox");
        theFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        BorderLayout layout = new BorderLayout();
        JPanel background = new JPanel(layout);
        background.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));
                                      
        checkboxList = new ArrayList<JCheckBox>();
        Box buttonBox = new Box(BoxLayout.Y_AXIS);

        JButton start = new JButton("Start");
        start.addActionListener(new MyStartListener());
        buttonBox.add(start);         
          
        JButton stop = new JButton("Stop");
        stop.addActionListener(new MyStopListener());
        buttonBox.add(stop);

        JButton upTempo = new JButton("Tempo Up");
        upTempo.addActionListener(new MyUpTempoListener());
        buttonBox.add(upTempo);

        JButton downTempo = new JButton("Tempo Down");
        downTempo.addActionListener(new MyDownTempoListener());
        buttonBox.add(downTempo);

        Box nameBox = new Box(BoxLayout.Y_AXIS);
        for (int i = 0; i < 16; i++) {
           nameBox.add(new Label(instrumentNames[i]));
        }
        
        background.add(BorderLayout.EAST, buttonBox);
        background.add(BorderLayout.WEST, nameBox);

        theFrame.getContentPane().add(background);
          
        GridLayout grid = new GridLayout(16,16);
        grid.setVgap(1);
        grid.setHgap(2);
        mainPanel = new JPanel(grid);
        background.add(BorderLayout.CENTER, mainPanel);

        for (int i = 0; i < 256; i++) {                    
            JCheckBox c = new JCheckBox();
            c.setSelected(false);
            checkboxList.add(c);
            mainPanel.add(c);            
        } // end loop

        setUpMidi();

        theFrame.setBounds(50,50,300,300);
        theFrame.pack();
        theFrame.setVisible(true);
    } // close method


    public void setUpMidi() {
      try {
        sequencer = MidiSystem.getSequencer();
        sequencer.open();
        sequence = new Sequence(Sequence.PPQ,4);
        track = sequence.createTrack();
        sequencer.setTempoInBPM(120);
        
      } catch(Exception e) {e.printStackTrace();}
    } 

    public void buildTrackAndStart() {
      int[] trackList = null;     
      sequence.deleteTrack(track);
      track = sequence.createTrack(); 

        for (int i = 0; i < 16; i++) { 
          trackList = new int[16];
 
          int key = instruments[i];   

          for (int j = 0; j < 16; j++ ) {         
              JCheckBox jc = (JCheckBox) checkboxList.get(j + (16*i));
              if ( jc.isSelected()) { 
                 trackList[j] = key;
              } else {                  trackList[j] = 0;
              }                    
           } 
         
           makeTracks(trackList); 
           track.add(makeEvent(176,1,127,0,16));  
       } 

       track.add(makeEvent(192,9,1,0,15));      
       try {
           sequencer.setSequence(sequence); 
             sequencer.setLoopCount(sequencer.LOOP_CONTINUOUSLY);
           sequencer.start();
           sequencer.setTempoInBPM(120);
       } catch(Exception e) {e.printStackTrace();} 
    } 
            
           
    public class MyStartListener implements ActionListener {
        public void actionPerformed(ActionEvent a) {
            buildTrackAndStart();
        }
    }

    public class MyStopListener implements ActionListener {
        public void actionPerformed(ActionEvent a) {
            sequencer.stop();
        }
    } 

    public class MyUpTempoListener implements ActionListener {
        public void actionPerformed(ActionEvent a) {
              float tempoFactor = sequencer.getTempoFactor(); 
            sequencer.setTempoFactor((float)(tempoFactor * 1.03)); 
        }
     } 
     public class MyDownTempoListener implements ActionListener {
         public void actionPerformed(ActionEvent a) {
              float tempoFactor = sequencer.getTempoFactor();
            sequencer.setTempoFactor((float)(tempoFactor * .97));         }
    } 

     public class MySendListener implements ActionListener {
         public void actionPerformed(ActionEvent a) {       
     boolean[] checkboxState = new boolean[256]; 

           for (int i = 0; i < 256; i++) {
               JCheckBox check = (JCheckBox) checkboxList.get(i); 
               if (check.isSelected()) {
                  checkboxState[i] = true;
               }
            }

           try {
              FileOutputStream fileStream = new FileOutputStream(
                  new File("Checkbox.ser"));
              ObjectOutputStream os = new ObjectOutputStream(fileStream);
              os.writeObject(checkboxState);
           } catch(Exception ex) {
               ex.printStackTrace();
           }

         }        } 



      public class MyReadInListener implements ActionListener { 
          public void actionPerformed(ActionEvent a) {

            boolean[] checkboxState = null;
            try {
                FileInputStream fileIn = new FileInputStream(
                    new File("Checkbox.ser"));
                ObjectInputStream is = new ObjectInputStream(fileIn);
                checkboxState = (boolean[]) is.readObject(); 

            } catch(Exception ex) {ex.printStackTrace();}

            
            for (int i = 0; i < 256; i++) {
               JCheckBox check = (JCheckBox) checkboxList.get(i);
               if (checkboxState[i]) {
                  check.setSelected(true);
               } else {
                  check.setSelected(false);
               }
           } 


          sequencer.stop(); 
          buildTrackAndStart();
        } 
    } 
     
     
    public void makeTracks(int[] list) {        
       
       for (int i = 0; i < 16; i++) {
          int key = list[i];

          if (key != 0) {
             track.add(makeEvent(144,9,key, 100, i));
             track.add(makeEvent(128,9,key, 100, i+1));
          }
       }
    }
        
    public  MidiEvent makeEvent(int comd, int chan, int one, int two, int tick) {
        MidiEvent event = null;
        try {
            ShortMessage a = new ShortMessage();
            a.setMessage(comd, chan, one, two);
            event = new MidiEvent(a, tick);
        } catch(Exception e) {e.printStackTrace(); }
        return event;
    }

} 



}}}