#summary 수업중 실습하는 내용을 올리게 되는 실습페이지입니다. 페이지의 내용은 각 학생에 의해서 관리됩니다.

<wiki:toc max_depth="1" />

= 01. 껍질을 깨고:간단한 소개 =

*48p BeerSong* _문제해결하기, 주석달기_

{{{


public class BeerSong {

	public static void main (String[] args) {
		int beerNum=99;
		String word = "bottles"; //복수형
		
		while (beerNum > 0){
			

			
			System.out.println(beerNum + " " + word + " of beer on the wall");
			System.out.println(beerNum + " " + word + " of beer.");
			System.out.println("Take one down.");
			System.out.println("Pass it around.");
			beerNum = beerNum -1;
			
			if (beerNum ==1)	{
				word = "bottle"; //단수형
			}



			if (beerNum >0) {
				System.out.println(beerNum + " " + word + " of beer on the wall");
			}else {
				System.out.println("No more bottles of beer on the wall");
			}
		}
	}
}

}}}

*50p PhraseOMatic* _wordListOne, wordListTwo, wordListThree를 변경_

{{{


public class PhraseOMatic {
	public static void main (String[] args) {
		
		String[] wordListOne = {"good", "bad", "beautiful", "elegance", "massive", "hot", "dynamic", "useful"};
		String[] wordListTwo = {"persisted", "kept","contacted","focused","targeted","shared","cooperative"};
		String[] wordListThree = {"character", "thinking", "mission", "strategy", "skill", "medicine","eye"};
		
		int oneLength = wordListOne.length;
		int twoLength = wordListTwo.length;
		int threeLength = wordListThree.length;
		
		int rand1 = (int) (Math.random() * oneLength);
		int rand2 = (int) (Math.random() * twoLength);
		int rand3 = (int) (Math.random() * threeLength);
		
		String phrase = wordListOne[rand1] + " " + wordListTwo[rand2] + " " + wordListThree[rand3];
		
		System.out.println ("What we need is a " + phrase);
	}
}


}}}

*52p 집중토론* _요약_

 * 자바 가상 머신: 프로그램을 실행시킨다, 바이트코드가 실행되기 전에 예외의 접근자가 접근했는지 확인해주는 작업을 한다.
 * 컴파일러: 변수에 다른 유형의 데이터를 저장하는것을 미리 막아준다, 비공개 메소드를 호출하려고 하거나 바꿀수 없는 메소드를 변경하려는등의 접근위반을 미리 방지해준다, 다른 클래스의 내용에 미자격자가 접근하는것을 차단해준다

*55p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

A

class Exercise1b {

public static void main(String [] args) {
	int x = 1;
	while (x<10) {
		if (x>3){
		System.out.println("big x");
		x=x+1; //x=x+1을 넣지 않으면 무한루트 발생
			}
		}
	}
}


B

class Exercise1b { //class를 넣어주어야함

public static void main(String [] args) {
	int x = 5;
	while (x>1) {
		x = x-1;
		if (x<3) {
			System.out.println("small x");
			}
		}
	}
}


C

class Exercise1b {

public static void main(String [] args) { //메인메소드를 넣어주어야함

	int x = 5;
	while (x>1) {
		x = x -1;
		if (x <3) {
			System.out.println ("small x");
			}
		}
	}
}

}}}


= 02. 객체마을로의 여행:객체에 대해 알아봅시다  =

*68p~ 클래스* _요약_

 * 인스턴스 변수: 객체의 상태를 나타낸다.
 * 메소드: 객체에서 할수 있는 일을 나타낸다.
 * 클래스: 실제로 사용할 객체의 유형을 나타내는 클래스
 * 테스트용 클래스: 새로운 클래스 유형의 객체에 들어있는 메소드와 변수를 테스트함
 

*68p Television* _채워넣기_

 * 인스턴스 변수: channel, button
 * 메소드: display, sound


*72p GuessGame* _게임에 참여하는 사람 수를 4명으로 변경_

{{{

public class Player {

    int number = 0;

    public void guess() {
        number = (int) (Math.random() * 10);
        System.out.println("찍은 숫자: " + number);
    }
}

----------------------------------------------------------------


public class GameLauncher {
    public static void main (String[] args) {
        GuessGame game = new GuessGame();
        game.startGame();
    }
}


-----------------------------------------------------------------


public class GuessGame {
    Player p1;
    Player p2;
    Player p3;
    Player p4;

    public void startGame() {
        p1 = new Player();
        p2 = new Player();
        p3 = new Player();
        p4 = new Player();

        int guessp1 = 0;
        int guessp2 = 0;
        int guessp3 = 0;
        int guessp4 = 0;

        boolean p1isRight = false;
        boolean p2isRight = false;
        boolean p3isRight = false;
        boolean p4isRight = false;

        int targetNumber = (int) (Math.random() * 10);
        System.out.println("0 이상 9 이하의 숫자를 맞춰보세요.");

        while(true) {
            System.out.println("맞춰야 할 숫자는 " + targetNumber + "입니다.");
            
            p1.guess();
            p2.guess();
            p3.guess();
            p4.guess();

            guessp1 = p1.number;
            System.out.println("1번 선수가 찍은 숫자: " + guessp1);
            guessp2 = p2.number;
            System.out.println("2번 선수가 찍은 숫자: " + guessp2);
            guessp3 = p3.number;
            System.out.println("3번 선수가 찍은 숫자: " + guessp3);
            guessp4 = p4.number;
            System.out.println("4번 선수가 찍은 숫자: " + guessp4);


            if (guessp1 == targetNumber) {
                p1isRight = true;
            }
            if (guessp2 == targetNumber) {
                p2isRight = true;
            }
            if (guessp3 == targetNumber) {
                p3isRight = true;
            }
            if (guessp4 == targetNumber) {
                p4isRight = true;
            }


            if (p1isRight || p2isRight || p3isRight || p4isRight) {

                System.out.println("맞춘 선수가 있습니다.");
                System.out.println("1번 선수: " + p1isRight);
                System.out.println("2번 선수: " + p2isRight);
                System.out.println("3번 선수: " + p3isRight);
                System.out.println("4번 선수: " + p4isRight);
                System.out.println("게임 끝.");
                break;

            }    else    {
                System.out.println("다시 시도해야 합니다.");
            }
        }
    }
}


}}}

*76p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

A.


public class TapeDeck {

	boolean canRecord = false;
	
	void playTape() {
		System.out.println("tape Playing");
	}	
		
		void recordTape(){
			System.out.println("tape recording");
		}
	}




public class TapeDeckTestDrive {

	public static void main(String [] args) {
		
		TapeDeck t = new TapeDeck(); //객체 생성
		t.canRecord = true;
		t.playTape();
		
		if (t.canRecord == true) {
			t.recordTape();
			
		}
	}
}


B.



public class DVDPlayer {
	
	boolean canRecord = false;
	void recordDVD() {
		System.out.println("DVD recording");
		
	}
	
	void playDVD() {
		System.out.println ("DVD playing");
	} /*DVDPlayerTestDrive 클래스에서 playDVD메소드를 사용했으므로 미리 선언해주어야 함*/

}



public class DVDPlayerTestDrive {

	public static void main(String [] args) {
		
		DVDPlayer d = new DVDPlayer();
		d.canRecord = true;
		d.playDVD();
		
		if (d.canRecord == true) {
			d.recordDVD();
			
		}
	}
}




}}}

= 03. 네 변수를알라:원시 변수와 레퍼런스  =

*83p~ 변수* _요약_

 * 원시변수 vs 레퍼런스변수: 

원시변수는 int,double,float 와 같은 변수를 의미하고 레퍼런스변수는 객체를 나타내는 변수를 의미한다.
 
*96p Dog* _수많은 개를 만들어 난장판 만들기_

{{{


class Dog {

	String name;
	public static void main (String[] args) {
		
		Dog dog1 = new Dog();
		dog1.bark();
		dog1.name = "Bart";
		
		Dog[] myDogs = new Dog[3];
		
		myDogs[0] = new Dog();
		myDogs[1] = new Dog();
		myDogs[2] = dog1;
		
		myDogs[0].name = "Fred";
		myDogs[1].name = "Marge";
		
		System.out.print("마지막 개의 이름: ");
		System.out.println(myDogs[2].name);
		
		int x = 0;
		while(x<myDogs.length) {
			myDogs[x].bark();
			x=x+1;
		}
	}
	
	public void bark() {
		System.out.println(name + "이(가) 왈!하고 짖습니다.");
	}
	public void eat() { }
	public void chaseCat() { }

		

}

}}}

*97p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{


A


class Books {

	String title;
	String author;
	
}




class BookTestDrive {

	public static void main(String [] args) {
		
		Books [] myBooks = new Books[3];
		myBooks[0] = new Books(); //객체를 생성해줘야함
		myBooks[1] = new Books();
		myBooks[2] = new Books();
		int x = 0;
		myBooks[0].title = "The Grapes of Java";
		myBooks[1].title = "The Java Gatsby";
		myBooks[2].title = "The Java Cookbook";
		myBooks[0].author = "bob";
		myBooks[1].author = "sue";
		myBooks[2].author = "ian";
		
		while (x<3) {
			System.out.print(myBooks[x].title);
			System.out.print(" by ");
			System.out.println(myBooks[x].author);
			x=x+1;
		}
	}
}


}}}

*101p 레퍼런스 도용사건* _요약_

 * 누가 이겼나요?:
 * 문제가 된 부분은 어딘가요?:

= 04. 객체의 행동:객체의 상태가 메소드의 속성에 미치는 영향  =

*105p~ 객체* _요약_

 * 캡슐화:
 * 게터와 세터:
 * 인스턴스 변수 vs 지역 변수:
 
*107p Dog* _실행_

{{{

}}}

*122p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}


= 05. 메소드를 더 강력하게:흐름 제어, 연산 등  =

*135p XP* _요약_

 * 익스트림 프로그래밍이란?
 
*137p~ 간단한 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 06. 자바 라이브러리:전부 다 직접 만들어서 쓸 필요는 없습니다  =

*162p 닷컴 게임:첫번째 옵션* _구현후 주석달기_

{{{

}}}

*163p 닷컴 게임:두번째 옵션* _구현후 주석달기_

{{{

}}}

*173p 닷컴 게임:세번째 옵션* _구현후 주석달기_

{{{

}}}

*174p 진짜 닷컴 게임* _구현후 주석달기_

{{{

}}}

= 07. 객체마을에서의 더 나은 삶:미래를 준비합시다  =

*199p~ 상속과 다형성* _요약_

 * 상속:
 * 다형성:

*208p 클래스 계층 구조* _클래스로 구현_

{{{

}}}
 
*224p 오버라이드와 오버로딩* _요약_

 * 오버라이드:
 * 오버로딩:

*227p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 08. 심각한 다형성:추상 클래스와 인터페이스  =

*231p~ 심각한 다형성* _요약_

 * 인터페이스:
 * 다형성:
 * 추상 클래스:
 * 추상 메소드:
 * 다중 상속:

= 09. 객체의 삶과 죽음:생성자와 메모리 관리  =

*269p~ 객체의 삶과 죽음* _요약_

 * 힙에서의 변수:
 * 스택에서의 변수:
 * 생성자:
 * 널 레퍼런스:
 
*298p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*302p 5분 미스터리* _구현후 주석달기_

{{{

}}}

= 10. 숫자는 정말 중요합니다:수학, 포매팅, 래퍼, 통계  =

*307p~ 숫자* _요약_

 * 정적 메소드:
 * 정적 메소드를 선언하는 방법:
 * static final:
 * 널 레퍼런스:
 * 오토 박싱:
 * 정적 임포트:

*339p Calendar* _구현후 주석달기_

{{{

}}}

*342p 집중토론* _요약_

 * 인스턴스 변수:
 * 지역 변수: 

*344p 컴파일러가 되어봅시다* _구현후 주석달기_

{{{

}}}

= 11. 위험한 행동:예외처리  =

*357p try/catch* _구현후 주석달기_

{{{

}}}

*376p~ 첫번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

*380p~ 두번째 사운드 애플리케이션* _구현후 주석달기_

{{{

}}}

= 12. 그래픽이야기:GUI, 이벤트처리, 내부 클래스에 대한 소개  =

*389p~ 첫번째 GUI:버튼* _구현후 주석달기_

{{{

}}}

*394p~ ActionEvent* _구현후 주석달기_

{{{

}}}

*405p 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*413p 두개의 버튼과 원의색* _구현후 주석달기_

{{{

}}}

*418p 간단한 애니메이션* _구현후 주석달기_

{{{

}}}

*420p 뮤직 비디오* _구현후 주석달기_

{{{

}}}

= 13. 스윙을 알아봅시다:레이아웃 관리와 구성요소  =

*452p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}

= 14. 객체 저장:직렬화와 입출력  =

*496p 비트박스 프로그램* _구현후 주석달기_

{{{

}}}